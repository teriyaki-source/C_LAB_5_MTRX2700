
CLab_ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800055c  08000564  00001564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800055c  0800055c  00001564  2**0
                  CONTENTS
  4 .ARM          00000000  0800055c  0800055c  00001564  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800055c  08000564  00001564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800055c  0800055c  0000155c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000560  08000560  00001560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001564  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f32  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000465  00000000  00000000  000024c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000110  00000000  00000000  00002930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b3  00000000  00000000  00002a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015af1  00000000  00000000  00002af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000017dd  00000000  00000000  000185e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076217  00000000  00000000  00019dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008ffd8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002a0  00000000  00000000  0009001c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  000902bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000544 	.word	0x08000544

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000544 	.word	0x08000544

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	@ (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	@ (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <EXTI0_IRQHandler>:
//function pointer to a function when a button is pressed, set to NULL so when it not assigned to any
//specific function it wont be called
void (*button_pressed)() = 0x00;

void EXTI0_IRQHandler()
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	//call function button_pressed if its not NULL pointer
	if (button_pressed != 0x00)
 8000268:	4b07      	ldr	r3, [pc, #28]	@ (8000288 <EXTI0_IRQHandler+0x24>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d002      	beq.n	8000276 <EXTI0_IRQHandler+0x12>
	{
		button_pressed();
 8000270:	4b05      	ldr	r3, [pc, #20]	@ (8000288 <EXTI0_IRQHandler+0x24>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4798      	blx	r3
	}
	EXTI->PR |= EXTI_PR_PR0;
 8000276:	4b05      	ldr	r3, [pc, #20]	@ (800028c <EXTI0_IRQHandler+0x28>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	4a04      	ldr	r2, [pc, #16]	@ (800028c <EXTI0_IRQHandler+0x28>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6153      	str	r3, [r2, #20]
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	20000020 	.word	0x20000020
 800028c:	40010400 	.word	0x40010400

08000290 <enable_interrupt_button>:

void enable_interrupt_button()
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000294:	b672      	cpsid	i
}
 8000296:	bf00      	nop
	// disable interrupt
	__disable_irq();

	// enable the system configuration controller
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000298:	4b11      	ldr	r3, [pc, #68]	@ (80002e0 <enable_interrupt_button+0x50>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a10      	ldr	r2, [pc, #64]	@ (80002e0 <enable_interrupt_button+0x50>)
 800029e:	f043 0301 	orr.w	r3, r3, #1
 80002a2:	6193      	str	r3, [r2, #24]

	// External Interrupts PA0
	// EXTI0 in SYSCFG_EXTICR1 needs to be 0x00
	SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 80002a4:	4b0f      	ldr	r3, [pc, #60]	@ (80002e4 <enable_interrupt_button+0x54>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	609a      	str	r2, [r3, #8]

	//  Select EXTI0 interrupt on rising edge
	EXTI->RTSR |= EXTI_RTSR_TR0; // rising edge of EXTI line 0 (includes PA0)
 80002aa:	4b0f      	ldr	r3, [pc, #60]	@ (80002e8 <enable_interrupt_button+0x58>)
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	4a0e      	ldr	r2, [pc, #56]	@ (80002e8 <enable_interrupt_button+0x58>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6093      	str	r3, [r2, #8]

	// set the interrupt from EXTI line 0 as 'not masked' - as in, enable it.
	EXTI->IMR |= EXTI_IMR_MR0;
 80002b6:	4b0c      	ldr	r3, [pc, #48]	@ (80002e8 <enable_interrupt_button+0x58>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a0b      	ldr	r2, [pc, #44]	@ (80002e8 <enable_interrupt_button+0x58>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	6013      	str	r3, [r2, #0]

	// Tell the NVIC module that EXTI0 interrupts should be handled
	NVIC_SetPriority(EXTI0_IRQn, 1);  // Set Priority
 80002c2:	2101      	movs	r1, #1
 80002c4:	2006      	movs	r0, #6
 80002c6:	f7ff ffa3 	bl	8000210 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 80002ca:	2006      	movs	r0, #6
 80002cc:	f7ff ff82 	bl	80001d4 <__NVIC_EnableIRQ>

	//set handler function
	button_pressed = led_flag_on;
 80002d0:	4b06      	ldr	r3, [pc, #24]	@ (80002ec <enable_interrupt_button+0x5c>)
 80002d2:	4a07      	ldr	r2, [pc, #28]	@ (80002f0 <enable_interrupt_button+0x60>)
 80002d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80002d6:	b662      	cpsie	i
}
 80002d8:	bf00      	nop

	// Re-enable interrupts
	__enable_irq();
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40021000 	.word	0x40021000
 80002e4:	40010000 	.word	0x40010000
 80002e8:	40010400 	.word	0x40010400
 80002ec:	20000020 	.word	0x20000020
 80002f0:	08000339 	.word	0x08000339

080002f4 <get_current_led>:

void get_current_led(uint8_t *bitmask)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	*bitmask = *(((uint8_t*)&(GPIOE->ODR)) + 1);
 80002fc:	4b04      	ldr	r3, [pc, #16]	@ (8000310 <get_current_led+0x1c>)
 80002fe:	781a      	ldrb	r2, [r3, #0]
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	701a      	strb	r2, [r3, #0]
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	48001015 	.word	0x48001015

08000314 <store_led>:

void store_led(uint8_t bitmask)
{
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800031e:	4b05      	ldr	r3, [pc, #20]	@ (8000334 <store_led+0x20>)
 8000320:	60fb      	str	r3, [r7, #12]

	*led_register = bitmask;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	79fa      	ldrb	r2, [r7, #7]
 8000326:	701a      	strb	r2, [r3, #0]
}
 8000328:	bf00      	nop
 800032a:	3714      	adds	r7, #20
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	48001015 	.word	0x48001015

08000338 <led_flag_on>:

void led_flag_on()
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	led_flag = PRESSED;
 800033c:	4b03      	ldr	r3, [pc, #12]	@ (800034c <led_flag_on+0x14>)
 800033e:	2201      	movs	r2, #1
 8000340:	701a      	strb	r2, [r3, #0]

}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	2000001c 	.word	0x2000001c

08000350 <led_flag_off>:

void led_flag_off()
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
	//reset the flag to NOT_PRESSED
	led_flag = NOT_PRESSED;
 8000354:	4b03      	ldr	r3, [pc, #12]	@ (8000364 <led_flag_off+0x14>)
 8000356:	2200      	movs	r2, #0
 8000358:	701a      	strb	r2, [r3, #0]
}
 800035a:	bf00      	nop
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	2000001c 	.word	0x2000001c

08000368 <modify_led>:

void modify_led()
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
	//variable for storing bitmask

	uint8_t bitmask;

	//get the current bitmask for led
	get_current_led(&bitmask);
 800036e:	1dfb      	adds	r3, r7, #7
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ffbf 	bl	80002f4 <get_current_led>


	bitmask <<= 1;
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	b2db      	uxtb	r3, r3
 800037c:	71fb      	strb	r3, [r7, #7]
	if (bitmask == 0)
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d101      	bne.n	8000388 <modify_led+0x20>
	{
		bitmask = 1;
 8000384:	2301      	movs	r3, #1
 8000386:	71fb      	strb	r3, [r7, #7]
	}

	//store led bitmask back
	store_led(bitmask);
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ffc2 	bl	8000314 <store_led>

}
 8000390:	bf00      	nop
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <led_start_up>:

void led_start_up()
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	enable_clocks();
 800039c:	f000 f816 	bl	80003cc <enable_clocks>

	initialise_board();
 80003a0:	f000 f82a 	bl	80003f8 <initialise_board>

	enable_interrupt_button();
 80003a4:	f7ff ff74 	bl	8000290 <enable_interrupt_button>
}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}

080003ac <flag_check>:

void flag_check()
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	if(led_flag == PRESSED)
 80003b0:	4b05      	ldr	r3, [pc, #20]	@ (80003c8 <flag_check+0x1c>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d105      	bne.n	80003c4 <flag_check+0x18>
	{
		modify_led();
 80003b8:	f7ff ffd6 	bl	8000368 <modify_led>
		timer_loop();
 80003bc:	f000 f861 	bl	8000482 <timer_loop>
		led_flag_off();
 80003c0:	f7ff ffc6 	bl	8000350 <led_flag_off>
	}
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	2000001c 	.word	0x2000001c

080003cc <enable_clocks>:
#include "initialisation.h"

void enable_clocks()
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80003d0:	4b08      	ldr	r3, [pc, #32]	@ (80003f4 <enable_clocks+0x28>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	4a07      	ldr	r2, [pc, #28]	@ (80003f4 <enable_clocks+0x28>)
 80003d6:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80003da:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80003dc:	4b05      	ldr	r3, [pc, #20]	@ (80003f4 <enable_clocks+0x28>)
 80003de:	69db      	ldr	r3, [r3, #28]
 80003e0:	4a04      	ldr	r2, [pc, #16]	@ (80003f4 <enable_clocks+0x28>)
 80003e2:	f043 0301 	orr.w	r3, r3, #1
 80003e6:	61d3      	str	r3, [r2, #28]
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40021000 	.word	0x40021000

080003f8 <initialise_board>:

//initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board()
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80003fe:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <initialise_board+0x20>)
 8000400:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000408:	801a      	strh	r2, [r3, #0]
}
 800040a:	bf00      	nop
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	48001002 	.word	0x48001002

0800041c <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


int main(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0

	led_start_up();
 8000420:	f7ff ffba 	bl	8000398 <led_start_up>

	start_timer();
 8000424:	f000 f81a 	bl	800045c <start_timer>

	/*loop forever*/
	for(;;)
	{
		flag_check();
 8000428:	f7ff ffc0 	bl	80003ac <flag_check>
 800042c:	e7fc      	b.n	8000428 <main+0xc>

0800042e <trigger_prescaler>:
#include "timer.h"

void trigger_prescaler()
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0

	TIM2->ARR = 0x01;
 8000432:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000436:	2201      	movs	r2, #1
 8000438:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CNT = 0x00;
 800043a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800043e:	2200      	movs	r2, #0
 8000440:	625a      	str	r2, [r3, #36]	@ 0x24
	asm("NOP");
 8000442:	bf00      	nop
	asm("NOP");
 8000444:	bf00      	nop
	asm("NOP");
 8000446:	bf00      	nop
	TIM2->ARR = 0xffffffff;
 8000448:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800044c:	f04f 32ff 	mov.w	r2, #4294967295
 8000450:	62da      	str	r2, [r3, #44]	@ 0x2c

}
 8000452:	bf00      	nop
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr

0800045c <start_timer>:

void start_timer()
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	//let timer running
	TIM2->CR1 |= TIM_CR1_CEN;
 8000460:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800046a:	f043 0301 	orr.w	r3, r3, #1
 800046e:	6013      	str	r3, [r2, #0]

	//set prescaler to 7999 to get the frequency of 1kHz
	TIM2->PSC = 7999;
 8000470:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000474:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000478:	629a      	str	r2, [r3, #40]	@ 0x28
	trigger_prescaler();
 800047a:	f7ff ffd8 	bl	800042e <trigger_prescaler>

}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}

08000482 <timer_loop>:

void timer_loop()
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
	TIM2->CNT = 0;
 8000486:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800048a:	2200      	movs	r2, #0
 800048c:	625a      	str	r2, [r3, #36]	@ 0x24
	while (TIM2->CNT < DELAY) {} ;
 800048e:	bf00      	nop
 8000490:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000496:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800049a:	d3f9      	bcc.n	8000490 <timer_loop+0xe>
	//reset interrupt
}
 800049c:	bf00      	nop
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <Reset_Handler>:
 80004a8:	480d      	ldr	r0, [pc, #52]	@ (80004e0 <LoopForever+0x2>)
 80004aa:	4685      	mov	sp, r0
 80004ac:	f3af 8000 	nop.w
 80004b0:	480c      	ldr	r0, [pc, #48]	@ (80004e4 <LoopForever+0x6>)
 80004b2:	490d      	ldr	r1, [pc, #52]	@ (80004e8 <LoopForever+0xa>)
 80004b4:	4a0d      	ldr	r2, [pc, #52]	@ (80004ec <LoopForever+0xe>)
 80004b6:	2300      	movs	r3, #0
 80004b8:	e002      	b.n	80004c0 <LoopCopyDataInit>

080004ba <CopyDataInit>:
 80004ba:	58d4      	ldr	r4, [r2, r3]
 80004bc:	50c4      	str	r4, [r0, r3]
 80004be:	3304      	adds	r3, #4

080004c0 <LoopCopyDataInit>:
 80004c0:	18c4      	adds	r4, r0, r3
 80004c2:	428c      	cmp	r4, r1
 80004c4:	d3f9      	bcc.n	80004ba <CopyDataInit>
 80004c6:	4a0a      	ldr	r2, [pc, #40]	@ (80004f0 <LoopForever+0x12>)
 80004c8:	4c0a      	ldr	r4, [pc, #40]	@ (80004f4 <LoopForever+0x16>)
 80004ca:	2300      	movs	r3, #0
 80004cc:	e001      	b.n	80004d2 <LoopFillZerobss>

080004ce <FillZerobss>:
 80004ce:	6013      	str	r3, [r2, #0]
 80004d0:	3204      	adds	r2, #4

080004d2 <LoopFillZerobss>:
 80004d2:	42a2      	cmp	r2, r4
 80004d4:	d3fb      	bcc.n	80004ce <FillZerobss>
 80004d6:	f000 f811 	bl	80004fc <__libc_init_array>
 80004da:	f7ff ff9f 	bl	800041c <main>

080004de <LoopForever>:
 80004de:	e7fe      	b.n	80004de <LoopForever>
 80004e0:	2000a000 	.word	0x2000a000
 80004e4:	20000000 	.word	0x20000000
 80004e8:	20000000 	.word	0x20000000
 80004ec:	08000564 	.word	0x08000564
 80004f0:	20000000 	.word	0x20000000
 80004f4:	20000024 	.word	0x20000024

080004f8 <ADC1_2_IRQHandler>:
 80004f8:	e7fe      	b.n	80004f8 <ADC1_2_IRQHandler>
	...

080004fc <__libc_init_array>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	4d0d      	ldr	r5, [pc, #52]	@ (8000534 <__libc_init_array+0x38>)
 8000500:	4c0d      	ldr	r4, [pc, #52]	@ (8000538 <__libc_init_array+0x3c>)
 8000502:	1b64      	subs	r4, r4, r5
 8000504:	10a4      	asrs	r4, r4, #2
 8000506:	2600      	movs	r6, #0
 8000508:	42a6      	cmp	r6, r4
 800050a:	d109      	bne.n	8000520 <__libc_init_array+0x24>
 800050c:	4d0b      	ldr	r5, [pc, #44]	@ (800053c <__libc_init_array+0x40>)
 800050e:	4c0c      	ldr	r4, [pc, #48]	@ (8000540 <__libc_init_array+0x44>)
 8000510:	f000 f818 	bl	8000544 <_init>
 8000514:	1b64      	subs	r4, r4, r5
 8000516:	10a4      	asrs	r4, r4, #2
 8000518:	2600      	movs	r6, #0
 800051a:	42a6      	cmp	r6, r4
 800051c:	d105      	bne.n	800052a <__libc_init_array+0x2e>
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	f855 3b04 	ldr.w	r3, [r5], #4
 8000524:	4798      	blx	r3
 8000526:	3601      	adds	r6, #1
 8000528:	e7ee      	b.n	8000508 <__libc_init_array+0xc>
 800052a:	f855 3b04 	ldr.w	r3, [r5], #4
 800052e:	4798      	blx	r3
 8000530:	3601      	adds	r6, #1
 8000532:	e7f2      	b.n	800051a <__libc_init_array+0x1e>
 8000534:	0800055c 	.word	0x0800055c
 8000538:	0800055c 	.word	0x0800055c
 800053c:	0800055c 	.word	0x0800055c
 8000540:	08000560 	.word	0x08000560

08000544 <_init>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	bf00      	nop
 8000548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054a:	bc08      	pop	{r3}
 800054c:	469e      	mov	lr, r3
 800054e:	4770      	bx	lr

08000550 <_fini>:
 8000550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000552:	bf00      	nop
 8000554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000556:	bc08      	pop	{r3}
 8000558:	469e      	mov	lr, r3
 800055a:	4770      	bx	lr
