
CLab_ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ec  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000480  08000488  00001488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000480  08000480  00001488  2**0
                  CONTENTS
  4 .ARM          00000000  08000480  08000480  00001488  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000480  08000488  00001488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000480  08000480  00001480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000484  08000484  00001484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001488  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d88  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003b3  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  000025f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007c  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000159d6  00000000  00000000  00002734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001206  00000000  00000000  0001810a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076128  00000000  00000000  00019310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008f438  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001bc  00000000  00000000  0008f47c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0008f638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000468 	.word	0x08000468

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000468 	.word	0x08000468

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	@ (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	@ (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <enable_interrupt_button>:
#include "button.h"

void enable_interrupt_button()
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000268:	b672      	cpsid	i
}
 800026a:	bf00      	nop
	// disable interrupt
	__disable_irq();

	// enable the system configuration controller
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800026c:	4b0f      	ldr	r3, [pc, #60]	@ (80002ac <enable_interrupt_button+0x48>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a0e      	ldr	r2, [pc, #56]	@ (80002ac <enable_interrupt_button+0x48>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6193      	str	r3, [r2, #24]

	// External Interrupts PA0
	// EXTI0 in SYSCFG_EXTICR1 needs to be 0x00
	SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 8000278:	4b0d      	ldr	r3, [pc, #52]	@ (80002b0 <enable_interrupt_button+0x4c>)
 800027a:	2200      	movs	r2, #0
 800027c:	609a      	str	r2, [r3, #8]

	//  Select EXTI0 interrupt on rising edge
	EXTI->RTSR |= EXTI_RTSR_TR0; // rising edge of EXTI line 0 (includes PA0)
 800027e:	4b0d      	ldr	r3, [pc, #52]	@ (80002b4 <enable_interrupt_button+0x50>)
 8000280:	689b      	ldr	r3, [r3, #8]
 8000282:	4a0c      	ldr	r2, [pc, #48]	@ (80002b4 <enable_interrupt_button+0x50>)
 8000284:	f043 0301 	orr.w	r3, r3, #1
 8000288:	6093      	str	r3, [r2, #8]

	// set the interrupt from EXTI line 0 as 'not masked' - as in, enable it.
	EXTI->IMR |= EXTI_IMR_MR0;
 800028a:	4b0a      	ldr	r3, [pc, #40]	@ (80002b4 <enable_interrupt_button+0x50>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a09      	ldr	r2, [pc, #36]	@ (80002b4 <enable_interrupt_button+0x50>)
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6013      	str	r3, [r2, #0]

	// Tell the NVIC module that EXTI0 interrupts should be handled
	NVIC_SetPriority(EXTI0_IRQn, 1);  // Set Priority
 8000296:	2101      	movs	r1, #1
 8000298:	2006      	movs	r0, #6
 800029a:	f7ff ffb9 	bl	8000210 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 800029e:	2006      	movs	r0, #6
 80002a0:	f7ff ff98 	bl	80001d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80002a4:	b662      	cpsie	i
}
 80002a6:	bf00      	nop

	// Re-enable interrupts
	__enable_irq();
}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	40021000 	.word	0x40021000
 80002b0:	40010000 	.word	0x40010000
 80002b4:	40010400 	.word	0x40010400

080002b8 <get_current_led>:

void get_current_led(uint8_t *led_bitmask)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	*led_bitmask = *(((uint8_t*)&(GPIOE->ODR)) + 1);
 80002c0:	4b04      	ldr	r3, [pc, #16]	@ (80002d4 <get_current_led+0x1c>)
 80002c2:	781a      	ldrb	r2, [r3, #0]
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	701a      	strb	r2, [r3, #0]
}
 80002c8:	bf00      	nop
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr
 80002d4:	48001015 	.word	0x48001015

080002d8 <store_led>:

void store_led(uint8_t led_bitmask)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80002e2:	4b05      	ldr	r3, [pc, #20]	@ (80002f8 <store_led+0x20>)
 80002e4:	60fb      	str	r3, [r7, #12]

	*led_register = led_bitmask;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	79fa      	ldrb	r2, [r7, #7]
 80002ea:	701a      	strb	r2, [r3, #0]

}
 80002ec:	bf00      	nop
 80002ee:	3714      	adds	r7, #20
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	48001015 	.word	0x48001015

080002fc <modify_led>:

void modify_led()
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
	//variable for storing bitmask
	uint8_t led_bitmask;

	//get the current bitmask for led
	get_current_led(&led_bitmask);
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	4618      	mov	r0, r3
 8000306:	f7ff ffd7 	bl	80002b8 <get_current_led>

	//if the leds all on, resets everything
	if(led_bitmask == 0b11111111)
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	2bff      	cmp	r3, #255	@ 0xff
 800030e:	d102      	bne.n	8000316 <modify_led+0x1a>
	{
		led_bitmask = 0b00000000;
 8000310:	2300      	movs	r3, #0
 8000312:	71fb      	strb	r3, [r7, #7]
 8000314:	e007      	b.n	8000326 <modify_led+0x2a>
	}

	//otherwise turn one more on
	else
	{
		led_bitmask <<= 1;
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	005b      	lsls	r3, r3, #1
 800031a:	b2db      	uxtb	r3, r3
 800031c:	71fb      	strb	r3, [r7, #7]
		led_bitmask += 1;
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	3301      	adds	r3, #1
 8000322:	b2db      	uxtb	r3, r3
 8000324:	71fb      	strb	r3, [r7, #7]
	}

	//store led bitmask back
	store_led(led_bitmask);
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ffd5 	bl	80002d8 <store_led>
}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <enable_clocks>:
#include "initialisation.h"

//enable the clocks for GPIOA, C and E
void enable_clocks() {
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 800033c:	4b05      	ldr	r3, [pc, #20]	@ (8000354 <enable_clocks+0x1c>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	4a04      	ldr	r2, [pc, #16]	@ (8000354 <enable_clocks+0x1c>)
 8000342:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 8000346:	6153      	str	r3, [r2, #20]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40021000 	.word	0x40021000

08000358 <initialise_board>:

//initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 800035e:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <initialise_board+0x20>)
 8000360:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000368:	801a      	strh	r2, [r3, #0]
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	48001002 	.word	0x48001002

0800037c <EXTI0_IRQHandler>:
//function pointer to a function when a button is pressed, set to NULL so when it not assigned to any
//specific function it wont be called
void (*button_pressed)() = 0x00;

void EXTI0_IRQHandler()
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	//call function button_pressed if its not NULL pointer
	if (button_pressed != 0x00)
 8000380:	4b07      	ldr	r3, [pc, #28]	@ (80003a0 <EXTI0_IRQHandler+0x24>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d002      	beq.n	800038e <EXTI0_IRQHandler+0x12>
	{
		button_pressed();
 8000388:	4b05      	ldr	r3, [pc, #20]	@ (80003a0 <EXTI0_IRQHandler+0x24>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4798      	blx	r3
	}

	//reset interrupt
	EXTI->PR |= EXTI_PR_PR0;
 800038e:	4b05      	ldr	r3, [pc, #20]	@ (80003a4 <EXTI0_IRQHandler+0x28>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a04      	ldr	r2, [pc, #16]	@ (80003a4 <EXTI0_IRQHandler+0x28>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6153      	str	r3, [r2, #20]

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	2000001c 	.word	0x2000001c
 80003a4:	40010400 	.word	0x40010400

080003a8 <main>:

int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
    //settings for the boards
	enable_clocks();
 80003ac:	f7ff ffc4 	bl	8000338 <enable_clocks>

	initialise_board();
 80003b0:	f7ff ffd2 	bl	8000358 <initialise_board>

	button_pressed = &modify_led;
 80003b4:	4b03      	ldr	r3, [pc, #12]	@ (80003c4 <main+0x1c>)
 80003b6:	4a04      	ldr	r2, [pc, #16]	@ (80003c8 <main+0x20>)
 80003b8:	601a      	str	r2, [r3, #0]

	enable_interrupt_button();
 80003ba:	f7ff ff53 	bl	8000264 <enable_interrupt_button>

	/*loop forever*/
	for(;;);
 80003be:	bf00      	nop
 80003c0:	e7fd      	b.n	80003be <main+0x16>
 80003c2:	bf00      	nop
 80003c4:	2000001c 	.word	0x2000001c
 80003c8:	080002fd 	.word	0x080002fd

080003cc <Reset_Handler>:
 80003cc:	480d      	ldr	r0, [pc, #52]	@ (8000404 <LoopForever+0x2>)
 80003ce:	4685      	mov	sp, r0
 80003d0:	f3af 8000 	nop.w
 80003d4:	480c      	ldr	r0, [pc, #48]	@ (8000408 <LoopForever+0x6>)
 80003d6:	490d      	ldr	r1, [pc, #52]	@ (800040c <LoopForever+0xa>)
 80003d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000410 <LoopForever+0xe>)
 80003da:	2300      	movs	r3, #0
 80003dc:	e002      	b.n	80003e4 <LoopCopyDataInit>

080003de <CopyDataInit>:
 80003de:	58d4      	ldr	r4, [r2, r3]
 80003e0:	50c4      	str	r4, [r0, r3]
 80003e2:	3304      	adds	r3, #4

080003e4 <LoopCopyDataInit>:
 80003e4:	18c4      	adds	r4, r0, r3
 80003e6:	428c      	cmp	r4, r1
 80003e8:	d3f9      	bcc.n	80003de <CopyDataInit>
 80003ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000414 <LoopForever+0x12>)
 80003ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000418 <LoopForever+0x16>)
 80003ee:	2300      	movs	r3, #0
 80003f0:	e001      	b.n	80003f6 <LoopFillZerobss>

080003f2 <FillZerobss>:
 80003f2:	6013      	str	r3, [r2, #0]
 80003f4:	3204      	adds	r2, #4

080003f6 <LoopFillZerobss>:
 80003f6:	42a2      	cmp	r2, r4
 80003f8:	d3fb      	bcc.n	80003f2 <FillZerobss>
 80003fa:	f000 f811 	bl	8000420 <__libc_init_array>
 80003fe:	f7ff ffd3 	bl	80003a8 <main>

08000402 <LoopForever>:
 8000402:	e7fe      	b.n	8000402 <LoopForever>
 8000404:	2000a000 	.word	0x2000a000
 8000408:	20000000 	.word	0x20000000
 800040c:	20000000 	.word	0x20000000
 8000410:	08000488 	.word	0x08000488
 8000414:	20000000 	.word	0x20000000
 8000418:	20000020 	.word	0x20000020

0800041c <ADC1_2_IRQHandler>:
 800041c:	e7fe      	b.n	800041c <ADC1_2_IRQHandler>
	...

08000420 <__libc_init_array>:
 8000420:	b570      	push	{r4, r5, r6, lr}
 8000422:	4d0d      	ldr	r5, [pc, #52]	@ (8000458 <__libc_init_array+0x38>)
 8000424:	4c0d      	ldr	r4, [pc, #52]	@ (800045c <__libc_init_array+0x3c>)
 8000426:	1b64      	subs	r4, r4, r5
 8000428:	10a4      	asrs	r4, r4, #2
 800042a:	2600      	movs	r6, #0
 800042c:	42a6      	cmp	r6, r4
 800042e:	d109      	bne.n	8000444 <__libc_init_array+0x24>
 8000430:	4d0b      	ldr	r5, [pc, #44]	@ (8000460 <__libc_init_array+0x40>)
 8000432:	4c0c      	ldr	r4, [pc, #48]	@ (8000464 <__libc_init_array+0x44>)
 8000434:	f000 f818 	bl	8000468 <_init>
 8000438:	1b64      	subs	r4, r4, r5
 800043a:	10a4      	asrs	r4, r4, #2
 800043c:	2600      	movs	r6, #0
 800043e:	42a6      	cmp	r6, r4
 8000440:	d105      	bne.n	800044e <__libc_init_array+0x2e>
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f855 3b04 	ldr.w	r3, [r5], #4
 8000448:	4798      	blx	r3
 800044a:	3601      	adds	r6, #1
 800044c:	e7ee      	b.n	800042c <__libc_init_array+0xc>
 800044e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000452:	4798      	blx	r3
 8000454:	3601      	adds	r6, #1
 8000456:	e7f2      	b.n	800043e <__libc_init_array+0x1e>
 8000458:	08000480 	.word	0x08000480
 800045c:	08000480 	.word	0x08000480
 8000460:	08000480 	.word	0x08000480
 8000464:	08000484 	.word	0x08000484

08000468 <_init>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	bf00      	nop
 800046c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046e:	bc08      	pop	{r3}
 8000470:	469e      	mov	lr, r3
 8000472:	4770      	bx	lr

08000474 <_fini>:
 8000474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000476:	bf00      	nop
 8000478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047a:	bc08      	pop	{r3}
 800047c:	469e      	mov	lr, r3
 800047e:	4770      	bx	lr
