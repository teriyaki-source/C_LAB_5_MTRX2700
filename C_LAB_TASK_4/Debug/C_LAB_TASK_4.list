
C_LAB_TASK_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08001fac  08001fac  00011fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002214  08002214  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002214  08002214  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002214  08002214  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002214  08002214  00012214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002218  08002218  00012218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800221c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000002e0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000370  20000370  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00002bc7  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000c97  00000000  00000000  00022cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000002e0  00000000  00000000  00023968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000001ff  00000000  00000000  00023c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001743a  00000000  00000000  00023e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00003a27  00000000  00000000  0003b281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00078906  00000000  00000000  0003eca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000013d8  00000000  00000000  000b75b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  000b8988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001f94 	.word	0x08001f94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08001f94 	.word	0x08001f94

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db0b      	blt.n	80002ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	f003 021f 	and.w	r2, r3, #31
 80002b8:	4907      	ldr	r1, [pc, #28]	; (80002d8 <__NVIC_EnableIRQ+0x38>)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	095b      	lsrs	r3, r3, #5
 80002c0:	2001      	movs	r0, #1
 80002c2:	fa00 f202 	lsl.w	r2, r0, r2
 80002c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e100 	.word	0xe000e100

080002dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	6039      	str	r1, [r7, #0]
 80002e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	db0a      	blt.n	8000306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	490c      	ldr	r1, [pc, #48]	; (8000328 <__NVIC_SetPriority+0x4c>)
 80002f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fa:	0112      	lsls	r2, r2, #4
 80002fc:	b2d2      	uxtb	r2, r2
 80002fe:	440b      	add	r3, r1
 8000300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000304:	e00a      	b.n	800031c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	b2da      	uxtb	r2, r3
 800030a:	4908      	ldr	r1, [pc, #32]	; (800032c <__NVIC_SetPriority+0x50>)
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	3b04      	subs	r3, #4
 8000314:	0112      	lsls	r2, r2, #4
 8000316:	b2d2      	uxtb	r2, r2
 8000318:	440b      	add	r3, r1
 800031a:	761a      	strb	r2, [r3, #24]
}
 800031c:	bf00      	nop
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	e000e100 	.word	0xe000e100
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <enable_clocks>:
void (*tim2_ccr1_callback)() = 0x00;
void (*button_press_callback)(uint16_t delay_ms, void (*one_shot_callback)) = 0x00;

// Enable the clocks for desired peripherals
void enable_clocks()
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	// Enable the clocks for GPIOA, C, and E
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000334:	4b08      	ldr	r3, [pc, #32]	; (8000358 <enable_clocks+0x28>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	4a07      	ldr	r2, [pc, #28]	; (8000358 <enable_clocks+0x28>)
 800033a:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 800033e:	6153      	str	r3, [r2, #20]
	// Enable the clocks for timer 2 and timer 3
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM3EN;
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <enable_clocks+0x28>)
 8000342:	69db      	ldr	r3, [r3, #28]
 8000344:	4a04      	ldr	r2, [pc, #16]	; (8000358 <enable_clocks+0x28>)
 8000346:	f043 0303 	orr.w	r3, r3, #3
 800034a:	61d3      	str	r3, [r2, #28]
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000

0800035c <initialise_board>:


// Initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board()
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
	// Get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_mode_register = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000362:	4b06      	ldr	r3, [pc, #24]	; (800037c <initialise_board+0x20>)
 8000364:	607b      	str	r3, [r7, #4]
	*led_mode_register = 0x5555;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f245 5255 	movw	r2, #21845	; 0x5555
 800036c:	801a      	strh	r2, [r3, #0]
}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	48001002 	.word	0x48001002

08000380 <config_tim2_interrupts>:


void config_tim2_interrupts()
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000384:	b672      	cpsid	i
}
 8000386:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	__disable_irq();

	// Make timer 2 trigger an interrupt when there is
	// a successful output compare (on channel 1)
	TIM2->DIER |= TIM_DIER_CC1IE;
 8000388:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800038c:	68db      	ldr	r3, [r3, #12]
 800038e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000392:	f043 0302 	orr.w	r3, r3, #2
 8000396:	60d3      	str	r3, [r2, #12]
	// Setting this bit in the DMA and interrupt enable register (DIER)of TIM2
	// This configures the timer to generate an interrupt when the timers counter (CNT)
	// When CNT matchest the same value as CCR1

	// Tell the NVIC module that timer 2 interrupts should be handled
	NVIC_SetPriority(TIM2_IRQn, 2);  // set priority
 8000398:	2102      	movs	r1, #2
 800039a:	201c      	movs	r0, #28
 800039c:	f7ff ff9e 	bl	80002dc <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 80003a0:	201c      	movs	r0, #28
 80003a2:	f7ff ff7d 	bl	80002a0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80003a6:	b662      	cpsie	i
}
 80003a8:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <config_tim3_interrupts>:


// Enable interrupts for overflow and capture/compare 1 in timer 3
void config_tim3_interrupts()
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80003b4:	b672      	cpsid	i
}
 80003b6:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	__disable_irq();
	// Activate the update interrupt (UIE) for Tim3
	// Make the timer 3 trigger an interrupt when there is an overflow
	TIM3->DIER |= TIM_DIER_UIE;
 80003b8:	4b08      	ldr	r3, [pc, #32]	; (80003dc <config_tim3_interrupts+0x2c>)
 80003ba:	68db      	ldr	r3, [r3, #12]
 80003bc:	4a07      	ldr	r2, [pc, #28]	; (80003dc <config_tim3_interrupts+0x2c>)
 80003be:	f043 0301 	orr.w	r3, r3, #1
 80003c2:	60d3      	str	r3, [r2, #12]
	// Inherently periodic since it occurs every time
	// That the timer completes counting up to the reload value

	// Tell the NVIC module that timer 3 interrupts should be handled
	NVIC_SetPriority(TIM3_IRQn, 3);  // set priority
 80003c4:	2103      	movs	r1, #3
 80003c6:	201d      	movs	r0, #29
 80003c8:	f7ff ff88 	bl	80002dc <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn);
 80003cc:	201d      	movs	r0, #29
 80003ce:	f7ff ff67 	bl	80002a0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80003d2:	b662      	cpsie	i
}
 80003d4:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40000400 	.word	0x40000400

080003e0 <set_prescaler>:
}


// Function to set the prescaler value for a specified timer
void set_prescaler(TIM_TypeDef *TIM, uint16_t prescaler)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	460b      	mov	r3, r1
 80003ea:	807b      	strh	r3, [r7, #2]
    // Set the prescaler value for the timer, defining how the timer's clock is divided
    TIM->PSC = prescaler;
 80003ec:	887a      	ldrh	r2, [r7, #2]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	629a      	str	r2, [r3, #40]	; 0x28

    // Trigger an update event to apply the new prescaler immediately and reset the timer counter
    TIM->EGR |= TIM_EGR_UG;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	f043 0201 	orr.w	r2, r3, #1
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	615a      	str	r2, [r3, #20]
}
 80003fe:	bf00      	nop
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
	...

0800040c <setup_one_shot_timer>:
}


// Setup a one-shot timer, trigger LED toggle, and plan return to chase
// Function to set up a one-shot timer event with a delay and a callback function
void setup_one_shot_timer(uint16_t delay_ms, void (*one_shot_callback)()) {
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	6039      	str	r1, [r7, #0]
 8000416:	80fb      	strh	r3, [r7, #6]
    // Set TIM2's compare register (CCR1) to the current count plus delay, wrapped by max count
    TIM2->CCR1 = (TIM2->CNT + delay_ms) % TIM2_MAX_COUNT;
 8000418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800041c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800041e:	88fb      	ldrh	r3, [r7, #6]
 8000420:	441a      	add	r2, r3
 8000422:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000426:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800042a:	bf2c      	ite	cs
 800042c:	2301      	movcs	r3, #1
 800042e:	2300      	movcc	r3, #0
 8000430:	425b      	negs	r3, r3
 8000432:	1ad3      	subs	r3, r2, r3
 8000434:	634b      	str	r3, [r1, #52]	; 0x34

    // Assign the callback to be triggered when TIM2's count matches CCR1
    tim2_ccr1_callback = one_shot_callback;
 8000436:	4a04      	ldr	r2, [pc, #16]	; (8000448 <setup_one_shot_timer+0x3c>)
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	6013      	str	r3, [r2, #0]
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	200000b0 	.word	0x200000b0

0800044c <configure_timer>:
}

static uint32_t timer_period = INTERVAL_MS;  // Initial default period

// Function to configure or reset Timer 3 hardware with a new period
static void configure_timer() {
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
    // Disable Timer 3 while updating settings to avoid glitches
    TIM3->CR1 &= ~TIM_CR1_CEN;
 8000450:	4b0e      	ldr	r3, [pc, #56]	; (800048c <configure_timer+0x40>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a0d      	ldr	r2, [pc, #52]	; (800048c <configure_timer+0x40>)
 8000456:	f023 0301 	bic.w	r3, r3, #1
 800045a:	6013      	str	r3, [r2, #0]

    // Set the prescaler if necessary
    TIM3->PSC = PRESCALER - 1;  // Prescaler setup, adjust as necessary
 800045c:	4b0b      	ldr	r3, [pc, #44]	; (800048c <configure_timer+0x40>)
 800045e:	f641 723e 	movw	r2, #7998	; 0x1f3e
 8000462:	629a      	str	r2, [r3, #40]	; 0x28

    // Set the auto-reload value to the current timer period
    TIM3->ARR = timer_period - 1;  // ARR value is period-1
 8000464:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <configure_timer+0x44>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a08      	ldr	r2, [pc, #32]	; (800048c <configure_timer+0x40>)
 800046a:	3b01      	subs	r3, #1
 800046c:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Generate an update event to load the prescaler and the ARR value immediately
    TIM3->EGR = TIM_EGR_UG;
 800046e:	4b07      	ldr	r3, [pc, #28]	; (800048c <configure_timer+0x40>)
 8000470:	2201      	movs	r2, #1
 8000472:	615a      	str	r2, [r3, #20]

    // Re-enable Timer 3
    TIM3->CR1 |= TIM_CR1_CEN;
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <configure_timer+0x40>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a04      	ldr	r2, [pc, #16]	; (800048c <configure_timer+0x40>)
 800047a:	f043 0301 	orr.w	r3, r3, #1
 800047e:	6013      	str	r3, [r2, #0]
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40000400 	.word	0x40000400
 8000490:	20000000 	.word	0x20000000

08000494 <set_timer_period>:

void set_timer_period(uint32_t new_period) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
    timer_period = new_period;  // Update the static variable holding the period
 800049c:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <set_timer_period+0x1c>)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	6013      	str	r3, [r2, #0]
    configure_timer();  // Apply the new configuration
 80004a2:	f7ff ffd3 	bl	800044c <configure_timer>
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000000 	.word	0x20000000

080004b4 <timer_start_up>:


void timer_start_up(){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	set_prescaler(TIM2, PRESCALER);  // 1 count = 1 millisecond
 80004b8:	f641 713f 	movw	r1, #7999	; 0x1f3f
 80004bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80004c0:	f7ff ff8e 	bl	80003e0 <set_prescaler>
	set_prescaler(TIM3, PRESCALER);  // 1 count = 1 millisecond
 80004c4:	f641 713f 	movw	r1, #7999	; 0x1f3f
 80004c8:	4804      	ldr	r0, [pc, #16]	; (80004dc <timer_start_up+0x28>)
 80004ca:	f7ff ff89 	bl	80003e0 <set_prescaler>

	config_tim2_interrupts();  // timer 2 is used for the one-shot delay
 80004ce:	f7ff ff57 	bl	8000380 <config_tim2_interrupts>
	config_tim3_interrupts();  // timer 3 is used for the periodic callback
 80004d2:	f7ff ff6d 	bl	80003b0 <config_tim3_interrupts>
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40000400 	.word	0x40000400

080004e0 <str_to_time>:

uint16_t str_to_time(uint8_t* original){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]

	uint16_t *toks = strtok(original, "\r");
 80004e8:	4905      	ldr	r1, [pc, #20]	; (8000500 <str_to_time+0x20>)
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f000 fe0e 	bl	800110c <strtok>
 80004f0:	60f8      	str	r0, [r7, #12]

	return(*toks);
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	881b      	ldrh	r3, [r3, #0]
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	08001fac 	.word	0x08001fac

08000504 <oneshot_command>:

void oneshot_command(uint8_t *oneshot_length){
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	//uint16_t delay_ms, void (*one_shot_callback
	uint16_t delay_ms = str_to_time(oneshot_length);
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f7ff ffe7 	bl	80004e0 <str_to_time>
 8000512:	4603      	mov	r3, r0
 8000514:	81fb      	strh	r3, [r7, #14]
	// Start the timer 2 counter
	TIM2->CR1 |= TIM_CR1_CEN;
 8000516:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6013      	str	r3, [r2, #0]

	setup_one_shot_timer(delay_ms, set_oneshot_flag);
 8000526:	89fb      	ldrh	r3, [r7, #14]
 8000528:	4903      	ldr	r1, [pc, #12]	; (8000538 <oneshot_command+0x34>)
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff ff6e 	bl	800040c <setup_one_shot_timer>
}
 8000530:	bf00      	nop
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	0800060d 	.word	0x0800060d

0800053c <timer_command>:

void timer_command(uint8_t *timer_period){
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	// Change the timer period based on a condition or a new requirement
	uint16_t new_period = str_to_time(timer_period);
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f7ff ffcb 	bl	80004e0 <str_to_time>
 800054a:	4603      	mov	r3, r0
 800054c:	81fb      	strh	r3, [r7, #14]

	set_timer_period(new_period);
 800054e:	89fb      	ldrh	r3, [r7, #14]
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff ff9f 	bl	8000494 <set_timer_period>

	// Set the function pointers used in the interrupt handlers
	// to their corresponding callback functions
	tim3_overflow_callback = set_continuous_flag;
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <timer_command+0x34>)
 8000558:	4a06      	ldr	r2, [pc, #24]	; (8000574 <timer_command+0x38>)
 800055a:	601a      	str	r2, [r3, #0]

	// Start the timer 3 counter
	TIM3->CR1 |= TIM_CR1_CEN;
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <timer_command+0x3c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a05      	ldr	r2, [pc, #20]	; (8000578 <timer_command+0x3c>)
 8000562:	f043 0301 	orr.w	r3, r3, #1
 8000566:	6013      	str	r3, [r2, #0]
}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200000ac 	.word	0x200000ac
 8000574:	08000625 	.word	0x08000625
 8000578:	40000400 	.word	0x40000400

0800057c <message_handler>:
	0,
	0,
};


void message_handler(uint8_t* instruction, uint8_t *action){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
	// still operating in interrupt
	if (!strcmp(instruction, "led")) {
 8000586:	491c      	ldr	r1, [pc, #112]	; (80005f8 <message_handler+0x7c>)
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f7ff fe29 	bl	80001e0 <strcmp>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d105      	bne.n	80005a0 <message_handler+0x24>
		flags.led_flag = 1;
 8000594:	4b19      	ldr	r3, [pc, #100]	; (80005fc <message_handler+0x80>)
 8000596:	2201      	movs	r2, #1
 8000598:	601a      	str	r2, [r3, #0]
		flags.led_action = action;
 800059a:	4a18      	ldr	r2, [pc, #96]	; (80005fc <message_handler+0x80>)
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	6053      	str	r3, [r2, #4]
	}
	if (!strcmp(instruction, "serial")) {
 80005a0:	4917      	ldr	r1, [pc, #92]	; (8000600 <message_handler+0x84>)
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f7ff fe1c 	bl	80001e0 <strcmp>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d105      	bne.n	80005ba <message_handler+0x3e>
		flags.serial_flag = 1;
 80005ae:	4b13      	ldr	r3, [pc, #76]	; (80005fc <message_handler+0x80>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	609a      	str	r2, [r3, #8]
		flags.serial_action = action;
 80005b4:	4a11      	ldr	r2, [pc, #68]	; (80005fc <message_handler+0x80>)
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	60d3      	str	r3, [r2, #12]
	}
	if (!strcmp(instruction, "oneshot")) {
 80005ba:	4912      	ldr	r1, [pc, #72]	; (8000604 <message_handler+0x88>)
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f7ff fe0f 	bl	80001e0 <strcmp>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d105      	bne.n	80005d4 <message_handler+0x58>
		flags.oneshot_flag = 1;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <message_handler+0x80>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	611a      	str	r2, [r3, #16]
		flags.oneshot_action = action;
 80005ce:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <message_handler+0x80>)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	6153      	str	r3, [r2, #20]
	}
	if (!strcmp(instruction, "timer")) {
 80005d4:	490c      	ldr	r1, [pc, #48]	; (8000608 <message_handler+0x8c>)
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f7ff fe02 	bl	80001e0 <strcmp>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d105      	bne.n	80005ee <message_handler+0x72>
		flags.timer_flag = 1;
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <message_handler+0x80>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	619a      	str	r2, [r3, #24]
		flags.timer_action = action;
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <message_handler+0x80>)
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	61d3      	str	r3, [r2, #28]
	}
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	08001fb0 	.word	0x08001fb0
 80005fc:	200000b4 	.word	0x200000b4
 8000600:	08001fb4 	.word	0x08001fb4
 8000604:	08001fbc 	.word	0x08001fbc
 8000608:	08001fc4 	.word	0x08001fc4

0800060c <set_oneshot_flag>:

void set_oneshot_flag(){
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
	timer_flags.oneshot_flag = 1;
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <set_oneshot_flag+0x14>)
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	200000d4 	.word	0x200000d4

08000624 <set_continuous_flag>:

void set_continuous_flag(){
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
	timer_flags.continuous_flag = 1;
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <set_continuous_flag+0x14>)
 800062a:	2201      	movs	r2, #1
 800062c:	705a      	strb	r2, [r3, #1]
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	200000d4 	.word	0x200000d4

0800063c <timer_handler>:

void timer_handler(){
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	uint8_t *oneshot_message = "Oneshot finished\r\n";
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <timer_handler+0x44>)
 8000644:	607b      	str	r3, [r7, #4]
	uint8_t *continuous_message = "Timer period finished\r\n";
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <timer_handler+0x48>)
 8000648:	603b      	str	r3, [r7, #0]

	if(timer_flags.oneshot_flag)
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <timer_handler+0x4c>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d003      	beq.n	800065a <timer_handler+0x1e>
		SerialOutputString(oneshot_message, &USART1_PORT);
 8000652:	490e      	ldr	r1, [pc, #56]	; (800068c <timer_handler+0x50>)
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f000 fa9a 	bl	8000b8e <SerialOutputString>
		timer_flags.oneshot_flag = 0;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <timer_handler+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	if(timer_flags.continuous_flag)
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <timer_handler+0x4c>)
 8000662:	785b      	ldrb	r3, [r3, #1]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d003      	beq.n	8000670 <timer_handler+0x34>
		SerialOutputString(continuous_message, &USART1_PORT);
 8000668:	4908      	ldr	r1, [pc, #32]	; (800068c <timer_handler+0x50>)
 800066a:	6838      	ldr	r0, [r7, #0]
 800066c:	f000 fa8f 	bl	8000b8e <SerialOutputString>
		timer_flags.continuous_flag = 0;
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <timer_handler+0x4c>)
 8000672:	2200      	movs	r2, #0
 8000674:	705a      	strb	r2, [r3, #1]
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	08001fcc 	.word	0x08001fcc
 8000684:	08001fe0 	.word	0x08001fe0
 8000688:	200000d4 	.word	0x200000d4
 800068c:	2000000c 	.word	0x2000000c

08000690 <flag_handler>:

void flag_handler(){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	// not operating in interrupt
	// action based on flag, needs to reset flag after action complete
	timer_handler();
 8000694:	f7ff ffd2 	bl	800063c <timer_handler>
	if (flags.led_flag){
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <flag_handler+0x70>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d007      	beq.n	80006b0 <flag_handler+0x20>
		// set LED bits
//		SerialOutputString(flags.led_action, &USART1_PORT);
		modify_led(flags.led_action);
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <flag_handler+0x70>)
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 f8ab 	bl	8000800 <modify_led>
		flags.led_flag = 0;
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <flag_handler+0x70>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
	}
	if (flags.serial_flag){
 80006b0:	4b13      	ldr	r3, [pc, #76]	; (8000700 <flag_handler+0x70>)
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d008      	beq.n	80006ca <flag_handler+0x3a>
		// send output message
		SerialOutputString(flags.serial_action, &USART1_PORT);
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <flag_handler+0x70>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	4911      	ldr	r1, [pc, #68]	; (8000704 <flag_handler+0x74>)
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fa65 	bl	8000b8e <SerialOutputString>
		flags.serial_flag = 0;
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <flag_handler+0x70>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
	}
	if (flags.oneshot_flag){
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <flag_handler+0x70>)
 80006cc:	691b      	ldr	r3, [r3, #16]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d007      	beq.n	80006e2 <flag_handler+0x52>
		// start a oneshot timer with set period
		//SerialOutputString(flags.oneshot_action, &USART1_PORT);
		oneshot_command(flags.oneshot_action);
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <flag_handler+0x70>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff14 	bl	8000504 <oneshot_command>
		flags.oneshot_flag = 0;
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <flag_handler+0x70>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
	}
	if (flags.timer_flag){
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <flag_handler+0x70>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <flag_handler+0x6a>
		// start a repeated timer with set period
		//SerialOutputString(flags.timer_action, &USART1_PORT);
		timer_command(flags.timer_action);
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <flag_handler+0x70>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff24 	bl	800053c <timer_command>
		flags.timer_flag = 0;
 80006f4:	4b02      	ldr	r3, [pc, #8]	; (8000700 <flag_handler+0x70>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
	}
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200000b4 	.word	0x200000b4
 8000704:	2000000c 	.word	0x2000000c

08000708 <TIM2_IRQHandler>:
uint8_t *ONESHOT_MESSAGE = "Oneshot timer finished\r\n";
uint8_t *TIMER_MESSAGE = "Timer period finished\r\n";

// Handle interrupts for timer 2 (one-shot callback)
void TIM2_IRQHandler()
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
    // Check if the interrupt was due to the channel 1 compare flag
    if ((TIM2->SR & TIM_SR_CC1IF) != 0)
 800070c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000710:	691b      	ldr	r3, [r3, #16]
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	2b00      	cmp	r3, #0
 8000718:	d012      	beq.n	8000740 <TIM2_IRQHandler+0x38>
    {
    	//check if a callback function is registered
        if (tim2_ccr1_callback != 0x00)
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <TIM2_IRQHandler+0x3c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d006      	beq.n	8000730 <TIM2_IRQHandler+0x28>
        {
            tim2_ccr1_callback(ONESHOT_MESSAGE, &USART1_PORT);  // Execute the registered callback function
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <TIM2_IRQHandler+0x3c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a08      	ldr	r2, [pc, #32]	; (8000748 <TIM2_IRQHandler+0x40>)
 8000728:	6812      	ldr	r2, [r2, #0]
 800072a:	4908      	ldr	r1, [pc, #32]	; (800074c <TIM2_IRQHandler+0x44>)
 800072c:	4610      	mov	r0, r2
 800072e:	4798      	blx	r3
        }

        // Clear the channel 1 compare flag to prCzxevent re-entering
        TIM2->SR &= ~TIM_SR_CC1IF;
 8000730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000734:	691b      	ldr	r3, [r3, #16]
 8000736:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800073a:	f023 0302 	bic.w	r3, r3, #2
 800073e:	6113      	str	r3, [r2, #16]
    }
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000b0 	.word	0x200000b0
 8000748:	20000004 	.word	0x20000004
 800074c:	2000000c 	.word	0x2000000c

08000750 <TIM3_IRQHandler>:



// Handle interrupts for timer 3 (periodic callback)
void TIM3_IRQHandler()
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	// Branch based on the flag
	// The status register tells us why the interrupt was called
	// UIF is from an overflow type event
	if ((TIM3->SR & TIM_SR_UIF) != 0) //check if the interrupt was triggered by an overflow event
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <TIM3_IRQHandler+0x38>)
 8000756:	691b      	ldr	r3, [r3, #16]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	2b00      	cmp	r3, #0
 800075e:	d010      	beq.n	8000782 <TIM3_IRQHandler+0x32>
	{
		//check if the callback function is registered for overflow events
		if (tim3_overflow_callback != 0x00)
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <TIM3_IRQHandler+0x3c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d006      	beq.n	8000776 <TIM3_IRQHandler+0x26>
		{
			// Trigger callback function
			tim3_overflow_callback(TIMER_MESSAGE, &USART1_PORT); //trigger the overflow callback fucntion
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <TIM3_IRQHandler+0x3c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a08      	ldr	r2, [pc, #32]	; (8000790 <TIM3_IRQHandler+0x40>)
 800076e:	6812      	ldr	r2, [r2, #0]
 8000770:	4908      	ldr	r1, [pc, #32]	; (8000794 <TIM3_IRQHandler+0x44>)
 8000772:	4610      	mov	r0, r2
 8000774:	4798      	blx	r3
		}

		// Reset overflow flag to allow new overflow events to be detected rather than re-entering
		TIM3->SR &= ~TIM_SR_UIF;
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <TIM3_IRQHandler+0x38>)
 8000778:	691b      	ldr	r3, [r3, #16]
 800077a:	4a03      	ldr	r2, [pc, #12]	; (8000788 <TIM3_IRQHandler+0x38>)
 800077c:	f023 0301 	bic.w	r3, r3, #1
 8000780:	6113      	str	r3, [r2, #16]
	}
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40000400 	.word	0x40000400
 800078c:	200000ac 	.word	0x200000ac
 8000790:	20000008 	.word	0x20000008
 8000794:	2000000c 	.word	0x2000000c

08000798 <get_current_led>:
#include "led.h"
#include "serial.h"
#include <stdlib.h>

void get_current_led(uint8_t *bitmask)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	*bitmask = *(((uint8_t*)&(GPIOE->ODR)) + 1);
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <get_current_led+0x1c>)
 80007a2:	781a      	ldrb	r2, [r3, #0]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	701a      	strb	r2, [r3, #0]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	48001015 	.word	0x48001015

080007b8 <store_led>:

void store_led(uint8_t bitmask)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <store_led+0x20>)
 80007c4:	60fb      	str	r3, [r7, #12]

	*led_register = bitmask;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	79fa      	ldrb	r2, [r7, #7]
 80007ca:	701a      	strb	r2, [r3, #0]
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	48001015 	.word	0x48001015

080007dc <str_to_bin>:

uint8_t str_to_bin(uint8_t* original){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	char* ptr;

	uint8_t target = strtol(original, &ptr, 2);
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2202      	movs	r2, #2
 80007ea:	4619      	mov	r1, r3
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f000 fc51 	bl	8001094 <strtol>
 80007f2:	4603      	mov	r3, r0
 80007f4:	73fb      	strb	r3, [r7, #15]
	return(target);
 80007f6:	7bfb      	ldrb	r3, [r7, #15]

}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <modify_led>:

void modify_led(uint8_t *input)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	//variable for storing bitmask
	uint8_t temp[MASK_LENGTH] = {0};
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	2300      	movs	r3, #0
 800080e:	613b      	str	r3, [r7, #16]
	uint8_t new_mask = 0b00000000;
 8000810:	2300      	movs	r3, #0
 8000812:	75fb      	strb	r3, [r7, #23]
	uint8_t bitmask;

	// remove trailing /r/n previously added for printability
	strncpy(temp, input, MASK_LENGTH);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2208      	movs	r2, #8
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fc61 	bl	80010e4 <strncpy>

	// convert uint8_t array of chars into singular char
	new_mask = str_to_bin(temp);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ffd8 	bl	80007dc <str_to_bin>
 800082c:	4603      	mov	r3, r0
 800082e:	75fb      	strb	r3, [r7, #23]

	//get the current bitmask for led
	get_current_led(&bitmask);
 8000830:	f107 030b 	add.w	r3, r7, #11
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ffaf 	bl	8000798 <get_current_led>

	//if the leds all on, resets everything
	bitmask = new_mask;
 800083a:	7dfb      	ldrb	r3, [r7, #23]
 800083c:	72fb      	strb	r3, [r7, #11]

	//store led bitmask back
	store_led(bitmask);
 800083e:	7afb      	ldrb	r3, [r7, #11]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ffb9 	bl	80007b8 <store_led>

}
 8000846:	bf00      	nop
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	enable_clocks();
 8000854:	f7ff fd6c 	bl	8000330 <enable_clocks>
	initialise_board();
 8000858:	f7ff fd80 	bl	800035c <initialise_board>

	SerialInitialise(BAUD_115200, &USART1_PORT, &USART_callback);
 800085c:	4a06      	ldr	r2, [pc, #24]	; (8000878 <main+0x28>)
 800085e:	4907      	ldr	r1, [pc, #28]	; (800087c <main+0x2c>)
 8000860:	2004      	movs	r0, #4
 8000862:	f000 f855 	bl	8000910 <SerialInitialise>
	enable_uart_interrupt(&USART1_PORT);
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <main+0x2c>)
 8000868:	f000 f940 	bl	8000aec <enable_uart_interrupt>
	timer_start_up();
 800086c:	f7ff fe22 	bl	80004b4 <timer_start_up>

	/* Loop forever */
	for(;;) {
		flag_handler();
 8000870:	f7ff ff0e 	bl	8000690 <flag_handler>
 8000874:	e7fc      	b.n	8000870 <main+0x20>
 8000876:	bf00      	nop
 8000878:	08000bc9 	.word	0x08000bc9
 800087c:	2000000c 	.word	0x2000000c

08000880 <__NVIC_EnableIRQ>:
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	2b00      	cmp	r3, #0
 8000890:	db0b      	blt.n	80008aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	f003 021f 	and.w	r2, r3, #31
 8000898:	4907      	ldr	r1, [pc, #28]	; (80008b8 <__NVIC_EnableIRQ+0x38>)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	095b      	lsrs	r3, r3, #5
 80008a0:	2001      	movs	r0, #1
 80008a2:	fa00 f202 	lsl.w	r2, r0, r2
 80008a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000e100 	.word	0xe000e100

080008bc <__NVIC_SetPriority>:
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	db0a      	blt.n	80008e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	490c      	ldr	r1, [pc, #48]	; (8000908 <__NVIC_SetPriority+0x4c>)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	0112      	lsls	r2, r2, #4
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	440b      	add	r3, r1
 80008e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80008e4:	e00a      	b.n	80008fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4908      	ldr	r1, [pc, #32]	; (800090c <__NVIC_SetPriority+0x50>)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	3b04      	subs	r3, #4
 80008f4:	0112      	lsls	r2, r2, #4
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	440b      	add	r3, r1
 80008fa:	761a      	strb	r2, [r3, #24]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000e100 	.word	0xe000e100
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <SerialInitialise>:
		0x00 // default function pointer is NULL
		};

// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint8_t*, uint8_t)) {
 8000910:	b480      	push	{r7}
 8000912:	b087      	sub	sp, #28
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	625a      	str	r2, [r3, #36]	; 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000922:	4b39      	ldr	r3, [pc, #228]	; (8000a08 <SerialInitialise+0xf8>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	4a38      	ldr	r2, [pc, #224]	; (8000a08 <SerialInitialise+0xf8>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800092e:	4b36      	ldr	r3, [pc, #216]	; (8000a08 <SerialInitialise+0xf8>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	4a35      	ldr	r2, [pc, #212]	; (8000a08 <SerialInitialise+0xf8>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	691a      	ldr	r2, [r3, #16]
 800093e:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <SerialInitialise+0xf8>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	4931      	ldr	r1, [pc, #196]	; (8000a08 <SerialInitialise+0xf8>)
 8000944:	4313      	orrs	r3, r2
 8000946:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	68ba      	ldr	r2, [r7, #8]
 800094e:	6952      	ldr	r2, [r2, #20]
 8000950:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	6992      	ldr	r2, [r2, #24]
 800095a:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	69d9      	ldr	r1, [r3, #28]
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	6a1a      	ldr	r2, [r3, #32]
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	430a      	orrs	r2, r1
 800096c:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	6a19      	ldr	r1, [r3, #32]
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	430a      	orrs	r2, r1
 800097e:	625a      	str	r2, [r3, #36]	; 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	68da      	ldr	r2, [r3, #12]
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <SerialInitialise+0xf8>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	491f      	ldr	r1, [pc, #124]	; (8000a08 <SerialInitialise+0xf8>)
 800098a:	4313      	orrs	r3, r2
 800098c:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	689a      	ldr	r2, [r3, #8]
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <SerialInitialise+0xf8>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	491c      	ldr	r1, [pc, #112]	; (8000a08 <SerialInitialise+0xf8>)
 8000998:	4313      	orrs	r3, r2
 800099a:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	330c      	adds	r3, #12
 80009a2:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	d820      	bhi.n	80009ec <SerialInitialise+0xdc>
 80009aa:	a201      	add	r2, pc, #4	; (adr r2, 80009b0 <SerialInitialise+0xa0>)
 80009ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b0:	080009c5 	.word	0x080009c5
 80009b4:	080009cd 	.word	0x080009cd
 80009b8:	080009d5 	.word	0x080009d5
 80009bc:	080009dd 	.word	0x080009dd
 80009c0:	080009e5 	.word	0x080009e5
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	2246      	movs	r2, #70	; 0x46
 80009c8:	801a      	strh	r2, [r3, #0]
		break;
 80009ca:	e00f      	b.n	80009ec <SerialInitialise+0xdc>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	2246      	movs	r2, #70	; 0x46
 80009d0:	801a      	strh	r2, [r3, #0]
		break;
 80009d2:	e00b      	b.n	80009ec <SerialInitialise+0xdc>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	2246      	movs	r2, #70	; 0x46
 80009d8:	801a      	strh	r2, [r3, #0]
		break;
 80009da:	e007      	b.n	80009ec <SerialInitialise+0xdc>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	2246      	movs	r2, #70	; 0x46
 80009e0:	801a      	strh	r2, [r3, #0]
		break;
 80009e2:	e003      	b.n	80009ec <SerialInitialise+0xdc>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	2246      	movs	r2, #70	; 0x46
 80009e8:	801a      	strh	r2, [r3, #0]
		break;
 80009ea:	bf00      	nop
	}

	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f042 020d 	orr.w	r2, r2, #13
 80009fa:	601a      	str	r2, [r3, #0]
}
 80009fc:	bf00      	nop
 80009fe:	371c      	adds	r7, #28
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	40021000 	.word	0x40021000

08000a0c <getChar>:
uint8_t *action;
int i = 0;

void (*on_key_input)() = 0x00;

void getChar(SerialPort *serial_port, uint8_t* buffer, uint8_t* last_word, int* i) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
 8000a18:	603b      	str	r3, [r7, #0]
	// gets the current count in the word
	uint8_t x = *i;
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	74fb      	strb	r3, [r7, #19]
	// checks the flags of the input port - clears them if raised
	if ((serial_port->UART->ISR & USART_ISR_ORE) != 0 || (serial_port->UART->ISR & USART_ISR_FE) != 0){
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d106      	bne.n	8000a3c <getChar+0x30>
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	69db      	ldr	r3, [r3, #28]
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00f      	beq.n	8000a5c <getChar+0x50>
		serial_port->UART->ICR |= USART_ICR_ORECF;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	6a1a      	ldr	r2, [r3, #32]
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f042 0208 	orr.w	r2, r2, #8
 8000a4a:	621a      	str	r2, [r3, #32]
		serial_port->UART->ICR |= USART_ICR_FECF;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	6a1a      	ldr	r2, [r3, #32]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f042 0202 	orr.w	r2, r2, #2
 8000a5a:	621a      	str	r2, [r3, #32]
	}
	// if the receive not empty flag is not 0 i.e. there is a character ready to be received
	if ((serial_port->UART->ISR & USART_ISR_RXNE) != 0){
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f003 0320 	and.w	r3, r3, #32
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d039      	beq.n	8000ade <getChar+0xd2>
		// get the value from the Read Data Register (RDR)
		buffer[x] = serial_port->UART->RDR;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a70:	b299      	uxth	r1, r3
 8000a72:	7cfb      	ldrb	r3, [r7, #19]
 8000a74:	68ba      	ldr	r2, [r7, #8]
 8000a76:	4413      	add	r3, r2
 8000a78:	b2ca      	uxtb	r2, r1
 8000a7a:	701a      	strb	r2, [r3, #0]
		// increment the counter for the position in the word
		*i += 1;
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	1c5a      	adds	r2, r3, #1
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	601a      	str	r2, [r3, #0]
		if (buffer[x] == TERMINATION_CHAR) {
 8000a86:	7cfb      	ldrb	r3, [r7, #19]
 8000a88:	68ba      	ldr	r2, [r7, #8]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b0d      	cmp	r3, #13
 8000a90:	d125      	bne.n	8000ade <getChar+0xd2>
			// add a newline to the buffer for better output aesthetic
			buffer[x+1] = NEWLINE_CHAR;
 8000a92:	7cfb      	ldrb	r3, [r7, #19]
 8000a94:	3301      	adds	r3, #1
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	4413      	add	r3, r2
 8000a9a:	220a      	movs	r2, #10
 8000a9c:	701a      	strb	r2, [r3, #0]
			// any additional handling should go here - before buffer is cleared



			// copy word to previous word and then clear current buffer
			strncpy(last_word, buffer, BUFFER_SIZE);
 8000a9e:	2228      	movs	r2, #40	; 0x28
 8000aa0:	68b9      	ldr	r1, [r7, #8]
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f000 fb1e 	bl	80010e4 <strncpy>
			serial_port->completion_function(last_word, x);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aac:	7cfa      	ldrb	r2, [r7, #19]
 8000aae:	4611      	mov	r1, r2
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	4798      	blx	r3
			SerialOutputString(last_word, &USART1_PORT);
 8000ab4:	490c      	ldr	r1, [pc, #48]	; (8000ae8 <getChar+0xdc>)
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f000 f869 	bl	8000b8e <SerialOutputString>
			for (int j = 0; j < BUFFER_SIZE; j++){
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	e007      	b.n	8000ad2 <getChar+0xc6>
				buffer[j] = 0;
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	68ba      	ldr	r2, [r7, #8]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < BUFFER_SIZE; j++){
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	2b27      	cmp	r3, #39	; 0x27
 8000ad6:	ddf4      	ble.n	8000ac2 <getChar+0xb6>
			}
			// reset the counter to 0
			*i = 0;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]

		}
	}
}
 8000ade:	bf00      	nop
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000000c 	.word	0x2000000c

08000aec <enable_uart_interrupt>:
void enable_uart_interrupt(SerialPort *serial_port){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
	__disable_irq();

	// enable the read data not empty interrupt enable bit in the control register
	serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f042 0220 	orr.w	r2, r2, #32
 8000b06:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(USART1_IRQn, 1);
 8000b08:	2101      	movs	r1, #1
 8000b0a:	2025      	movs	r0, #37	; 0x25
 8000b0c:	f7ff fed6 	bl	80008bc <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8000b10:	2025      	movs	r0, #37	; 0x25
 8000b12:	f7ff feb5 	bl	8000880 <__NVIC_EnableIRQ>

	// set the interrupt function
	on_key_input = &getChar;
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <enable_uart_interrupt+0x3c>)
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <enable_uart_interrupt+0x40>)
 8000b1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b1c:	b662      	cpsie	i
}
 8000b1e:	bf00      	nop

	__enable_irq();
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000021c 	.word	0x2000021c
 8000b2c:	08000a0d 	.word	0x08000a0d

08000b30 <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler(){
 8000b30:	b598      	push	{r3, r4, r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	// should receive a character and store it in a buffer then return
	on_key_input(&USART1_PORT, buffer, last_word, &i);
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <USART1_EXTI25_IRQHandler+0x18>)
 8000b36:	681c      	ldr	r4, [r3, #0]
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <USART1_EXTI25_IRQHandler+0x1c>)
 8000b3a:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <USART1_EXTI25_IRQHandler+0x20>)
 8000b3c:	4905      	ldr	r1, [pc, #20]	; (8000b54 <USART1_EXTI25_IRQHandler+0x24>)
 8000b3e:	4806      	ldr	r0, [pc, #24]	; (8000b58 <USART1_EXTI25_IRQHandler+0x28>)
 8000b40:	47a0      	blx	r4
}
 8000b42:	bf00      	nop
 8000b44:	bd98      	pop	{r3, r4, r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000021c 	.word	0x2000021c
 8000b4c:	20000218 	.word	0x20000218
 8000b50:	20000178 	.word	0x20000178
 8000b54:	200000d8 	.word	0x200000d8
 8000b58:	2000000c 	.word	0x2000000c

08000b5c <SerialOutputChar>:
||------------------||
||	  UART Output	||
||------------------||
*/

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 8000b68:	bf00      	nop
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	69db      	ldr	r3, [r3, #28]
 8000b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d0f8      	beq.n	8000b6a <SerialOutputChar+0xe>
	}
	serial_port->UART->TDR = data;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	79fa      	ldrb	r2, [r7, #7]
 8000b7e:	b292      	uxth	r2, r2
 8000b80:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <SerialOutputString>:


void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	6039      	str	r1, [r7, #0]
	uint32_t counter = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8000b9c:	e00b      	b.n	8000bb6 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ffd9 	bl	8000b5c <SerialOutputChar>
		counter++;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	3301      	adds	r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
		pt++;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d1ef      	bne.n	8000b9e <SerialOutputString+0x10>
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <USART_callback>:
||------------------------------||
||	  UART Completion Function	||
||------------------------------||
*/

void USART_callback(uint8_t *string, uint8_t count) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b0ae      	sub	sp, #184	; 0xb8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	70fb      	strb	r3, [r7, #3]
// This function will be called after a transmission is complete
	// use a temporary var to avoid original buffer from being modified
	uint8_t *temp[BUFFER_SIZE] = {0};
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	22a0      	movs	r2, #160	; 0xa0
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 faf1 	bl	80011c4 <memset>
	uint8_t *instructions[2] = {0};
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
	int i = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	strncpy(temp, string, BUFFER_SIZE);
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	2228      	movs	r2, #40	; 0x28
 8000bf8:	6879      	ldr	r1, [r7, #4]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 fa72 	bl	80010e4 <strncpy>

	uint8_t *token = strtok(temp, " ");
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	4916      	ldr	r1, [pc, #88]	; (8000c60 <USART_callback+0x98>)
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 fa80 	bl	800110c <strtok>
 8000c0c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
	instructions[i++] = token;
 8000c10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	33b8      	adds	r3, #184	; 0xb8
 8000c1e:	443b      	add	r3, r7
 8000c20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000c24:	f843 2cb0 	str.w	r2, [r3, #-176]
	token = strtok(NULL, "");
 8000c28:	490e      	ldr	r1, [pc, #56]	; (8000c64 <USART_callback+0x9c>)
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 fa6e 	bl	800110c <strtok>
 8000c30:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
	instructions[i++] = token;
 8000c34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	33b8      	adds	r3, #184	; 0xb8
 8000c42:	443b      	add	r3, r7
 8000c44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000c48:	f843 2cb0 	str.w	r2, [r3, #-176]


	message_handler(instructions[0], instructions[1]);
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fc92 	bl	800057c <message_handler>
}
 8000c58:	bf00      	nop
 8000c5a:	37b8      	adds	r7, #184	; 0xb8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	0800202c 	.word	0x0800202c
 8000c64:	08002030 	.word	0x08002030

08000c68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return 1;
 8000c6c:	2301      	movs	r3, #1
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <_kill>:

int _kill(int pid, int sig)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c82:	f000 faa7 	bl	80011d4 <__errno>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2216      	movs	r2, #22
 8000c8a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_exit>:

void _exit (int status)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ffe7 	bl	8000c78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000caa:	e7fe      	b.n	8000caa <_exit+0x12>

08000cac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	e00a      	b.n	8000cd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cbe:	f3af 8000 	nop.w
 8000cc2:	4601      	mov	r1, r0
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60ba      	str	r2, [r7, #8]
 8000cca:	b2ca      	uxtb	r2, r1
 8000ccc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	dbf0      	blt.n	8000cbe <_read+0x12>
  }

  return len;
 8000cdc:	687b      	ldr	r3, [r7, #4]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e009      	b.n	8000d0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	60ba      	str	r2, [r7, #8]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dbf1      	blt.n	8000cf8 <_write+0x12>
  }
  return len;
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_close>:

int _close(int file)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d46:	605a      	str	r2, [r3, #4]
  return 0;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <_isatty>:

int _isatty(int file)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f000 fa0c 	bl	80011d4 <__errno>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	2000a000 	.word	0x2000a000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	20000220 	.word	0x20000220
 8000df0:	20000370 	.word	0x20000370

08000df4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000df6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfe:	490d      	ldr	r1, [pc, #52]	; (8000e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <LoopForever+0xe>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e14:	4c0a      	ldr	r4, [pc, #40]	; (8000e40 <LoopForever+0x16>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e22:	f000 f9dd 	bl	80011e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e26:	f7ff fd13 	bl	8000850 <main>

08000e2a <LoopForever>:

LoopForever:
  b LoopForever
 8000e2a:	e7fe      	b.n	8000e2a <LoopForever>
  ldr   r0, =_estack
 8000e2c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e38:	0800221c 	.word	0x0800221c
  ldr r2, =_sbss
 8000e3c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e40:	20000370 	.word	0x20000370

08000e44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC1_2_IRQHandler>
	...

08000e48 <std>:
 8000e48:	2300      	movs	r3, #0
 8000e4a:	b510      	push	{r4, lr}
 8000e4c:	4604      	mov	r4, r0
 8000e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8000e52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e56:	6083      	str	r3, [r0, #8]
 8000e58:	8181      	strh	r1, [r0, #12]
 8000e5a:	6643      	str	r3, [r0, #100]	; 0x64
 8000e5c:	81c2      	strh	r2, [r0, #14]
 8000e5e:	6183      	str	r3, [r0, #24]
 8000e60:	4619      	mov	r1, r3
 8000e62:	2208      	movs	r2, #8
 8000e64:	305c      	adds	r0, #92	; 0x5c
 8000e66:	f000 f9ad 	bl	80011c4 <memset>
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <std+0x58>)
 8000e6c:	6263      	str	r3, [r4, #36]	; 0x24
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <std+0x5c>)
 8000e70:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <std+0x60>)
 8000e74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <std+0x64>)
 8000e78:	6323      	str	r3, [r4, #48]	; 0x30
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <std+0x68>)
 8000e7c:	6224      	str	r4, [r4, #32]
 8000e7e:	429c      	cmp	r4, r3
 8000e80:	d006      	beq.n	8000e90 <std+0x48>
 8000e82:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000e86:	4294      	cmp	r4, r2
 8000e88:	d002      	beq.n	8000e90 <std+0x48>
 8000e8a:	33d0      	adds	r3, #208	; 0xd0
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	d105      	bne.n	8000e9c <std+0x54>
 8000e90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e98:	f000 b9c6 	b.w	8001228 <__retarget_lock_init_recursive>
 8000e9c:	bd10      	pop	{r4, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08001531 	.word	0x08001531
 8000ea4:	08001553 	.word	0x08001553
 8000ea8:	0800158b 	.word	0x0800158b
 8000eac:	080015af 	.word	0x080015af
 8000eb0:	20000224 	.word	0x20000224

08000eb4 <stdio_exit_handler>:
 8000eb4:	4a02      	ldr	r2, [pc, #8]	; (8000ec0 <stdio_exit_handler+0xc>)
 8000eb6:	4903      	ldr	r1, [pc, #12]	; (8000ec4 <stdio_exit_handler+0x10>)
 8000eb8:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <stdio_exit_handler+0x14>)
 8000eba:	f000 b8f5 	b.w	80010a8 <_fwalk_sglue>
 8000ebe:	bf00      	nop
 8000ec0:	20000034 	.word	0x20000034
 8000ec4:	080014c9 	.word	0x080014c9
 8000ec8:	20000040 	.word	0x20000040

08000ecc <cleanup_stdio>:
 8000ecc:	6841      	ldr	r1, [r0, #4]
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <cleanup_stdio+0x34>)
 8000ed0:	4299      	cmp	r1, r3
 8000ed2:	b510      	push	{r4, lr}
 8000ed4:	4604      	mov	r4, r0
 8000ed6:	d001      	beq.n	8000edc <cleanup_stdio+0x10>
 8000ed8:	f000 faf6 	bl	80014c8 <_fflush_r>
 8000edc:	68a1      	ldr	r1, [r4, #8]
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <cleanup_stdio+0x38>)
 8000ee0:	4299      	cmp	r1, r3
 8000ee2:	d002      	beq.n	8000eea <cleanup_stdio+0x1e>
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	f000 faef 	bl	80014c8 <_fflush_r>
 8000eea:	68e1      	ldr	r1, [r4, #12]
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <cleanup_stdio+0x3c>)
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d004      	beq.n	8000efc <cleanup_stdio+0x30>
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ef8:	f000 bae6 	b.w	80014c8 <_fflush_r>
 8000efc:	bd10      	pop	{r4, pc}
 8000efe:	bf00      	nop
 8000f00:	20000224 	.word	0x20000224
 8000f04:	2000028c 	.word	0x2000028c
 8000f08:	200002f4 	.word	0x200002f4

08000f0c <global_stdio_init.part.0>:
 8000f0c:	b510      	push	{r4, lr}
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <global_stdio_init.part.0+0x30>)
 8000f10:	4c0b      	ldr	r4, [pc, #44]	; (8000f40 <global_stdio_init.part.0+0x34>)
 8000f12:	4a0c      	ldr	r2, [pc, #48]	; (8000f44 <global_stdio_init.part.0+0x38>)
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	4620      	mov	r0, r4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	f7ff ff94 	bl	8000e48 <std>
 8000f20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000f24:	2201      	movs	r2, #1
 8000f26:	2109      	movs	r1, #9
 8000f28:	f7ff ff8e 	bl	8000e48 <std>
 8000f2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000f30:	2202      	movs	r2, #2
 8000f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f36:	2112      	movs	r1, #18
 8000f38:	f7ff bf86 	b.w	8000e48 <std>
 8000f3c:	2000035c 	.word	0x2000035c
 8000f40:	20000224 	.word	0x20000224
 8000f44:	08000eb5 	.word	0x08000eb5

08000f48 <__sfp_lock_acquire>:
 8000f48:	4801      	ldr	r0, [pc, #4]	; (8000f50 <__sfp_lock_acquire+0x8>)
 8000f4a:	f000 b96e 	b.w	800122a <__retarget_lock_acquire_recursive>
 8000f4e:	bf00      	nop
 8000f50:	20000361 	.word	0x20000361

08000f54 <__sfp_lock_release>:
 8000f54:	4801      	ldr	r0, [pc, #4]	; (8000f5c <__sfp_lock_release+0x8>)
 8000f56:	f000 b969 	b.w	800122c <__retarget_lock_release_recursive>
 8000f5a:	bf00      	nop
 8000f5c:	20000361 	.word	0x20000361

08000f60 <__sinit>:
 8000f60:	b510      	push	{r4, lr}
 8000f62:	4604      	mov	r4, r0
 8000f64:	f7ff fff0 	bl	8000f48 <__sfp_lock_acquire>
 8000f68:	6a23      	ldr	r3, [r4, #32]
 8000f6a:	b11b      	cbz	r3, 8000f74 <__sinit+0x14>
 8000f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f70:	f7ff bff0 	b.w	8000f54 <__sfp_lock_release>
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <__sinit+0x28>)
 8000f76:	6223      	str	r3, [r4, #32]
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <__sinit+0x2c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f5      	bne.n	8000f6c <__sinit+0xc>
 8000f80:	f7ff ffc4 	bl	8000f0c <global_stdio_init.part.0>
 8000f84:	e7f2      	b.n	8000f6c <__sinit+0xc>
 8000f86:	bf00      	nop
 8000f88:	08000ecd 	.word	0x08000ecd
 8000f8c:	2000035c 	.word	0x2000035c

08000f90 <_strtol_l.constprop.0>:
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f96:	d001      	beq.n	8000f9c <_strtol_l.constprop.0+0xc>
 8000f98:	2b24      	cmp	r3, #36	; 0x24
 8000f9a:	d906      	bls.n	8000faa <_strtol_l.constprop.0+0x1a>
 8000f9c:	f000 f91a 	bl	80011d4 <__errno>
 8000fa0:	2316      	movs	r3, #22
 8000fa2:	6003      	str	r3, [r0, #0]
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000faa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8001090 <_strtol_l.constprop.0+0x100>
 8000fae:	460d      	mov	r5, r1
 8000fb0:	462e      	mov	r6, r5
 8000fb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000fb6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8000fba:	f017 0708 	ands.w	r7, r7, #8
 8000fbe:	d1f7      	bne.n	8000fb0 <_strtol_l.constprop.0+0x20>
 8000fc0:	2c2d      	cmp	r4, #45	; 0x2d
 8000fc2:	d132      	bne.n	800102a <_strtol_l.constprop.0+0x9a>
 8000fc4:	782c      	ldrb	r4, [r5, #0]
 8000fc6:	2701      	movs	r7, #1
 8000fc8:	1cb5      	adds	r5, r6, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d05b      	beq.n	8001086 <_strtol_l.constprop.0+0xf6>
 8000fce:	2b10      	cmp	r3, #16
 8000fd0:	d109      	bne.n	8000fe6 <_strtol_l.constprop.0+0x56>
 8000fd2:	2c30      	cmp	r4, #48	; 0x30
 8000fd4:	d107      	bne.n	8000fe6 <_strtol_l.constprop.0+0x56>
 8000fd6:	782c      	ldrb	r4, [r5, #0]
 8000fd8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8000fdc:	2c58      	cmp	r4, #88	; 0x58
 8000fde:	d14d      	bne.n	800107c <_strtol_l.constprop.0+0xec>
 8000fe0:	786c      	ldrb	r4, [r5, #1]
 8000fe2:	2310      	movs	r3, #16
 8000fe4:	3502      	adds	r5, #2
 8000fe6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8000fea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8000fee:	f04f 0e00 	mov.w	lr, #0
 8000ff2:	fbb8 f9f3 	udiv	r9, r8, r3
 8000ff6:	4676      	mov	r6, lr
 8000ff8:	fb03 8a19 	mls	sl, r3, r9, r8
 8000ffc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8001000:	f1bc 0f09 	cmp.w	ip, #9
 8001004:	d816      	bhi.n	8001034 <_strtol_l.constprop.0+0xa4>
 8001006:	4664      	mov	r4, ip
 8001008:	42a3      	cmp	r3, r4
 800100a:	dd24      	ble.n	8001056 <_strtol_l.constprop.0+0xc6>
 800100c:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8001010:	d008      	beq.n	8001024 <_strtol_l.constprop.0+0x94>
 8001012:	45b1      	cmp	r9, r6
 8001014:	d31c      	bcc.n	8001050 <_strtol_l.constprop.0+0xc0>
 8001016:	d101      	bne.n	800101c <_strtol_l.constprop.0+0x8c>
 8001018:	45a2      	cmp	sl, r4
 800101a:	db19      	blt.n	8001050 <_strtol_l.constprop.0+0xc0>
 800101c:	fb06 4603 	mla	r6, r6, r3, r4
 8001020:	f04f 0e01 	mov.w	lr, #1
 8001024:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001028:	e7e8      	b.n	8000ffc <_strtol_l.constprop.0+0x6c>
 800102a:	2c2b      	cmp	r4, #43	; 0x2b
 800102c:	bf04      	itt	eq
 800102e:	782c      	ldrbeq	r4, [r5, #0]
 8001030:	1cb5      	addeq	r5, r6, #2
 8001032:	e7ca      	b.n	8000fca <_strtol_l.constprop.0+0x3a>
 8001034:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8001038:	f1bc 0f19 	cmp.w	ip, #25
 800103c:	d801      	bhi.n	8001042 <_strtol_l.constprop.0+0xb2>
 800103e:	3c37      	subs	r4, #55	; 0x37
 8001040:	e7e2      	b.n	8001008 <_strtol_l.constprop.0+0x78>
 8001042:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8001046:	f1bc 0f19 	cmp.w	ip, #25
 800104a:	d804      	bhi.n	8001056 <_strtol_l.constprop.0+0xc6>
 800104c:	3c57      	subs	r4, #87	; 0x57
 800104e:	e7db      	b.n	8001008 <_strtol_l.constprop.0+0x78>
 8001050:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8001054:	e7e6      	b.n	8001024 <_strtol_l.constprop.0+0x94>
 8001056:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800105a:	d105      	bne.n	8001068 <_strtol_l.constprop.0+0xd8>
 800105c:	2322      	movs	r3, #34	; 0x22
 800105e:	6003      	str	r3, [r0, #0]
 8001060:	4646      	mov	r6, r8
 8001062:	b942      	cbnz	r2, 8001076 <_strtol_l.constprop.0+0xe6>
 8001064:	4630      	mov	r0, r6
 8001066:	e79e      	b.n	8000fa6 <_strtol_l.constprop.0+0x16>
 8001068:	b107      	cbz	r7, 800106c <_strtol_l.constprop.0+0xdc>
 800106a:	4276      	negs	r6, r6
 800106c:	2a00      	cmp	r2, #0
 800106e:	d0f9      	beq.n	8001064 <_strtol_l.constprop.0+0xd4>
 8001070:	f1be 0f00 	cmp.w	lr, #0
 8001074:	d000      	beq.n	8001078 <_strtol_l.constprop.0+0xe8>
 8001076:	1e69      	subs	r1, r5, #1
 8001078:	6011      	str	r1, [r2, #0]
 800107a:	e7f3      	b.n	8001064 <_strtol_l.constprop.0+0xd4>
 800107c:	2430      	movs	r4, #48	; 0x30
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1b1      	bne.n	8000fe6 <_strtol_l.constprop.0+0x56>
 8001082:	2308      	movs	r3, #8
 8001084:	e7af      	b.n	8000fe6 <_strtol_l.constprop.0+0x56>
 8001086:	2c30      	cmp	r4, #48	; 0x30
 8001088:	d0a5      	beq.n	8000fd6 <_strtol_l.constprop.0+0x46>
 800108a:	230a      	movs	r3, #10
 800108c:	e7ab      	b.n	8000fe6 <_strtol_l.constprop.0+0x56>
 800108e:	bf00      	nop
 8001090:	080020a3 	.word	0x080020a3

08001094 <strtol>:
 8001094:	4613      	mov	r3, r2
 8001096:	460a      	mov	r2, r1
 8001098:	4601      	mov	r1, r0
 800109a:	4802      	ldr	r0, [pc, #8]	; (80010a4 <strtol+0x10>)
 800109c:	6800      	ldr	r0, [r0, #0]
 800109e:	f7ff bf77 	b.w	8000f90 <_strtol_l.constprop.0>
 80010a2:	bf00      	nop
 80010a4:	2000008c 	.word	0x2000008c

080010a8 <_fwalk_sglue>:
 80010a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010ac:	4607      	mov	r7, r0
 80010ae:	4688      	mov	r8, r1
 80010b0:	4614      	mov	r4, r2
 80010b2:	2600      	movs	r6, #0
 80010b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80010b8:	f1b9 0901 	subs.w	r9, r9, #1
 80010bc:	d505      	bpl.n	80010ca <_fwalk_sglue+0x22>
 80010be:	6824      	ldr	r4, [r4, #0]
 80010c0:	2c00      	cmp	r4, #0
 80010c2:	d1f7      	bne.n	80010b4 <_fwalk_sglue+0xc>
 80010c4:	4630      	mov	r0, r6
 80010c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010ca:	89ab      	ldrh	r3, [r5, #12]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d907      	bls.n	80010e0 <_fwalk_sglue+0x38>
 80010d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80010d4:	3301      	adds	r3, #1
 80010d6:	d003      	beq.n	80010e0 <_fwalk_sglue+0x38>
 80010d8:	4629      	mov	r1, r5
 80010da:	4638      	mov	r0, r7
 80010dc:	47c0      	blx	r8
 80010de:	4306      	orrs	r6, r0
 80010e0:	3568      	adds	r5, #104	; 0x68
 80010e2:	e7e9      	b.n	80010b8 <_fwalk_sglue+0x10>

080010e4 <strncpy>:
 80010e4:	b510      	push	{r4, lr}
 80010e6:	3901      	subs	r1, #1
 80010e8:	4603      	mov	r3, r0
 80010ea:	b132      	cbz	r2, 80010fa <strncpy+0x16>
 80010ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80010f0:	f803 4b01 	strb.w	r4, [r3], #1
 80010f4:	3a01      	subs	r2, #1
 80010f6:	2c00      	cmp	r4, #0
 80010f8:	d1f7      	bne.n	80010ea <strncpy+0x6>
 80010fa:	441a      	add	r2, r3
 80010fc:	2100      	movs	r1, #0
 80010fe:	4293      	cmp	r3, r2
 8001100:	d100      	bne.n	8001104 <strncpy+0x20>
 8001102:	bd10      	pop	{r4, pc}
 8001104:	f803 1b01 	strb.w	r1, [r3], #1
 8001108:	e7f9      	b.n	80010fe <strncpy+0x1a>
	...

0800110c <strtok>:
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <strtok+0x5c>)
 800110e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001110:	681e      	ldr	r6, [r3, #0]
 8001112:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8001114:	4605      	mov	r5, r0
 8001116:	b9fc      	cbnz	r4, 8001158 <strtok+0x4c>
 8001118:	2050      	movs	r0, #80	; 0x50
 800111a:	9101      	str	r1, [sp, #4]
 800111c:	f000 f8a6 	bl	800126c <malloc>
 8001120:	9901      	ldr	r1, [sp, #4]
 8001122:	6470      	str	r0, [r6, #68]	; 0x44
 8001124:	4602      	mov	r2, r0
 8001126:	b920      	cbnz	r0, 8001132 <strtok+0x26>
 8001128:	4b10      	ldr	r3, [pc, #64]	; (800116c <strtok+0x60>)
 800112a:	4811      	ldr	r0, [pc, #68]	; (8001170 <strtok+0x64>)
 800112c:	215b      	movs	r1, #91	; 0x5b
 800112e:	f000 f87f 	bl	8001230 <__assert_func>
 8001132:	e9c0 4400 	strd	r4, r4, [r0]
 8001136:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800113a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800113e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8001142:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8001146:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800114a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800114e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8001152:	6184      	str	r4, [r0, #24]
 8001154:	7704      	strb	r4, [r0, #28]
 8001156:	6244      	str	r4, [r0, #36]	; 0x24
 8001158:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800115a:	2301      	movs	r3, #1
 800115c:	4628      	mov	r0, r5
 800115e:	b002      	add	sp, #8
 8001160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001164:	f000 b806 	b.w	8001174 <__strtok_r>
 8001168:	2000008c 	.word	0x2000008c
 800116c:	08002031 	.word	0x08002031
 8001170:	08002048 	.word	0x08002048

08001174 <__strtok_r>:
 8001174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001176:	b908      	cbnz	r0, 800117c <__strtok_r+0x8>
 8001178:	6810      	ldr	r0, [r2, #0]
 800117a:	b188      	cbz	r0, 80011a0 <__strtok_r+0x2c>
 800117c:	4604      	mov	r4, r0
 800117e:	4620      	mov	r0, r4
 8001180:	f814 5b01 	ldrb.w	r5, [r4], #1
 8001184:	460f      	mov	r7, r1
 8001186:	f817 6b01 	ldrb.w	r6, [r7], #1
 800118a:	b91e      	cbnz	r6, 8001194 <__strtok_r+0x20>
 800118c:	b965      	cbnz	r5, 80011a8 <__strtok_r+0x34>
 800118e:	6015      	str	r5, [r2, #0]
 8001190:	4628      	mov	r0, r5
 8001192:	e005      	b.n	80011a0 <__strtok_r+0x2c>
 8001194:	42b5      	cmp	r5, r6
 8001196:	d1f6      	bne.n	8001186 <__strtok_r+0x12>
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1f0      	bne.n	800117e <__strtok_r+0xa>
 800119c:	6014      	str	r4, [r2, #0]
 800119e:	7003      	strb	r3, [r0, #0]
 80011a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a2:	461c      	mov	r4, r3
 80011a4:	e00c      	b.n	80011c0 <__strtok_r+0x4c>
 80011a6:	b915      	cbnz	r5, 80011ae <__strtok_r+0x3a>
 80011a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80011ac:	460e      	mov	r6, r1
 80011ae:	f816 5b01 	ldrb.w	r5, [r6], #1
 80011b2:	42ab      	cmp	r3, r5
 80011b4:	d1f7      	bne.n	80011a6 <__strtok_r+0x32>
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f3      	beq.n	80011a2 <__strtok_r+0x2e>
 80011ba:	2300      	movs	r3, #0
 80011bc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80011c0:	6014      	str	r4, [r2, #0]
 80011c2:	e7ed      	b.n	80011a0 <__strtok_r+0x2c>

080011c4 <memset>:
 80011c4:	4402      	add	r2, r0
 80011c6:	4603      	mov	r3, r0
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d100      	bne.n	80011ce <memset+0xa>
 80011cc:	4770      	bx	lr
 80011ce:	f803 1b01 	strb.w	r1, [r3], #1
 80011d2:	e7f9      	b.n	80011c8 <memset+0x4>

080011d4 <__errno>:
 80011d4:	4b01      	ldr	r3, [pc, #4]	; (80011dc <__errno+0x8>)
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	2000008c 	.word	0x2000008c

080011e0 <__libc_init_array>:
 80011e0:	b570      	push	{r4, r5, r6, lr}
 80011e2:	4d0d      	ldr	r5, [pc, #52]	; (8001218 <__libc_init_array+0x38>)
 80011e4:	4c0d      	ldr	r4, [pc, #52]	; (800121c <__libc_init_array+0x3c>)
 80011e6:	1b64      	subs	r4, r4, r5
 80011e8:	10a4      	asrs	r4, r4, #2
 80011ea:	2600      	movs	r6, #0
 80011ec:	42a6      	cmp	r6, r4
 80011ee:	d109      	bne.n	8001204 <__libc_init_array+0x24>
 80011f0:	4d0b      	ldr	r5, [pc, #44]	; (8001220 <__libc_init_array+0x40>)
 80011f2:	4c0c      	ldr	r4, [pc, #48]	; (8001224 <__libc_init_array+0x44>)
 80011f4:	f000 fece 	bl	8001f94 <_init>
 80011f8:	1b64      	subs	r4, r4, r5
 80011fa:	10a4      	asrs	r4, r4, #2
 80011fc:	2600      	movs	r6, #0
 80011fe:	42a6      	cmp	r6, r4
 8001200:	d105      	bne.n	800120e <__libc_init_array+0x2e>
 8001202:	bd70      	pop	{r4, r5, r6, pc}
 8001204:	f855 3b04 	ldr.w	r3, [r5], #4
 8001208:	4798      	blx	r3
 800120a:	3601      	adds	r6, #1
 800120c:	e7ee      	b.n	80011ec <__libc_init_array+0xc>
 800120e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001212:	4798      	blx	r3
 8001214:	3601      	adds	r6, #1
 8001216:	e7f2      	b.n	80011fe <__libc_init_array+0x1e>
 8001218:	08002214 	.word	0x08002214
 800121c:	08002214 	.word	0x08002214
 8001220:	08002214 	.word	0x08002214
 8001224:	08002218 	.word	0x08002218

08001228 <__retarget_lock_init_recursive>:
 8001228:	4770      	bx	lr

0800122a <__retarget_lock_acquire_recursive>:
 800122a:	4770      	bx	lr

0800122c <__retarget_lock_release_recursive>:
 800122c:	4770      	bx	lr
	...

08001230 <__assert_func>:
 8001230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001232:	4614      	mov	r4, r2
 8001234:	461a      	mov	r2, r3
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <__assert_func+0x2c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4605      	mov	r5, r0
 800123c:	68d8      	ldr	r0, [r3, #12]
 800123e:	b14c      	cbz	r4, 8001254 <__assert_func+0x24>
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <__assert_func+0x30>)
 8001242:	9100      	str	r1, [sp, #0]
 8001244:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001248:	4906      	ldr	r1, [pc, #24]	; (8001264 <__assert_func+0x34>)
 800124a:	462b      	mov	r3, r5
 800124c:	f000 f9b4 	bl	80015b8 <fiprintf>
 8001250:	f000 fa1a 	bl	8001688 <abort>
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <__assert_func+0x38>)
 8001256:	461c      	mov	r4, r3
 8001258:	e7f3      	b.n	8001242 <__assert_func+0x12>
 800125a:	bf00      	nop
 800125c:	2000008c 	.word	0x2000008c
 8001260:	080021a3 	.word	0x080021a3
 8001264:	080021b0 	.word	0x080021b0
 8001268:	080021de 	.word	0x080021de

0800126c <malloc>:
 800126c:	4b02      	ldr	r3, [pc, #8]	; (8001278 <malloc+0xc>)
 800126e:	4601      	mov	r1, r0
 8001270:	6818      	ldr	r0, [r3, #0]
 8001272:	f000 b823 	b.w	80012bc <_malloc_r>
 8001276:	bf00      	nop
 8001278:	2000008c 	.word	0x2000008c

0800127c <sbrk_aligned>:
 800127c:	b570      	push	{r4, r5, r6, lr}
 800127e:	4e0e      	ldr	r6, [pc, #56]	; (80012b8 <sbrk_aligned+0x3c>)
 8001280:	460c      	mov	r4, r1
 8001282:	6831      	ldr	r1, [r6, #0]
 8001284:	4605      	mov	r5, r0
 8001286:	b911      	cbnz	r1, 800128e <sbrk_aligned+0x12>
 8001288:	f000 f9dc 	bl	8001644 <_sbrk_r>
 800128c:	6030      	str	r0, [r6, #0]
 800128e:	4621      	mov	r1, r4
 8001290:	4628      	mov	r0, r5
 8001292:	f000 f9d7 	bl	8001644 <_sbrk_r>
 8001296:	1c43      	adds	r3, r0, #1
 8001298:	d00a      	beq.n	80012b0 <sbrk_aligned+0x34>
 800129a:	1cc4      	adds	r4, r0, #3
 800129c:	f024 0403 	bic.w	r4, r4, #3
 80012a0:	42a0      	cmp	r0, r4
 80012a2:	d007      	beq.n	80012b4 <sbrk_aligned+0x38>
 80012a4:	1a21      	subs	r1, r4, r0
 80012a6:	4628      	mov	r0, r5
 80012a8:	f000 f9cc 	bl	8001644 <_sbrk_r>
 80012ac:	3001      	adds	r0, #1
 80012ae:	d101      	bne.n	80012b4 <sbrk_aligned+0x38>
 80012b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80012b4:	4620      	mov	r0, r4
 80012b6:	bd70      	pop	{r4, r5, r6, pc}
 80012b8:	20000368 	.word	0x20000368

080012bc <_malloc_r>:
 80012bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012c0:	1ccd      	adds	r5, r1, #3
 80012c2:	f025 0503 	bic.w	r5, r5, #3
 80012c6:	3508      	adds	r5, #8
 80012c8:	2d0c      	cmp	r5, #12
 80012ca:	bf38      	it	cc
 80012cc:	250c      	movcc	r5, #12
 80012ce:	2d00      	cmp	r5, #0
 80012d0:	4607      	mov	r7, r0
 80012d2:	db01      	blt.n	80012d8 <_malloc_r+0x1c>
 80012d4:	42a9      	cmp	r1, r5
 80012d6:	d905      	bls.n	80012e4 <_malloc_r+0x28>
 80012d8:	230c      	movs	r3, #12
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	2600      	movs	r6, #0
 80012de:	4630      	mov	r0, r6
 80012e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80013b8 <_malloc_r+0xfc>
 80012e8:	f000 f916 	bl	8001518 <__malloc_lock>
 80012ec:	f8d8 3000 	ldr.w	r3, [r8]
 80012f0:	461c      	mov	r4, r3
 80012f2:	bb5c      	cbnz	r4, 800134c <_malloc_r+0x90>
 80012f4:	4629      	mov	r1, r5
 80012f6:	4638      	mov	r0, r7
 80012f8:	f7ff ffc0 	bl	800127c <sbrk_aligned>
 80012fc:	1c43      	adds	r3, r0, #1
 80012fe:	4604      	mov	r4, r0
 8001300:	d155      	bne.n	80013ae <_malloc_r+0xf2>
 8001302:	f8d8 4000 	ldr.w	r4, [r8]
 8001306:	4626      	mov	r6, r4
 8001308:	2e00      	cmp	r6, #0
 800130a:	d145      	bne.n	8001398 <_malloc_r+0xdc>
 800130c:	2c00      	cmp	r4, #0
 800130e:	d048      	beq.n	80013a2 <_malloc_r+0xe6>
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	4631      	mov	r1, r6
 8001314:	4638      	mov	r0, r7
 8001316:	eb04 0903 	add.w	r9, r4, r3
 800131a:	f000 f993 	bl	8001644 <_sbrk_r>
 800131e:	4581      	cmp	r9, r0
 8001320:	d13f      	bne.n	80013a2 <_malloc_r+0xe6>
 8001322:	6821      	ldr	r1, [r4, #0]
 8001324:	1a6d      	subs	r5, r5, r1
 8001326:	4629      	mov	r1, r5
 8001328:	4638      	mov	r0, r7
 800132a:	f7ff ffa7 	bl	800127c <sbrk_aligned>
 800132e:	3001      	adds	r0, #1
 8001330:	d037      	beq.n	80013a2 <_malloc_r+0xe6>
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	442b      	add	r3, r5
 8001336:	6023      	str	r3, [r4, #0]
 8001338:	f8d8 3000 	ldr.w	r3, [r8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d038      	beq.n	80013b2 <_malloc_r+0xf6>
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	42a2      	cmp	r2, r4
 8001344:	d12b      	bne.n	800139e <_malloc_r+0xe2>
 8001346:	2200      	movs	r2, #0
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	e00f      	b.n	800136c <_malloc_r+0xb0>
 800134c:	6822      	ldr	r2, [r4, #0]
 800134e:	1b52      	subs	r2, r2, r5
 8001350:	d41f      	bmi.n	8001392 <_malloc_r+0xd6>
 8001352:	2a0b      	cmp	r2, #11
 8001354:	d917      	bls.n	8001386 <_malloc_r+0xca>
 8001356:	1961      	adds	r1, r4, r5
 8001358:	42a3      	cmp	r3, r4
 800135a:	6025      	str	r5, [r4, #0]
 800135c:	bf18      	it	ne
 800135e:	6059      	strne	r1, [r3, #4]
 8001360:	6863      	ldr	r3, [r4, #4]
 8001362:	bf08      	it	eq
 8001364:	f8c8 1000 	streq.w	r1, [r8]
 8001368:	5162      	str	r2, [r4, r5]
 800136a:	604b      	str	r3, [r1, #4]
 800136c:	4638      	mov	r0, r7
 800136e:	f104 060b 	add.w	r6, r4, #11
 8001372:	f000 f8d7 	bl	8001524 <__malloc_unlock>
 8001376:	f026 0607 	bic.w	r6, r6, #7
 800137a:	1d23      	adds	r3, r4, #4
 800137c:	1af2      	subs	r2, r6, r3
 800137e:	d0ae      	beq.n	80012de <_malloc_r+0x22>
 8001380:	1b9b      	subs	r3, r3, r6
 8001382:	50a3      	str	r3, [r4, r2]
 8001384:	e7ab      	b.n	80012de <_malloc_r+0x22>
 8001386:	42a3      	cmp	r3, r4
 8001388:	6862      	ldr	r2, [r4, #4]
 800138a:	d1dd      	bne.n	8001348 <_malloc_r+0x8c>
 800138c:	f8c8 2000 	str.w	r2, [r8]
 8001390:	e7ec      	b.n	800136c <_malloc_r+0xb0>
 8001392:	4623      	mov	r3, r4
 8001394:	6864      	ldr	r4, [r4, #4]
 8001396:	e7ac      	b.n	80012f2 <_malloc_r+0x36>
 8001398:	4634      	mov	r4, r6
 800139a:	6876      	ldr	r6, [r6, #4]
 800139c:	e7b4      	b.n	8001308 <_malloc_r+0x4c>
 800139e:	4613      	mov	r3, r2
 80013a0:	e7cc      	b.n	800133c <_malloc_r+0x80>
 80013a2:	230c      	movs	r3, #12
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	4638      	mov	r0, r7
 80013a8:	f000 f8bc 	bl	8001524 <__malloc_unlock>
 80013ac:	e797      	b.n	80012de <_malloc_r+0x22>
 80013ae:	6025      	str	r5, [r4, #0]
 80013b0:	e7dc      	b.n	800136c <_malloc_r+0xb0>
 80013b2:	605b      	str	r3, [r3, #4]
 80013b4:	deff      	udf	#255	; 0xff
 80013b6:	bf00      	nop
 80013b8:	20000364 	.word	0x20000364

080013bc <__sflush_r>:
 80013bc:	898a      	ldrh	r2, [r1, #12]
 80013be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c2:	4605      	mov	r5, r0
 80013c4:	0710      	lsls	r0, r2, #28
 80013c6:	460c      	mov	r4, r1
 80013c8:	d458      	bmi.n	800147c <__sflush_r+0xc0>
 80013ca:	684b      	ldr	r3, [r1, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	dc05      	bgt.n	80013dc <__sflush_r+0x20>
 80013d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	dc02      	bgt.n	80013dc <__sflush_r+0x20>
 80013d6:	2000      	movs	r0, #0
 80013d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013de:	2e00      	cmp	r6, #0
 80013e0:	d0f9      	beq.n	80013d6 <__sflush_r+0x1a>
 80013e2:	2300      	movs	r3, #0
 80013e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80013e8:	682f      	ldr	r7, [r5, #0]
 80013ea:	6a21      	ldr	r1, [r4, #32]
 80013ec:	602b      	str	r3, [r5, #0]
 80013ee:	d032      	beq.n	8001456 <__sflush_r+0x9a>
 80013f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80013f2:	89a3      	ldrh	r3, [r4, #12]
 80013f4:	075a      	lsls	r2, r3, #29
 80013f6:	d505      	bpl.n	8001404 <__sflush_r+0x48>
 80013f8:	6863      	ldr	r3, [r4, #4]
 80013fa:	1ac0      	subs	r0, r0, r3
 80013fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013fe:	b10b      	cbz	r3, 8001404 <__sflush_r+0x48>
 8001400:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001402:	1ac0      	subs	r0, r0, r3
 8001404:	2300      	movs	r3, #0
 8001406:	4602      	mov	r2, r0
 8001408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800140a:	6a21      	ldr	r1, [r4, #32]
 800140c:	4628      	mov	r0, r5
 800140e:	47b0      	blx	r6
 8001410:	1c43      	adds	r3, r0, #1
 8001412:	89a3      	ldrh	r3, [r4, #12]
 8001414:	d106      	bne.n	8001424 <__sflush_r+0x68>
 8001416:	6829      	ldr	r1, [r5, #0]
 8001418:	291d      	cmp	r1, #29
 800141a:	d82b      	bhi.n	8001474 <__sflush_r+0xb8>
 800141c:	4a29      	ldr	r2, [pc, #164]	; (80014c4 <__sflush_r+0x108>)
 800141e:	410a      	asrs	r2, r1
 8001420:	07d6      	lsls	r6, r2, #31
 8001422:	d427      	bmi.n	8001474 <__sflush_r+0xb8>
 8001424:	2200      	movs	r2, #0
 8001426:	6062      	str	r2, [r4, #4]
 8001428:	04d9      	lsls	r1, r3, #19
 800142a:	6922      	ldr	r2, [r4, #16]
 800142c:	6022      	str	r2, [r4, #0]
 800142e:	d504      	bpl.n	800143a <__sflush_r+0x7e>
 8001430:	1c42      	adds	r2, r0, #1
 8001432:	d101      	bne.n	8001438 <__sflush_r+0x7c>
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	b903      	cbnz	r3, 800143a <__sflush_r+0x7e>
 8001438:	6560      	str	r0, [r4, #84]	; 0x54
 800143a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800143c:	602f      	str	r7, [r5, #0]
 800143e:	2900      	cmp	r1, #0
 8001440:	d0c9      	beq.n	80013d6 <__sflush_r+0x1a>
 8001442:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001446:	4299      	cmp	r1, r3
 8001448:	d002      	beq.n	8001450 <__sflush_r+0x94>
 800144a:	4628      	mov	r0, r5
 800144c:	f000 f924 	bl	8001698 <_free_r>
 8001450:	2000      	movs	r0, #0
 8001452:	6360      	str	r0, [r4, #52]	; 0x34
 8001454:	e7c0      	b.n	80013d8 <__sflush_r+0x1c>
 8001456:	2301      	movs	r3, #1
 8001458:	4628      	mov	r0, r5
 800145a:	47b0      	blx	r6
 800145c:	1c41      	adds	r1, r0, #1
 800145e:	d1c8      	bne.n	80013f2 <__sflush_r+0x36>
 8001460:	682b      	ldr	r3, [r5, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0c5      	beq.n	80013f2 <__sflush_r+0x36>
 8001466:	2b1d      	cmp	r3, #29
 8001468:	d001      	beq.n	800146e <__sflush_r+0xb2>
 800146a:	2b16      	cmp	r3, #22
 800146c:	d101      	bne.n	8001472 <__sflush_r+0xb6>
 800146e:	602f      	str	r7, [r5, #0]
 8001470:	e7b1      	b.n	80013d6 <__sflush_r+0x1a>
 8001472:	89a3      	ldrh	r3, [r4, #12]
 8001474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001478:	81a3      	strh	r3, [r4, #12]
 800147a:	e7ad      	b.n	80013d8 <__sflush_r+0x1c>
 800147c:	690f      	ldr	r7, [r1, #16]
 800147e:	2f00      	cmp	r7, #0
 8001480:	d0a9      	beq.n	80013d6 <__sflush_r+0x1a>
 8001482:	0793      	lsls	r3, r2, #30
 8001484:	680e      	ldr	r6, [r1, #0]
 8001486:	bf08      	it	eq
 8001488:	694b      	ldreq	r3, [r1, #20]
 800148a:	600f      	str	r7, [r1, #0]
 800148c:	bf18      	it	ne
 800148e:	2300      	movne	r3, #0
 8001490:	eba6 0807 	sub.w	r8, r6, r7
 8001494:	608b      	str	r3, [r1, #8]
 8001496:	f1b8 0f00 	cmp.w	r8, #0
 800149a:	dd9c      	ble.n	80013d6 <__sflush_r+0x1a>
 800149c:	6a21      	ldr	r1, [r4, #32]
 800149e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80014a0:	4643      	mov	r3, r8
 80014a2:	463a      	mov	r2, r7
 80014a4:	4628      	mov	r0, r5
 80014a6:	47b0      	blx	r6
 80014a8:	2800      	cmp	r0, #0
 80014aa:	dc06      	bgt.n	80014ba <__sflush_r+0xfe>
 80014ac:	89a3      	ldrh	r3, [r4, #12]
 80014ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014b2:	81a3      	strh	r3, [r4, #12]
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b8:	e78e      	b.n	80013d8 <__sflush_r+0x1c>
 80014ba:	4407      	add	r7, r0
 80014bc:	eba8 0800 	sub.w	r8, r8, r0
 80014c0:	e7e9      	b.n	8001496 <__sflush_r+0xda>
 80014c2:	bf00      	nop
 80014c4:	dfbffffe 	.word	0xdfbffffe

080014c8 <_fflush_r>:
 80014c8:	b538      	push	{r3, r4, r5, lr}
 80014ca:	690b      	ldr	r3, [r1, #16]
 80014cc:	4605      	mov	r5, r0
 80014ce:	460c      	mov	r4, r1
 80014d0:	b913      	cbnz	r3, 80014d8 <_fflush_r+0x10>
 80014d2:	2500      	movs	r5, #0
 80014d4:	4628      	mov	r0, r5
 80014d6:	bd38      	pop	{r3, r4, r5, pc}
 80014d8:	b118      	cbz	r0, 80014e2 <_fflush_r+0x1a>
 80014da:	6a03      	ldr	r3, [r0, #32]
 80014dc:	b90b      	cbnz	r3, 80014e2 <_fflush_r+0x1a>
 80014de:	f7ff fd3f 	bl	8000f60 <__sinit>
 80014e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f3      	beq.n	80014d2 <_fflush_r+0xa>
 80014ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80014ec:	07d0      	lsls	r0, r2, #31
 80014ee:	d404      	bmi.n	80014fa <_fflush_r+0x32>
 80014f0:	0599      	lsls	r1, r3, #22
 80014f2:	d402      	bmi.n	80014fa <_fflush_r+0x32>
 80014f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014f6:	f7ff fe98 	bl	800122a <__retarget_lock_acquire_recursive>
 80014fa:	4628      	mov	r0, r5
 80014fc:	4621      	mov	r1, r4
 80014fe:	f7ff ff5d 	bl	80013bc <__sflush_r>
 8001502:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001504:	07da      	lsls	r2, r3, #31
 8001506:	4605      	mov	r5, r0
 8001508:	d4e4      	bmi.n	80014d4 <_fflush_r+0xc>
 800150a:	89a3      	ldrh	r3, [r4, #12]
 800150c:	059b      	lsls	r3, r3, #22
 800150e:	d4e1      	bmi.n	80014d4 <_fflush_r+0xc>
 8001510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001512:	f7ff fe8b 	bl	800122c <__retarget_lock_release_recursive>
 8001516:	e7dd      	b.n	80014d4 <_fflush_r+0xc>

08001518 <__malloc_lock>:
 8001518:	4801      	ldr	r0, [pc, #4]	; (8001520 <__malloc_lock+0x8>)
 800151a:	f7ff be86 	b.w	800122a <__retarget_lock_acquire_recursive>
 800151e:	bf00      	nop
 8001520:	20000360 	.word	0x20000360

08001524 <__malloc_unlock>:
 8001524:	4801      	ldr	r0, [pc, #4]	; (800152c <__malloc_unlock+0x8>)
 8001526:	f7ff be81 	b.w	800122c <__retarget_lock_release_recursive>
 800152a:	bf00      	nop
 800152c:	20000360 	.word	0x20000360

08001530 <__sread>:
 8001530:	b510      	push	{r4, lr}
 8001532:	460c      	mov	r4, r1
 8001534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001538:	f000 f872 	bl	8001620 <_read_r>
 800153c:	2800      	cmp	r0, #0
 800153e:	bfab      	itete	ge
 8001540:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001542:	89a3      	ldrhlt	r3, [r4, #12]
 8001544:	181b      	addge	r3, r3, r0
 8001546:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800154a:	bfac      	ite	ge
 800154c:	6563      	strge	r3, [r4, #84]	; 0x54
 800154e:	81a3      	strhlt	r3, [r4, #12]
 8001550:	bd10      	pop	{r4, pc}

08001552 <__swrite>:
 8001552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001556:	461f      	mov	r7, r3
 8001558:	898b      	ldrh	r3, [r1, #12]
 800155a:	05db      	lsls	r3, r3, #23
 800155c:	4605      	mov	r5, r0
 800155e:	460c      	mov	r4, r1
 8001560:	4616      	mov	r6, r2
 8001562:	d505      	bpl.n	8001570 <__swrite+0x1e>
 8001564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001568:	2302      	movs	r3, #2
 800156a:	2200      	movs	r2, #0
 800156c:	f000 f846 	bl	80015fc <_lseek_r>
 8001570:	89a3      	ldrh	r3, [r4, #12]
 8001572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800157a:	81a3      	strh	r3, [r4, #12]
 800157c:	4632      	mov	r2, r6
 800157e:	463b      	mov	r3, r7
 8001580:	4628      	mov	r0, r5
 8001582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001586:	f000 b86d 	b.w	8001664 <_write_r>

0800158a <__sseek>:
 800158a:	b510      	push	{r4, lr}
 800158c:	460c      	mov	r4, r1
 800158e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001592:	f000 f833 	bl	80015fc <_lseek_r>
 8001596:	1c43      	adds	r3, r0, #1
 8001598:	89a3      	ldrh	r3, [r4, #12]
 800159a:	bf15      	itete	ne
 800159c:	6560      	strne	r0, [r4, #84]	; 0x54
 800159e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80015a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80015a6:	81a3      	strheq	r3, [r4, #12]
 80015a8:	bf18      	it	ne
 80015aa:	81a3      	strhne	r3, [r4, #12]
 80015ac:	bd10      	pop	{r4, pc}

080015ae <__sclose>:
 80015ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015b2:	f000 b813 	b.w	80015dc <_close_r>
	...

080015b8 <fiprintf>:
 80015b8:	b40e      	push	{r1, r2, r3}
 80015ba:	b503      	push	{r0, r1, lr}
 80015bc:	4601      	mov	r1, r0
 80015be:	ab03      	add	r3, sp, #12
 80015c0:	4805      	ldr	r0, [pc, #20]	; (80015d8 <fiprintf+0x20>)
 80015c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80015c6:	6800      	ldr	r0, [r0, #0]
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	f000 f8db 	bl	8001784 <_vfiprintf_r>
 80015ce:	b002      	add	sp, #8
 80015d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80015d4:	b003      	add	sp, #12
 80015d6:	4770      	bx	lr
 80015d8:	2000008c 	.word	0x2000008c

080015dc <_close_r>:
 80015dc:	b538      	push	{r3, r4, r5, lr}
 80015de:	4d06      	ldr	r5, [pc, #24]	; (80015f8 <_close_r+0x1c>)
 80015e0:	2300      	movs	r3, #0
 80015e2:	4604      	mov	r4, r0
 80015e4:	4608      	mov	r0, r1
 80015e6:	602b      	str	r3, [r5, #0]
 80015e8:	f7ff fb99 	bl	8000d1e <_close>
 80015ec:	1c43      	adds	r3, r0, #1
 80015ee:	d102      	bne.n	80015f6 <_close_r+0x1a>
 80015f0:	682b      	ldr	r3, [r5, #0]
 80015f2:	b103      	cbz	r3, 80015f6 <_close_r+0x1a>
 80015f4:	6023      	str	r3, [r4, #0]
 80015f6:	bd38      	pop	{r3, r4, r5, pc}
 80015f8:	2000036c 	.word	0x2000036c

080015fc <_lseek_r>:
 80015fc:	b538      	push	{r3, r4, r5, lr}
 80015fe:	4d07      	ldr	r5, [pc, #28]	; (800161c <_lseek_r+0x20>)
 8001600:	4604      	mov	r4, r0
 8001602:	4608      	mov	r0, r1
 8001604:	4611      	mov	r1, r2
 8001606:	2200      	movs	r2, #0
 8001608:	602a      	str	r2, [r5, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	f7ff fbae 	bl	8000d6c <_lseek>
 8001610:	1c43      	adds	r3, r0, #1
 8001612:	d102      	bne.n	800161a <_lseek_r+0x1e>
 8001614:	682b      	ldr	r3, [r5, #0]
 8001616:	b103      	cbz	r3, 800161a <_lseek_r+0x1e>
 8001618:	6023      	str	r3, [r4, #0]
 800161a:	bd38      	pop	{r3, r4, r5, pc}
 800161c:	2000036c 	.word	0x2000036c

08001620 <_read_r>:
 8001620:	b538      	push	{r3, r4, r5, lr}
 8001622:	4d07      	ldr	r5, [pc, #28]	; (8001640 <_read_r+0x20>)
 8001624:	4604      	mov	r4, r0
 8001626:	4608      	mov	r0, r1
 8001628:	4611      	mov	r1, r2
 800162a:	2200      	movs	r2, #0
 800162c:	602a      	str	r2, [r5, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	f7ff fb3c 	bl	8000cac <_read>
 8001634:	1c43      	adds	r3, r0, #1
 8001636:	d102      	bne.n	800163e <_read_r+0x1e>
 8001638:	682b      	ldr	r3, [r5, #0]
 800163a:	b103      	cbz	r3, 800163e <_read_r+0x1e>
 800163c:	6023      	str	r3, [r4, #0]
 800163e:	bd38      	pop	{r3, r4, r5, pc}
 8001640:	2000036c 	.word	0x2000036c

08001644 <_sbrk_r>:
 8001644:	b538      	push	{r3, r4, r5, lr}
 8001646:	4d06      	ldr	r5, [pc, #24]	; (8001660 <_sbrk_r+0x1c>)
 8001648:	2300      	movs	r3, #0
 800164a:	4604      	mov	r4, r0
 800164c:	4608      	mov	r0, r1
 800164e:	602b      	str	r3, [r5, #0]
 8001650:	f7ff fb9a 	bl	8000d88 <_sbrk>
 8001654:	1c43      	adds	r3, r0, #1
 8001656:	d102      	bne.n	800165e <_sbrk_r+0x1a>
 8001658:	682b      	ldr	r3, [r5, #0]
 800165a:	b103      	cbz	r3, 800165e <_sbrk_r+0x1a>
 800165c:	6023      	str	r3, [r4, #0]
 800165e:	bd38      	pop	{r3, r4, r5, pc}
 8001660:	2000036c 	.word	0x2000036c

08001664 <_write_r>:
 8001664:	b538      	push	{r3, r4, r5, lr}
 8001666:	4d07      	ldr	r5, [pc, #28]	; (8001684 <_write_r+0x20>)
 8001668:	4604      	mov	r4, r0
 800166a:	4608      	mov	r0, r1
 800166c:	4611      	mov	r1, r2
 800166e:	2200      	movs	r2, #0
 8001670:	602a      	str	r2, [r5, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	f7ff fb37 	bl	8000ce6 <_write>
 8001678:	1c43      	adds	r3, r0, #1
 800167a:	d102      	bne.n	8001682 <_write_r+0x1e>
 800167c:	682b      	ldr	r3, [r5, #0]
 800167e:	b103      	cbz	r3, 8001682 <_write_r+0x1e>
 8001680:	6023      	str	r3, [r4, #0]
 8001682:	bd38      	pop	{r3, r4, r5, pc}
 8001684:	2000036c 	.word	0x2000036c

08001688 <abort>:
 8001688:	b508      	push	{r3, lr}
 800168a:	2006      	movs	r0, #6
 800168c:	f000 fc66 	bl	8001f5c <raise>
 8001690:	2001      	movs	r0, #1
 8001692:	f7ff fb01 	bl	8000c98 <_exit>
	...

08001698 <_free_r>:
 8001698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800169a:	2900      	cmp	r1, #0
 800169c:	d044      	beq.n	8001728 <_free_r+0x90>
 800169e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016a2:	9001      	str	r0, [sp, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f1a1 0404 	sub.w	r4, r1, #4
 80016aa:	bfb8      	it	lt
 80016ac:	18e4      	addlt	r4, r4, r3
 80016ae:	f7ff ff33 	bl	8001518 <__malloc_lock>
 80016b2:	4a1e      	ldr	r2, [pc, #120]	; (800172c <_free_r+0x94>)
 80016b4:	9801      	ldr	r0, [sp, #4]
 80016b6:	6813      	ldr	r3, [r2, #0]
 80016b8:	b933      	cbnz	r3, 80016c8 <_free_r+0x30>
 80016ba:	6063      	str	r3, [r4, #4]
 80016bc:	6014      	str	r4, [r2, #0]
 80016be:	b003      	add	sp, #12
 80016c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80016c4:	f7ff bf2e 	b.w	8001524 <__malloc_unlock>
 80016c8:	42a3      	cmp	r3, r4
 80016ca:	d908      	bls.n	80016de <_free_r+0x46>
 80016cc:	6825      	ldr	r5, [r4, #0]
 80016ce:	1961      	adds	r1, r4, r5
 80016d0:	428b      	cmp	r3, r1
 80016d2:	bf01      	itttt	eq
 80016d4:	6819      	ldreq	r1, [r3, #0]
 80016d6:	685b      	ldreq	r3, [r3, #4]
 80016d8:	1949      	addeq	r1, r1, r5
 80016da:	6021      	streq	r1, [r4, #0]
 80016dc:	e7ed      	b.n	80016ba <_free_r+0x22>
 80016de:	461a      	mov	r2, r3
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	b10b      	cbz	r3, 80016e8 <_free_r+0x50>
 80016e4:	42a3      	cmp	r3, r4
 80016e6:	d9fa      	bls.n	80016de <_free_r+0x46>
 80016e8:	6811      	ldr	r1, [r2, #0]
 80016ea:	1855      	adds	r5, r2, r1
 80016ec:	42a5      	cmp	r5, r4
 80016ee:	d10b      	bne.n	8001708 <_free_r+0x70>
 80016f0:	6824      	ldr	r4, [r4, #0]
 80016f2:	4421      	add	r1, r4
 80016f4:	1854      	adds	r4, r2, r1
 80016f6:	42a3      	cmp	r3, r4
 80016f8:	6011      	str	r1, [r2, #0]
 80016fa:	d1e0      	bne.n	80016be <_free_r+0x26>
 80016fc:	681c      	ldr	r4, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	6053      	str	r3, [r2, #4]
 8001702:	440c      	add	r4, r1
 8001704:	6014      	str	r4, [r2, #0]
 8001706:	e7da      	b.n	80016be <_free_r+0x26>
 8001708:	d902      	bls.n	8001710 <_free_r+0x78>
 800170a:	230c      	movs	r3, #12
 800170c:	6003      	str	r3, [r0, #0]
 800170e:	e7d6      	b.n	80016be <_free_r+0x26>
 8001710:	6825      	ldr	r5, [r4, #0]
 8001712:	1961      	adds	r1, r4, r5
 8001714:	428b      	cmp	r3, r1
 8001716:	bf04      	itt	eq
 8001718:	6819      	ldreq	r1, [r3, #0]
 800171a:	685b      	ldreq	r3, [r3, #4]
 800171c:	6063      	str	r3, [r4, #4]
 800171e:	bf04      	itt	eq
 8001720:	1949      	addeq	r1, r1, r5
 8001722:	6021      	streq	r1, [r4, #0]
 8001724:	6054      	str	r4, [r2, #4]
 8001726:	e7ca      	b.n	80016be <_free_r+0x26>
 8001728:	b003      	add	sp, #12
 800172a:	bd30      	pop	{r4, r5, pc}
 800172c:	20000364 	.word	0x20000364

08001730 <__sfputc_r>:
 8001730:	6893      	ldr	r3, [r2, #8]
 8001732:	3b01      	subs	r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	b410      	push	{r4}
 8001738:	6093      	str	r3, [r2, #8]
 800173a:	da08      	bge.n	800174e <__sfputc_r+0x1e>
 800173c:	6994      	ldr	r4, [r2, #24]
 800173e:	42a3      	cmp	r3, r4
 8001740:	db01      	blt.n	8001746 <__sfputc_r+0x16>
 8001742:	290a      	cmp	r1, #10
 8001744:	d103      	bne.n	800174e <__sfputc_r+0x1e>
 8001746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800174a:	f000 bac5 	b.w	8001cd8 <__swbuf_r>
 800174e:	6813      	ldr	r3, [r2, #0]
 8001750:	1c58      	adds	r0, r3, #1
 8001752:	6010      	str	r0, [r2, #0]
 8001754:	7019      	strb	r1, [r3, #0]
 8001756:	4608      	mov	r0, r1
 8001758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800175c:	4770      	bx	lr

0800175e <__sfputs_r>:
 800175e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001760:	4606      	mov	r6, r0
 8001762:	460f      	mov	r7, r1
 8001764:	4614      	mov	r4, r2
 8001766:	18d5      	adds	r5, r2, r3
 8001768:	42ac      	cmp	r4, r5
 800176a:	d101      	bne.n	8001770 <__sfputs_r+0x12>
 800176c:	2000      	movs	r0, #0
 800176e:	e007      	b.n	8001780 <__sfputs_r+0x22>
 8001770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001774:	463a      	mov	r2, r7
 8001776:	4630      	mov	r0, r6
 8001778:	f7ff ffda 	bl	8001730 <__sfputc_r>
 800177c:	1c43      	adds	r3, r0, #1
 800177e:	d1f3      	bne.n	8001768 <__sfputs_r+0xa>
 8001780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001784 <_vfiprintf_r>:
 8001784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001788:	460d      	mov	r5, r1
 800178a:	b09d      	sub	sp, #116	; 0x74
 800178c:	4614      	mov	r4, r2
 800178e:	4698      	mov	r8, r3
 8001790:	4606      	mov	r6, r0
 8001792:	b118      	cbz	r0, 800179c <_vfiprintf_r+0x18>
 8001794:	6a03      	ldr	r3, [r0, #32]
 8001796:	b90b      	cbnz	r3, 800179c <_vfiprintf_r+0x18>
 8001798:	f7ff fbe2 	bl	8000f60 <__sinit>
 800179c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800179e:	07d9      	lsls	r1, r3, #31
 80017a0:	d405      	bmi.n	80017ae <_vfiprintf_r+0x2a>
 80017a2:	89ab      	ldrh	r3, [r5, #12]
 80017a4:	059a      	lsls	r2, r3, #22
 80017a6:	d402      	bmi.n	80017ae <_vfiprintf_r+0x2a>
 80017a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80017aa:	f7ff fd3e 	bl	800122a <__retarget_lock_acquire_recursive>
 80017ae:	89ab      	ldrh	r3, [r5, #12]
 80017b0:	071b      	lsls	r3, r3, #28
 80017b2:	d501      	bpl.n	80017b8 <_vfiprintf_r+0x34>
 80017b4:	692b      	ldr	r3, [r5, #16]
 80017b6:	b99b      	cbnz	r3, 80017e0 <_vfiprintf_r+0x5c>
 80017b8:	4629      	mov	r1, r5
 80017ba:	4630      	mov	r0, r6
 80017bc:	f000 faca 	bl	8001d54 <__swsetup_r>
 80017c0:	b170      	cbz	r0, 80017e0 <_vfiprintf_r+0x5c>
 80017c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80017c4:	07dc      	lsls	r4, r3, #31
 80017c6:	d504      	bpl.n	80017d2 <_vfiprintf_r+0x4e>
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017cc:	b01d      	add	sp, #116	; 0x74
 80017ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017d2:	89ab      	ldrh	r3, [r5, #12]
 80017d4:	0598      	lsls	r0, r3, #22
 80017d6:	d4f7      	bmi.n	80017c8 <_vfiprintf_r+0x44>
 80017d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80017da:	f7ff fd27 	bl	800122c <__retarget_lock_release_recursive>
 80017de:	e7f3      	b.n	80017c8 <_vfiprintf_r+0x44>
 80017e0:	2300      	movs	r3, #0
 80017e2:	9309      	str	r3, [sp, #36]	; 0x24
 80017e4:	2320      	movs	r3, #32
 80017e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80017ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80017ee:	2330      	movs	r3, #48	; 0x30
 80017f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80019a4 <_vfiprintf_r+0x220>
 80017f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80017f8:	f04f 0901 	mov.w	r9, #1
 80017fc:	4623      	mov	r3, r4
 80017fe:	469a      	mov	sl, r3
 8001800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001804:	b10a      	cbz	r2, 800180a <_vfiprintf_r+0x86>
 8001806:	2a25      	cmp	r2, #37	; 0x25
 8001808:	d1f9      	bne.n	80017fe <_vfiprintf_r+0x7a>
 800180a:	ebba 0b04 	subs.w	fp, sl, r4
 800180e:	d00b      	beq.n	8001828 <_vfiprintf_r+0xa4>
 8001810:	465b      	mov	r3, fp
 8001812:	4622      	mov	r2, r4
 8001814:	4629      	mov	r1, r5
 8001816:	4630      	mov	r0, r6
 8001818:	f7ff ffa1 	bl	800175e <__sfputs_r>
 800181c:	3001      	adds	r0, #1
 800181e:	f000 80a9 	beq.w	8001974 <_vfiprintf_r+0x1f0>
 8001822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001824:	445a      	add	r2, fp
 8001826:	9209      	str	r2, [sp, #36]	; 0x24
 8001828:	f89a 3000 	ldrb.w	r3, [sl]
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80a1 	beq.w	8001974 <_vfiprintf_r+0x1f0>
 8001832:	2300      	movs	r3, #0
 8001834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800183c:	f10a 0a01 	add.w	sl, sl, #1
 8001840:	9304      	str	r3, [sp, #16]
 8001842:	9307      	str	r3, [sp, #28]
 8001844:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001848:	931a      	str	r3, [sp, #104]	; 0x68
 800184a:	4654      	mov	r4, sl
 800184c:	2205      	movs	r2, #5
 800184e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001852:	4854      	ldr	r0, [pc, #336]	; (80019a4 <_vfiprintf_r+0x220>)
 8001854:	f7fe fcd4 	bl	8000200 <memchr>
 8001858:	9a04      	ldr	r2, [sp, #16]
 800185a:	b9d8      	cbnz	r0, 8001894 <_vfiprintf_r+0x110>
 800185c:	06d1      	lsls	r1, r2, #27
 800185e:	bf44      	itt	mi
 8001860:	2320      	movmi	r3, #32
 8001862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001866:	0713      	lsls	r3, r2, #28
 8001868:	bf44      	itt	mi
 800186a:	232b      	movmi	r3, #43	; 0x2b
 800186c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001870:	f89a 3000 	ldrb.w	r3, [sl]
 8001874:	2b2a      	cmp	r3, #42	; 0x2a
 8001876:	d015      	beq.n	80018a4 <_vfiprintf_r+0x120>
 8001878:	9a07      	ldr	r2, [sp, #28]
 800187a:	4654      	mov	r4, sl
 800187c:	2000      	movs	r0, #0
 800187e:	f04f 0c0a 	mov.w	ip, #10
 8001882:	4621      	mov	r1, r4
 8001884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001888:	3b30      	subs	r3, #48	; 0x30
 800188a:	2b09      	cmp	r3, #9
 800188c:	d94d      	bls.n	800192a <_vfiprintf_r+0x1a6>
 800188e:	b1b0      	cbz	r0, 80018be <_vfiprintf_r+0x13a>
 8001890:	9207      	str	r2, [sp, #28]
 8001892:	e014      	b.n	80018be <_vfiprintf_r+0x13a>
 8001894:	eba0 0308 	sub.w	r3, r0, r8
 8001898:	fa09 f303 	lsl.w	r3, r9, r3
 800189c:	4313      	orrs	r3, r2
 800189e:	9304      	str	r3, [sp, #16]
 80018a0:	46a2      	mov	sl, r4
 80018a2:	e7d2      	b.n	800184a <_vfiprintf_r+0xc6>
 80018a4:	9b03      	ldr	r3, [sp, #12]
 80018a6:	1d19      	adds	r1, r3, #4
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	9103      	str	r1, [sp, #12]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bfbb      	ittet	lt
 80018b0:	425b      	neglt	r3, r3
 80018b2:	f042 0202 	orrlt.w	r2, r2, #2
 80018b6:	9307      	strge	r3, [sp, #28]
 80018b8:	9307      	strlt	r3, [sp, #28]
 80018ba:	bfb8      	it	lt
 80018bc:	9204      	strlt	r2, [sp, #16]
 80018be:	7823      	ldrb	r3, [r4, #0]
 80018c0:	2b2e      	cmp	r3, #46	; 0x2e
 80018c2:	d10c      	bne.n	80018de <_vfiprintf_r+0x15a>
 80018c4:	7863      	ldrb	r3, [r4, #1]
 80018c6:	2b2a      	cmp	r3, #42	; 0x2a
 80018c8:	d134      	bne.n	8001934 <_vfiprintf_r+0x1b0>
 80018ca:	9b03      	ldr	r3, [sp, #12]
 80018cc:	1d1a      	adds	r2, r3, #4
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	9203      	str	r2, [sp, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	bfb8      	it	lt
 80018d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80018da:	3402      	adds	r4, #2
 80018dc:	9305      	str	r3, [sp, #20]
 80018de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80019b4 <_vfiprintf_r+0x230>
 80018e2:	7821      	ldrb	r1, [r4, #0]
 80018e4:	2203      	movs	r2, #3
 80018e6:	4650      	mov	r0, sl
 80018e8:	f7fe fc8a 	bl	8000200 <memchr>
 80018ec:	b138      	cbz	r0, 80018fe <_vfiprintf_r+0x17a>
 80018ee:	9b04      	ldr	r3, [sp, #16]
 80018f0:	eba0 000a 	sub.w	r0, r0, sl
 80018f4:	2240      	movs	r2, #64	; 0x40
 80018f6:	4082      	lsls	r2, r0
 80018f8:	4313      	orrs	r3, r2
 80018fa:	3401      	adds	r4, #1
 80018fc:	9304      	str	r3, [sp, #16]
 80018fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001902:	4829      	ldr	r0, [pc, #164]	; (80019a8 <_vfiprintf_r+0x224>)
 8001904:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001908:	2206      	movs	r2, #6
 800190a:	f7fe fc79 	bl	8000200 <memchr>
 800190e:	2800      	cmp	r0, #0
 8001910:	d03f      	beq.n	8001992 <_vfiprintf_r+0x20e>
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <_vfiprintf_r+0x228>)
 8001914:	bb1b      	cbnz	r3, 800195e <_vfiprintf_r+0x1da>
 8001916:	9b03      	ldr	r3, [sp, #12]
 8001918:	3307      	adds	r3, #7
 800191a:	f023 0307 	bic.w	r3, r3, #7
 800191e:	3308      	adds	r3, #8
 8001920:	9303      	str	r3, [sp, #12]
 8001922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001924:	443b      	add	r3, r7
 8001926:	9309      	str	r3, [sp, #36]	; 0x24
 8001928:	e768      	b.n	80017fc <_vfiprintf_r+0x78>
 800192a:	fb0c 3202 	mla	r2, ip, r2, r3
 800192e:	460c      	mov	r4, r1
 8001930:	2001      	movs	r0, #1
 8001932:	e7a6      	b.n	8001882 <_vfiprintf_r+0xfe>
 8001934:	2300      	movs	r3, #0
 8001936:	3401      	adds	r4, #1
 8001938:	9305      	str	r3, [sp, #20]
 800193a:	4619      	mov	r1, r3
 800193c:	f04f 0c0a 	mov.w	ip, #10
 8001940:	4620      	mov	r0, r4
 8001942:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001946:	3a30      	subs	r2, #48	; 0x30
 8001948:	2a09      	cmp	r2, #9
 800194a:	d903      	bls.n	8001954 <_vfiprintf_r+0x1d0>
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0c6      	beq.n	80018de <_vfiprintf_r+0x15a>
 8001950:	9105      	str	r1, [sp, #20]
 8001952:	e7c4      	b.n	80018de <_vfiprintf_r+0x15a>
 8001954:	fb0c 2101 	mla	r1, ip, r1, r2
 8001958:	4604      	mov	r4, r0
 800195a:	2301      	movs	r3, #1
 800195c:	e7f0      	b.n	8001940 <_vfiprintf_r+0x1bc>
 800195e:	ab03      	add	r3, sp, #12
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	462a      	mov	r2, r5
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <_vfiprintf_r+0x22c>)
 8001966:	a904      	add	r1, sp, #16
 8001968:	4630      	mov	r0, r6
 800196a:	f3af 8000 	nop.w
 800196e:	4607      	mov	r7, r0
 8001970:	1c78      	adds	r0, r7, #1
 8001972:	d1d6      	bne.n	8001922 <_vfiprintf_r+0x19e>
 8001974:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001976:	07d9      	lsls	r1, r3, #31
 8001978:	d405      	bmi.n	8001986 <_vfiprintf_r+0x202>
 800197a:	89ab      	ldrh	r3, [r5, #12]
 800197c:	059a      	lsls	r2, r3, #22
 800197e:	d402      	bmi.n	8001986 <_vfiprintf_r+0x202>
 8001980:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001982:	f7ff fc53 	bl	800122c <__retarget_lock_release_recursive>
 8001986:	89ab      	ldrh	r3, [r5, #12]
 8001988:	065b      	lsls	r3, r3, #25
 800198a:	f53f af1d 	bmi.w	80017c8 <_vfiprintf_r+0x44>
 800198e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001990:	e71c      	b.n	80017cc <_vfiprintf_r+0x48>
 8001992:	ab03      	add	r3, sp, #12
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	462a      	mov	r2, r5
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <_vfiprintf_r+0x22c>)
 800199a:	a904      	add	r1, sp, #16
 800199c:	4630      	mov	r0, r6
 800199e:	f000 f879 	bl	8001a94 <_printf_i>
 80019a2:	e7e4      	b.n	800196e <_vfiprintf_r+0x1ea>
 80019a4:	080021df 	.word	0x080021df
 80019a8:	080021e9 	.word	0x080021e9
 80019ac:	00000000 	.word	0x00000000
 80019b0:	0800175f 	.word	0x0800175f
 80019b4:	080021e5 	.word	0x080021e5

080019b8 <_printf_common>:
 80019b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019bc:	4616      	mov	r6, r2
 80019be:	4699      	mov	r9, r3
 80019c0:	688a      	ldr	r2, [r1, #8]
 80019c2:	690b      	ldr	r3, [r1, #16]
 80019c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80019c8:	4293      	cmp	r3, r2
 80019ca:	bfb8      	it	lt
 80019cc:	4613      	movlt	r3, r2
 80019ce:	6033      	str	r3, [r6, #0]
 80019d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80019d4:	4607      	mov	r7, r0
 80019d6:	460c      	mov	r4, r1
 80019d8:	b10a      	cbz	r2, 80019de <_printf_common+0x26>
 80019da:	3301      	adds	r3, #1
 80019dc:	6033      	str	r3, [r6, #0]
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	0699      	lsls	r1, r3, #26
 80019e2:	bf42      	ittt	mi
 80019e4:	6833      	ldrmi	r3, [r6, #0]
 80019e6:	3302      	addmi	r3, #2
 80019e8:	6033      	strmi	r3, [r6, #0]
 80019ea:	6825      	ldr	r5, [r4, #0]
 80019ec:	f015 0506 	ands.w	r5, r5, #6
 80019f0:	d106      	bne.n	8001a00 <_printf_common+0x48>
 80019f2:	f104 0a19 	add.w	sl, r4, #25
 80019f6:	68e3      	ldr	r3, [r4, #12]
 80019f8:	6832      	ldr	r2, [r6, #0]
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	42ab      	cmp	r3, r5
 80019fe:	dc26      	bgt.n	8001a4e <_printf_common+0x96>
 8001a00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001a04:	1e13      	subs	r3, r2, #0
 8001a06:	6822      	ldr	r2, [r4, #0]
 8001a08:	bf18      	it	ne
 8001a0a:	2301      	movne	r3, #1
 8001a0c:	0692      	lsls	r2, r2, #26
 8001a0e:	d42b      	bmi.n	8001a68 <_printf_common+0xb0>
 8001a10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a14:	4649      	mov	r1, r9
 8001a16:	4638      	mov	r0, r7
 8001a18:	47c0      	blx	r8
 8001a1a:	3001      	adds	r0, #1
 8001a1c:	d01e      	beq.n	8001a5c <_printf_common+0xa4>
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	6922      	ldr	r2, [r4, #16]
 8001a22:	f003 0306 	and.w	r3, r3, #6
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	bf02      	ittt	eq
 8001a2a:	68e5      	ldreq	r5, [r4, #12]
 8001a2c:	6833      	ldreq	r3, [r6, #0]
 8001a2e:	1aed      	subeq	r5, r5, r3
 8001a30:	68a3      	ldr	r3, [r4, #8]
 8001a32:	bf0c      	ite	eq
 8001a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a38:	2500      	movne	r5, #0
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	bfc4      	itt	gt
 8001a3e:	1a9b      	subgt	r3, r3, r2
 8001a40:	18ed      	addgt	r5, r5, r3
 8001a42:	2600      	movs	r6, #0
 8001a44:	341a      	adds	r4, #26
 8001a46:	42b5      	cmp	r5, r6
 8001a48:	d11a      	bne.n	8001a80 <_printf_common+0xc8>
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	e008      	b.n	8001a60 <_printf_common+0xa8>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	4652      	mov	r2, sl
 8001a52:	4649      	mov	r1, r9
 8001a54:	4638      	mov	r0, r7
 8001a56:	47c0      	blx	r8
 8001a58:	3001      	adds	r0, #1
 8001a5a:	d103      	bne.n	8001a64 <_printf_common+0xac>
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a64:	3501      	adds	r5, #1
 8001a66:	e7c6      	b.n	80019f6 <_printf_common+0x3e>
 8001a68:	18e1      	adds	r1, r4, r3
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	2030      	movs	r0, #48	; 0x30
 8001a6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a72:	4422      	add	r2, r4
 8001a74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	e7c7      	b.n	8001a10 <_printf_common+0x58>
 8001a80:	2301      	movs	r3, #1
 8001a82:	4622      	mov	r2, r4
 8001a84:	4649      	mov	r1, r9
 8001a86:	4638      	mov	r0, r7
 8001a88:	47c0      	blx	r8
 8001a8a:	3001      	adds	r0, #1
 8001a8c:	d0e6      	beq.n	8001a5c <_printf_common+0xa4>
 8001a8e:	3601      	adds	r6, #1
 8001a90:	e7d9      	b.n	8001a46 <_printf_common+0x8e>
	...

08001a94 <_printf_i>:
 8001a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a98:	7e0f      	ldrb	r7, [r1, #24]
 8001a9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001a9c:	2f78      	cmp	r7, #120	; 0x78
 8001a9e:	4691      	mov	r9, r2
 8001aa0:	4680      	mov	r8, r0
 8001aa2:	460c      	mov	r4, r1
 8001aa4:	469a      	mov	sl, r3
 8001aa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001aaa:	d807      	bhi.n	8001abc <_printf_i+0x28>
 8001aac:	2f62      	cmp	r7, #98	; 0x62
 8001aae:	d80a      	bhi.n	8001ac6 <_printf_i+0x32>
 8001ab0:	2f00      	cmp	r7, #0
 8001ab2:	f000 80d4 	beq.w	8001c5e <_printf_i+0x1ca>
 8001ab6:	2f58      	cmp	r7, #88	; 0x58
 8001ab8:	f000 80c0 	beq.w	8001c3c <_printf_i+0x1a8>
 8001abc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ac0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001ac4:	e03a      	b.n	8001b3c <_printf_i+0xa8>
 8001ac6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001aca:	2b15      	cmp	r3, #21
 8001acc:	d8f6      	bhi.n	8001abc <_printf_i+0x28>
 8001ace:	a101      	add	r1, pc, #4	; (adr r1, 8001ad4 <_printf_i+0x40>)
 8001ad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001ad4:	08001b2d 	.word	0x08001b2d
 8001ad8:	08001b41 	.word	0x08001b41
 8001adc:	08001abd 	.word	0x08001abd
 8001ae0:	08001abd 	.word	0x08001abd
 8001ae4:	08001abd 	.word	0x08001abd
 8001ae8:	08001abd 	.word	0x08001abd
 8001aec:	08001b41 	.word	0x08001b41
 8001af0:	08001abd 	.word	0x08001abd
 8001af4:	08001abd 	.word	0x08001abd
 8001af8:	08001abd 	.word	0x08001abd
 8001afc:	08001abd 	.word	0x08001abd
 8001b00:	08001c45 	.word	0x08001c45
 8001b04:	08001b6d 	.word	0x08001b6d
 8001b08:	08001bff 	.word	0x08001bff
 8001b0c:	08001abd 	.word	0x08001abd
 8001b10:	08001abd 	.word	0x08001abd
 8001b14:	08001c67 	.word	0x08001c67
 8001b18:	08001abd 	.word	0x08001abd
 8001b1c:	08001b6d 	.word	0x08001b6d
 8001b20:	08001abd 	.word	0x08001abd
 8001b24:	08001abd 	.word	0x08001abd
 8001b28:	08001c07 	.word	0x08001c07
 8001b2c:	682b      	ldr	r3, [r5, #0]
 8001b2e:	1d1a      	adds	r2, r3, #4
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	602a      	str	r2, [r5, #0]
 8001b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e09f      	b.n	8001c80 <_printf_i+0x1ec>
 8001b40:	6820      	ldr	r0, [r4, #0]
 8001b42:	682b      	ldr	r3, [r5, #0]
 8001b44:	0607      	lsls	r7, r0, #24
 8001b46:	f103 0104 	add.w	r1, r3, #4
 8001b4a:	6029      	str	r1, [r5, #0]
 8001b4c:	d501      	bpl.n	8001b52 <_printf_i+0xbe>
 8001b4e:	681e      	ldr	r6, [r3, #0]
 8001b50:	e003      	b.n	8001b5a <_printf_i+0xc6>
 8001b52:	0646      	lsls	r6, r0, #25
 8001b54:	d5fb      	bpl.n	8001b4e <_printf_i+0xba>
 8001b56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001b5a:	2e00      	cmp	r6, #0
 8001b5c:	da03      	bge.n	8001b66 <_printf_i+0xd2>
 8001b5e:	232d      	movs	r3, #45	; 0x2d
 8001b60:	4276      	negs	r6, r6
 8001b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b66:	485a      	ldr	r0, [pc, #360]	; (8001cd0 <_printf_i+0x23c>)
 8001b68:	230a      	movs	r3, #10
 8001b6a:	e012      	b.n	8001b92 <_printf_i+0xfe>
 8001b6c:	682b      	ldr	r3, [r5, #0]
 8001b6e:	6820      	ldr	r0, [r4, #0]
 8001b70:	1d19      	adds	r1, r3, #4
 8001b72:	6029      	str	r1, [r5, #0]
 8001b74:	0605      	lsls	r5, r0, #24
 8001b76:	d501      	bpl.n	8001b7c <_printf_i+0xe8>
 8001b78:	681e      	ldr	r6, [r3, #0]
 8001b7a:	e002      	b.n	8001b82 <_printf_i+0xee>
 8001b7c:	0641      	lsls	r1, r0, #25
 8001b7e:	d5fb      	bpl.n	8001b78 <_printf_i+0xe4>
 8001b80:	881e      	ldrh	r6, [r3, #0]
 8001b82:	4853      	ldr	r0, [pc, #332]	; (8001cd0 <_printf_i+0x23c>)
 8001b84:	2f6f      	cmp	r7, #111	; 0x6f
 8001b86:	bf0c      	ite	eq
 8001b88:	2308      	moveq	r3, #8
 8001b8a:	230a      	movne	r3, #10
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001b92:	6865      	ldr	r5, [r4, #4]
 8001b94:	60a5      	str	r5, [r4, #8]
 8001b96:	2d00      	cmp	r5, #0
 8001b98:	bfa2      	ittt	ge
 8001b9a:	6821      	ldrge	r1, [r4, #0]
 8001b9c:	f021 0104 	bicge.w	r1, r1, #4
 8001ba0:	6021      	strge	r1, [r4, #0]
 8001ba2:	b90e      	cbnz	r6, 8001ba8 <_printf_i+0x114>
 8001ba4:	2d00      	cmp	r5, #0
 8001ba6:	d04b      	beq.n	8001c40 <_printf_i+0x1ac>
 8001ba8:	4615      	mov	r5, r2
 8001baa:	fbb6 f1f3 	udiv	r1, r6, r3
 8001bae:	fb03 6711 	mls	r7, r3, r1, r6
 8001bb2:	5dc7      	ldrb	r7, [r0, r7]
 8001bb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001bb8:	4637      	mov	r7, r6
 8001bba:	42bb      	cmp	r3, r7
 8001bbc:	460e      	mov	r6, r1
 8001bbe:	d9f4      	bls.n	8001baa <_printf_i+0x116>
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d10b      	bne.n	8001bdc <_printf_i+0x148>
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	07de      	lsls	r6, r3, #31
 8001bc8:	d508      	bpl.n	8001bdc <_printf_i+0x148>
 8001bca:	6923      	ldr	r3, [r4, #16]
 8001bcc:	6861      	ldr	r1, [r4, #4]
 8001bce:	4299      	cmp	r1, r3
 8001bd0:	bfde      	ittt	le
 8001bd2:	2330      	movle	r3, #48	; 0x30
 8001bd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001bd8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001bdc:	1b52      	subs	r2, r2, r5
 8001bde:	6122      	str	r2, [r4, #16]
 8001be0:	f8cd a000 	str.w	sl, [sp]
 8001be4:	464b      	mov	r3, r9
 8001be6:	aa03      	add	r2, sp, #12
 8001be8:	4621      	mov	r1, r4
 8001bea:	4640      	mov	r0, r8
 8001bec:	f7ff fee4 	bl	80019b8 <_printf_common>
 8001bf0:	3001      	adds	r0, #1
 8001bf2:	d14a      	bne.n	8001c8a <_printf_i+0x1f6>
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bf8:	b004      	add	sp, #16
 8001bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bfe:	6823      	ldr	r3, [r4, #0]
 8001c00:	f043 0320 	orr.w	r3, r3, #32
 8001c04:	6023      	str	r3, [r4, #0]
 8001c06:	4833      	ldr	r0, [pc, #204]	; (8001cd4 <_printf_i+0x240>)
 8001c08:	2778      	movs	r7, #120	; 0x78
 8001c0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001c0e:	6823      	ldr	r3, [r4, #0]
 8001c10:	6829      	ldr	r1, [r5, #0]
 8001c12:	061f      	lsls	r7, r3, #24
 8001c14:	f851 6b04 	ldr.w	r6, [r1], #4
 8001c18:	d402      	bmi.n	8001c20 <_printf_i+0x18c>
 8001c1a:	065f      	lsls	r7, r3, #25
 8001c1c:	bf48      	it	mi
 8001c1e:	b2b6      	uxthmi	r6, r6
 8001c20:	07df      	lsls	r7, r3, #31
 8001c22:	bf48      	it	mi
 8001c24:	f043 0320 	orrmi.w	r3, r3, #32
 8001c28:	6029      	str	r1, [r5, #0]
 8001c2a:	bf48      	it	mi
 8001c2c:	6023      	strmi	r3, [r4, #0]
 8001c2e:	b91e      	cbnz	r6, 8001c38 <_printf_i+0x1a4>
 8001c30:	6823      	ldr	r3, [r4, #0]
 8001c32:	f023 0320 	bic.w	r3, r3, #32
 8001c36:	6023      	str	r3, [r4, #0]
 8001c38:	2310      	movs	r3, #16
 8001c3a:	e7a7      	b.n	8001b8c <_printf_i+0xf8>
 8001c3c:	4824      	ldr	r0, [pc, #144]	; (8001cd0 <_printf_i+0x23c>)
 8001c3e:	e7e4      	b.n	8001c0a <_printf_i+0x176>
 8001c40:	4615      	mov	r5, r2
 8001c42:	e7bd      	b.n	8001bc0 <_printf_i+0x12c>
 8001c44:	682b      	ldr	r3, [r5, #0]
 8001c46:	6826      	ldr	r6, [r4, #0]
 8001c48:	6961      	ldr	r1, [r4, #20]
 8001c4a:	1d18      	adds	r0, r3, #4
 8001c4c:	6028      	str	r0, [r5, #0]
 8001c4e:	0635      	lsls	r5, r6, #24
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	d501      	bpl.n	8001c58 <_printf_i+0x1c4>
 8001c54:	6019      	str	r1, [r3, #0]
 8001c56:	e002      	b.n	8001c5e <_printf_i+0x1ca>
 8001c58:	0670      	lsls	r0, r6, #25
 8001c5a:	d5fb      	bpl.n	8001c54 <_printf_i+0x1c0>
 8001c5c:	8019      	strh	r1, [r3, #0]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	6123      	str	r3, [r4, #16]
 8001c62:	4615      	mov	r5, r2
 8001c64:	e7bc      	b.n	8001be0 <_printf_i+0x14c>
 8001c66:	682b      	ldr	r3, [r5, #0]
 8001c68:	1d1a      	adds	r2, r3, #4
 8001c6a:	602a      	str	r2, [r5, #0]
 8001c6c:	681d      	ldr	r5, [r3, #0]
 8001c6e:	6862      	ldr	r2, [r4, #4]
 8001c70:	2100      	movs	r1, #0
 8001c72:	4628      	mov	r0, r5
 8001c74:	f7fe fac4 	bl	8000200 <memchr>
 8001c78:	b108      	cbz	r0, 8001c7e <_printf_i+0x1ea>
 8001c7a:	1b40      	subs	r0, r0, r5
 8001c7c:	6060      	str	r0, [r4, #4]
 8001c7e:	6863      	ldr	r3, [r4, #4]
 8001c80:	6123      	str	r3, [r4, #16]
 8001c82:	2300      	movs	r3, #0
 8001c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c88:	e7aa      	b.n	8001be0 <_printf_i+0x14c>
 8001c8a:	6923      	ldr	r3, [r4, #16]
 8001c8c:	462a      	mov	r2, r5
 8001c8e:	4649      	mov	r1, r9
 8001c90:	4640      	mov	r0, r8
 8001c92:	47d0      	blx	sl
 8001c94:	3001      	adds	r0, #1
 8001c96:	d0ad      	beq.n	8001bf4 <_printf_i+0x160>
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	079b      	lsls	r3, r3, #30
 8001c9c:	d413      	bmi.n	8001cc6 <_printf_i+0x232>
 8001c9e:	68e0      	ldr	r0, [r4, #12]
 8001ca0:	9b03      	ldr	r3, [sp, #12]
 8001ca2:	4298      	cmp	r0, r3
 8001ca4:	bfb8      	it	lt
 8001ca6:	4618      	movlt	r0, r3
 8001ca8:	e7a6      	b.n	8001bf8 <_printf_i+0x164>
 8001caa:	2301      	movs	r3, #1
 8001cac:	4632      	mov	r2, r6
 8001cae:	4649      	mov	r1, r9
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	47d0      	blx	sl
 8001cb4:	3001      	adds	r0, #1
 8001cb6:	d09d      	beq.n	8001bf4 <_printf_i+0x160>
 8001cb8:	3501      	adds	r5, #1
 8001cba:	68e3      	ldr	r3, [r4, #12]
 8001cbc:	9903      	ldr	r1, [sp, #12]
 8001cbe:	1a5b      	subs	r3, r3, r1
 8001cc0:	42ab      	cmp	r3, r5
 8001cc2:	dcf2      	bgt.n	8001caa <_printf_i+0x216>
 8001cc4:	e7eb      	b.n	8001c9e <_printf_i+0x20a>
 8001cc6:	2500      	movs	r5, #0
 8001cc8:	f104 0619 	add.w	r6, r4, #25
 8001ccc:	e7f5      	b.n	8001cba <_printf_i+0x226>
 8001cce:	bf00      	nop
 8001cd0:	080021f0 	.word	0x080021f0
 8001cd4:	08002201 	.word	0x08002201

08001cd8 <__swbuf_r>:
 8001cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cda:	460e      	mov	r6, r1
 8001cdc:	4614      	mov	r4, r2
 8001cde:	4605      	mov	r5, r0
 8001ce0:	b118      	cbz	r0, 8001cea <__swbuf_r+0x12>
 8001ce2:	6a03      	ldr	r3, [r0, #32]
 8001ce4:	b90b      	cbnz	r3, 8001cea <__swbuf_r+0x12>
 8001ce6:	f7ff f93b 	bl	8000f60 <__sinit>
 8001cea:	69a3      	ldr	r3, [r4, #24]
 8001cec:	60a3      	str	r3, [r4, #8]
 8001cee:	89a3      	ldrh	r3, [r4, #12]
 8001cf0:	071a      	lsls	r2, r3, #28
 8001cf2:	d525      	bpl.n	8001d40 <__swbuf_r+0x68>
 8001cf4:	6923      	ldr	r3, [r4, #16]
 8001cf6:	b31b      	cbz	r3, 8001d40 <__swbuf_r+0x68>
 8001cf8:	6823      	ldr	r3, [r4, #0]
 8001cfa:	6922      	ldr	r2, [r4, #16]
 8001cfc:	1a98      	subs	r0, r3, r2
 8001cfe:	6963      	ldr	r3, [r4, #20]
 8001d00:	b2f6      	uxtb	r6, r6
 8001d02:	4283      	cmp	r3, r0
 8001d04:	4637      	mov	r7, r6
 8001d06:	dc04      	bgt.n	8001d12 <__swbuf_r+0x3a>
 8001d08:	4621      	mov	r1, r4
 8001d0a:	4628      	mov	r0, r5
 8001d0c:	f7ff fbdc 	bl	80014c8 <_fflush_r>
 8001d10:	b9e0      	cbnz	r0, 8001d4c <__swbuf_r+0x74>
 8001d12:	68a3      	ldr	r3, [r4, #8]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	60a3      	str	r3, [r4, #8]
 8001d18:	6823      	ldr	r3, [r4, #0]
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	6022      	str	r2, [r4, #0]
 8001d1e:	701e      	strb	r6, [r3, #0]
 8001d20:	6962      	ldr	r2, [r4, #20]
 8001d22:	1c43      	adds	r3, r0, #1
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d004      	beq.n	8001d32 <__swbuf_r+0x5a>
 8001d28:	89a3      	ldrh	r3, [r4, #12]
 8001d2a:	07db      	lsls	r3, r3, #31
 8001d2c:	d506      	bpl.n	8001d3c <__swbuf_r+0x64>
 8001d2e:	2e0a      	cmp	r6, #10
 8001d30:	d104      	bne.n	8001d3c <__swbuf_r+0x64>
 8001d32:	4621      	mov	r1, r4
 8001d34:	4628      	mov	r0, r5
 8001d36:	f7ff fbc7 	bl	80014c8 <_fflush_r>
 8001d3a:	b938      	cbnz	r0, 8001d4c <__swbuf_r+0x74>
 8001d3c:	4638      	mov	r0, r7
 8001d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d40:	4621      	mov	r1, r4
 8001d42:	4628      	mov	r0, r5
 8001d44:	f000 f806 	bl	8001d54 <__swsetup_r>
 8001d48:	2800      	cmp	r0, #0
 8001d4a:	d0d5      	beq.n	8001cf8 <__swbuf_r+0x20>
 8001d4c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001d50:	e7f4      	b.n	8001d3c <__swbuf_r+0x64>
	...

08001d54 <__swsetup_r>:
 8001d54:	b538      	push	{r3, r4, r5, lr}
 8001d56:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <__swsetup_r+0xac>)
 8001d58:	4605      	mov	r5, r0
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	460c      	mov	r4, r1
 8001d5e:	b118      	cbz	r0, 8001d68 <__swsetup_r+0x14>
 8001d60:	6a03      	ldr	r3, [r0, #32]
 8001d62:	b90b      	cbnz	r3, 8001d68 <__swsetup_r+0x14>
 8001d64:	f7ff f8fc 	bl	8000f60 <__sinit>
 8001d68:	89a3      	ldrh	r3, [r4, #12]
 8001d6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d6e:	0718      	lsls	r0, r3, #28
 8001d70:	d422      	bmi.n	8001db8 <__swsetup_r+0x64>
 8001d72:	06d9      	lsls	r1, r3, #27
 8001d74:	d407      	bmi.n	8001d86 <__swsetup_r+0x32>
 8001d76:	2309      	movs	r3, #9
 8001d78:	602b      	str	r3, [r5, #0]
 8001d7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001d7e:	81a3      	strh	r3, [r4, #12]
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d84:	e034      	b.n	8001df0 <__swsetup_r+0x9c>
 8001d86:	0758      	lsls	r0, r3, #29
 8001d88:	d512      	bpl.n	8001db0 <__swsetup_r+0x5c>
 8001d8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d8c:	b141      	cbz	r1, 8001da0 <__swsetup_r+0x4c>
 8001d8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d92:	4299      	cmp	r1, r3
 8001d94:	d002      	beq.n	8001d9c <__swsetup_r+0x48>
 8001d96:	4628      	mov	r0, r5
 8001d98:	f7ff fc7e 	bl	8001698 <_free_r>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	6363      	str	r3, [r4, #52]	; 0x34
 8001da0:	89a3      	ldrh	r3, [r4, #12]
 8001da2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001da6:	81a3      	strh	r3, [r4, #12]
 8001da8:	2300      	movs	r3, #0
 8001daa:	6063      	str	r3, [r4, #4]
 8001dac:	6923      	ldr	r3, [r4, #16]
 8001dae:	6023      	str	r3, [r4, #0]
 8001db0:	89a3      	ldrh	r3, [r4, #12]
 8001db2:	f043 0308 	orr.w	r3, r3, #8
 8001db6:	81a3      	strh	r3, [r4, #12]
 8001db8:	6923      	ldr	r3, [r4, #16]
 8001dba:	b94b      	cbnz	r3, 8001dd0 <__swsetup_r+0x7c>
 8001dbc:	89a3      	ldrh	r3, [r4, #12]
 8001dbe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc6:	d003      	beq.n	8001dd0 <__swsetup_r+0x7c>
 8001dc8:	4621      	mov	r1, r4
 8001dca:	4628      	mov	r0, r5
 8001dcc:	f000 f840 	bl	8001e50 <__smakebuf_r>
 8001dd0:	89a0      	ldrh	r0, [r4, #12]
 8001dd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001dd6:	f010 0301 	ands.w	r3, r0, #1
 8001dda:	d00a      	beq.n	8001df2 <__swsetup_r+0x9e>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60a3      	str	r3, [r4, #8]
 8001de0:	6963      	ldr	r3, [r4, #20]
 8001de2:	425b      	negs	r3, r3
 8001de4:	61a3      	str	r3, [r4, #24]
 8001de6:	6923      	ldr	r3, [r4, #16]
 8001de8:	b943      	cbnz	r3, 8001dfc <__swsetup_r+0xa8>
 8001dea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001dee:	d1c4      	bne.n	8001d7a <__swsetup_r+0x26>
 8001df0:	bd38      	pop	{r3, r4, r5, pc}
 8001df2:	0781      	lsls	r1, r0, #30
 8001df4:	bf58      	it	pl
 8001df6:	6963      	ldrpl	r3, [r4, #20]
 8001df8:	60a3      	str	r3, [r4, #8]
 8001dfa:	e7f4      	b.n	8001de6 <__swsetup_r+0x92>
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	e7f7      	b.n	8001df0 <__swsetup_r+0x9c>
 8001e00:	2000008c 	.word	0x2000008c

08001e04 <__swhatbuf_r>:
 8001e04:	b570      	push	{r4, r5, r6, lr}
 8001e06:	460c      	mov	r4, r1
 8001e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e0c:	2900      	cmp	r1, #0
 8001e0e:	b096      	sub	sp, #88	; 0x58
 8001e10:	4615      	mov	r5, r2
 8001e12:	461e      	mov	r6, r3
 8001e14:	da0d      	bge.n	8001e32 <__swhatbuf_r+0x2e>
 8001e16:	89a3      	ldrh	r3, [r4, #12]
 8001e18:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001e1c:	f04f 0100 	mov.w	r1, #0
 8001e20:	bf0c      	ite	eq
 8001e22:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001e26:	2340      	movne	r3, #64	; 0x40
 8001e28:	2000      	movs	r0, #0
 8001e2a:	6031      	str	r1, [r6, #0]
 8001e2c:	602b      	str	r3, [r5, #0]
 8001e2e:	b016      	add	sp, #88	; 0x58
 8001e30:	bd70      	pop	{r4, r5, r6, pc}
 8001e32:	466a      	mov	r2, sp
 8001e34:	f000 f848 	bl	8001ec8 <_fstat_r>
 8001e38:	2800      	cmp	r0, #0
 8001e3a:	dbec      	blt.n	8001e16 <__swhatbuf_r+0x12>
 8001e3c:	9901      	ldr	r1, [sp, #4]
 8001e3e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001e42:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001e46:	4259      	negs	r1, r3
 8001e48:	4159      	adcs	r1, r3
 8001e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e4e:	e7eb      	b.n	8001e28 <__swhatbuf_r+0x24>

08001e50 <__smakebuf_r>:
 8001e50:	898b      	ldrh	r3, [r1, #12]
 8001e52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e54:	079d      	lsls	r5, r3, #30
 8001e56:	4606      	mov	r6, r0
 8001e58:	460c      	mov	r4, r1
 8001e5a:	d507      	bpl.n	8001e6c <__smakebuf_r+0x1c>
 8001e5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001e60:	6023      	str	r3, [r4, #0]
 8001e62:	6123      	str	r3, [r4, #16]
 8001e64:	2301      	movs	r3, #1
 8001e66:	6163      	str	r3, [r4, #20]
 8001e68:	b002      	add	sp, #8
 8001e6a:	bd70      	pop	{r4, r5, r6, pc}
 8001e6c:	ab01      	add	r3, sp, #4
 8001e6e:	466a      	mov	r2, sp
 8001e70:	f7ff ffc8 	bl	8001e04 <__swhatbuf_r>
 8001e74:	9900      	ldr	r1, [sp, #0]
 8001e76:	4605      	mov	r5, r0
 8001e78:	4630      	mov	r0, r6
 8001e7a:	f7ff fa1f 	bl	80012bc <_malloc_r>
 8001e7e:	b948      	cbnz	r0, 8001e94 <__smakebuf_r+0x44>
 8001e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e84:	059a      	lsls	r2, r3, #22
 8001e86:	d4ef      	bmi.n	8001e68 <__smakebuf_r+0x18>
 8001e88:	f023 0303 	bic.w	r3, r3, #3
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	81a3      	strh	r3, [r4, #12]
 8001e92:	e7e3      	b.n	8001e5c <__smakebuf_r+0xc>
 8001e94:	89a3      	ldrh	r3, [r4, #12]
 8001e96:	6020      	str	r0, [r4, #0]
 8001e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e9c:	81a3      	strh	r3, [r4, #12]
 8001e9e:	9b00      	ldr	r3, [sp, #0]
 8001ea0:	6163      	str	r3, [r4, #20]
 8001ea2:	9b01      	ldr	r3, [sp, #4]
 8001ea4:	6120      	str	r0, [r4, #16]
 8001ea6:	b15b      	cbz	r3, 8001ec0 <__smakebuf_r+0x70>
 8001ea8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001eac:	4630      	mov	r0, r6
 8001eae:	f000 f81d 	bl	8001eec <_isatty_r>
 8001eb2:	b128      	cbz	r0, 8001ec0 <__smakebuf_r+0x70>
 8001eb4:	89a3      	ldrh	r3, [r4, #12]
 8001eb6:	f023 0303 	bic.w	r3, r3, #3
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	81a3      	strh	r3, [r4, #12]
 8001ec0:	89a3      	ldrh	r3, [r4, #12]
 8001ec2:	431d      	orrs	r5, r3
 8001ec4:	81a5      	strh	r5, [r4, #12]
 8001ec6:	e7cf      	b.n	8001e68 <__smakebuf_r+0x18>

08001ec8 <_fstat_r>:
 8001ec8:	b538      	push	{r3, r4, r5, lr}
 8001eca:	4d07      	ldr	r5, [pc, #28]	; (8001ee8 <_fstat_r+0x20>)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	4604      	mov	r4, r0
 8001ed0:	4608      	mov	r0, r1
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	602b      	str	r3, [r5, #0]
 8001ed6:	f7fe ff2e 	bl	8000d36 <_fstat>
 8001eda:	1c43      	adds	r3, r0, #1
 8001edc:	d102      	bne.n	8001ee4 <_fstat_r+0x1c>
 8001ede:	682b      	ldr	r3, [r5, #0]
 8001ee0:	b103      	cbz	r3, 8001ee4 <_fstat_r+0x1c>
 8001ee2:	6023      	str	r3, [r4, #0]
 8001ee4:	bd38      	pop	{r3, r4, r5, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000036c 	.word	0x2000036c

08001eec <_isatty_r>:
 8001eec:	b538      	push	{r3, r4, r5, lr}
 8001eee:	4d06      	ldr	r5, [pc, #24]	; (8001f08 <_isatty_r+0x1c>)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	4604      	mov	r4, r0
 8001ef4:	4608      	mov	r0, r1
 8001ef6:	602b      	str	r3, [r5, #0]
 8001ef8:	f7fe ff2d 	bl	8000d56 <_isatty>
 8001efc:	1c43      	adds	r3, r0, #1
 8001efe:	d102      	bne.n	8001f06 <_isatty_r+0x1a>
 8001f00:	682b      	ldr	r3, [r5, #0]
 8001f02:	b103      	cbz	r3, 8001f06 <_isatty_r+0x1a>
 8001f04:	6023      	str	r3, [r4, #0]
 8001f06:	bd38      	pop	{r3, r4, r5, pc}
 8001f08:	2000036c 	.word	0x2000036c

08001f0c <_raise_r>:
 8001f0c:	291f      	cmp	r1, #31
 8001f0e:	b538      	push	{r3, r4, r5, lr}
 8001f10:	4604      	mov	r4, r0
 8001f12:	460d      	mov	r5, r1
 8001f14:	d904      	bls.n	8001f20 <_raise_r+0x14>
 8001f16:	2316      	movs	r3, #22
 8001f18:	6003      	str	r3, [r0, #0]
 8001f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f1e:	bd38      	pop	{r3, r4, r5, pc}
 8001f20:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001f22:	b112      	cbz	r2, 8001f2a <_raise_r+0x1e>
 8001f24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001f28:	b94b      	cbnz	r3, 8001f3e <_raise_r+0x32>
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	f000 f830 	bl	8001f90 <_getpid_r>
 8001f30:	462a      	mov	r2, r5
 8001f32:	4601      	mov	r1, r0
 8001f34:	4620      	mov	r0, r4
 8001f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f3a:	f000 b817 	b.w	8001f6c <_kill_r>
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d00a      	beq.n	8001f58 <_raise_r+0x4c>
 8001f42:	1c59      	adds	r1, r3, #1
 8001f44:	d103      	bne.n	8001f4e <_raise_r+0x42>
 8001f46:	2316      	movs	r3, #22
 8001f48:	6003      	str	r3, [r0, #0]
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	e7e7      	b.n	8001f1e <_raise_r+0x12>
 8001f4e:	2400      	movs	r4, #0
 8001f50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001f54:	4628      	mov	r0, r5
 8001f56:	4798      	blx	r3
 8001f58:	2000      	movs	r0, #0
 8001f5a:	e7e0      	b.n	8001f1e <_raise_r+0x12>

08001f5c <raise>:
 8001f5c:	4b02      	ldr	r3, [pc, #8]	; (8001f68 <raise+0xc>)
 8001f5e:	4601      	mov	r1, r0
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	f7ff bfd3 	b.w	8001f0c <_raise_r>
 8001f66:	bf00      	nop
 8001f68:	2000008c 	.word	0x2000008c

08001f6c <_kill_r>:
 8001f6c:	b538      	push	{r3, r4, r5, lr}
 8001f6e:	4d07      	ldr	r5, [pc, #28]	; (8001f8c <_kill_r+0x20>)
 8001f70:	2300      	movs	r3, #0
 8001f72:	4604      	mov	r4, r0
 8001f74:	4608      	mov	r0, r1
 8001f76:	4611      	mov	r1, r2
 8001f78:	602b      	str	r3, [r5, #0]
 8001f7a:	f7fe fe7d 	bl	8000c78 <_kill>
 8001f7e:	1c43      	adds	r3, r0, #1
 8001f80:	d102      	bne.n	8001f88 <_kill_r+0x1c>
 8001f82:	682b      	ldr	r3, [r5, #0]
 8001f84:	b103      	cbz	r3, 8001f88 <_kill_r+0x1c>
 8001f86:	6023      	str	r3, [r4, #0]
 8001f88:	bd38      	pop	{r3, r4, r5, pc}
 8001f8a:	bf00      	nop
 8001f8c:	2000036c 	.word	0x2000036c

08001f90 <_getpid_r>:
 8001f90:	f7fe be6a 	b.w	8000c68 <_getpid>

08001f94 <_init>:
 8001f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f96:	bf00      	nop
 8001f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f9a:	bc08      	pop	{r3}
 8001f9c:	469e      	mov	lr, r3
 8001f9e:	4770      	bx	lr

08001fa0 <_fini>:
 8001fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa2:	bf00      	nop
 8001fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fa6:	bc08      	pop	{r3}
 8001fa8:	469e      	mov	lr, r3
 8001faa:	4770      	bx	lr
