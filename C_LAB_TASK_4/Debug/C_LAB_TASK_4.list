
C_LAB_TASK_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08001bf0  08001bf0  00011bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001df0  08001df0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08001df0  08001df0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001df0  08001df0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001df0  08001df0  00011df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001df4  08001df4  00011df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08001df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00000284  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000308  20000308  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001caa  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000980  00000000  00000000  00021da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001f8  00000000  00000000  00022728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000156  00000000  00000000  00022920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00017123  00000000  00000000  00022a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002e9a  00000000  00000000  00039b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00078539  00000000  00000000  0003ca33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000104c  00000000  00000000  000b4f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  000b5fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001bd8 	.word	0x08001bd8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08001bd8 	.word	0x08001bd8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <message_handler>:
	0,
	0,
	0,
};

void message_handler(uint8_t* instruction, uint8_t *action){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	// still operating in interrupt
	if (!strcmp(instruction, "led")) {
 80002aa:	491c      	ldr	r1, [pc, #112]	; (800031c <message_handler+0x7c>)
 80002ac:	6878      	ldr	r0, [r7, #4]
 80002ae:	f7ff ff97 	bl	80001e0 <strcmp>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d105      	bne.n	80002c4 <message_handler+0x24>
		flags.led_flag = 1;
 80002b8:	4b19      	ldr	r3, [pc, #100]	; (8000320 <message_handler+0x80>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	601a      	str	r2, [r3, #0]
		flags.led_action = action;
 80002be:	4a18      	ldr	r2, [pc, #96]	; (8000320 <message_handler+0x80>)
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	6053      	str	r3, [r2, #4]
	}
	if (!strcmp(instruction, "serial")) {
 80002c4:	4917      	ldr	r1, [pc, #92]	; (8000324 <message_handler+0x84>)
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	f7ff ff8a 	bl	80001e0 <strcmp>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d105      	bne.n	80002de <message_handler+0x3e>
		flags.serial_flag = 1;
 80002d2:	4b13      	ldr	r3, [pc, #76]	; (8000320 <message_handler+0x80>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	609a      	str	r2, [r3, #8]
		flags.serial_action = action;
 80002d8:	4a11      	ldr	r2, [pc, #68]	; (8000320 <message_handler+0x80>)
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	60d3      	str	r3, [r2, #12]
	}
	if (!strcmp(instruction, "oneshot")) {
 80002de:	4912      	ldr	r1, [pc, #72]	; (8000328 <message_handler+0x88>)
 80002e0:	6878      	ldr	r0, [r7, #4]
 80002e2:	f7ff ff7d 	bl	80001e0 <strcmp>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d105      	bne.n	80002f8 <message_handler+0x58>
		flags.oneshot_flag = 1;
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <message_handler+0x80>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	611a      	str	r2, [r3, #16]
		flags.oneshot_action = action;
 80002f2:	4a0b      	ldr	r2, [pc, #44]	; (8000320 <message_handler+0x80>)
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	6153      	str	r3, [r2, #20]
	}
	if (!strcmp(instruction, "timer")) {
 80002f8:	490c      	ldr	r1, [pc, #48]	; (800032c <message_handler+0x8c>)
 80002fa:	6878      	ldr	r0, [r7, #4]
 80002fc:	f7ff ff70 	bl	80001e0 <strcmp>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d105      	bne.n	8000312 <message_handler+0x72>
		flags.timer_flag = 1;
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <message_handler+0x80>)
 8000308:	2201      	movs	r2, #1
 800030a:	619a      	str	r2, [r3, #24]
		flags.timer_action = action;
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <message_handler+0x80>)
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	61d3      	str	r3, [r2, #28]
	}
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	08001bf0 	.word	0x08001bf0
 8000320:	200000a0 	.word	0x200000a0
 8000324:	08001bf4 	.word	0x08001bf4
 8000328:	08001bfc 	.word	0x08001bfc
 800032c:	08001c04 	.word	0x08001c04

08000330 <flag_handler>:

void flag_handler(){
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	// not operating in interrupt
	// action based on flag, needs to reset flag after action complete
	if (flags.led_flag){
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <flag_handler+0x70>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d007      	beq.n	800034c <flag_handler+0x1c>
		// set LED bits
//		SerialOutputString(flags.led_action, &USART1_PORT);
		modify_led(flags.led_action);
 800033c:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <flag_handler+0x70>)
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	4618      	mov	r0, r3
 8000342:	f000 f88d 	bl	8000460 <modify_led>
		flags.led_flag = 0;
 8000346:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <flag_handler+0x70>)
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
	}
	if (flags.serial_flag){
 800034c:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <flag_handler+0x70>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <flag_handler+0x36>
		// send output message
		SerialOutputString(flags.serial_action, &USART1_PORT);
 8000354:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <flag_handler+0x70>)
 8000356:	68db      	ldr	r3, [r3, #12]
 8000358:	4912      	ldr	r1, [pc, #72]	; (80003a4 <flag_handler+0x74>)
 800035a:	4618      	mov	r0, r3
 800035c:	f000 fa43 	bl	80007e6 <SerialOutputString>
		flags.serial_flag = 0;
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <flag_handler+0x70>)
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
	}
	if (flags.oneshot_flag){
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <flag_handler+0x70>)
 8000368:	691b      	ldr	r3, [r3, #16]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d008      	beq.n	8000380 <flag_handler+0x50>
		// start a oneshot timer with set period
		SerialOutputString(flags.oneshot_action, &USART1_PORT);
 800036e:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <flag_handler+0x70>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	490c      	ldr	r1, [pc, #48]	; (80003a4 <flag_handler+0x74>)
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fa36 	bl	80007e6 <SerialOutputString>
		flags.oneshot_flag = 0;
 800037a:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <flag_handler+0x70>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
	}
	if (flags.timer_flag){
 8000380:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <flag_handler+0x70>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d008      	beq.n	800039a <flag_handler+0x6a>
		// start a repeated timer with set period
		SerialOutputString(flags.timer_action, &USART1_PORT);
 8000388:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <flag_handler+0x70>)
 800038a:	69db      	ldr	r3, [r3, #28]
 800038c:	4905      	ldr	r1, [pc, #20]	; (80003a4 <flag_handler+0x74>)
 800038e:	4618      	mov	r0, r3
 8000390:	f000 fa29 	bl	80007e6 <SerialOutputString>
		flags.timer_flag = 0;
 8000394:	4b02      	ldr	r3, [pc, #8]	; (80003a0 <flag_handler+0x70>)
 8000396:	2200      	movs	r2, #0
 8000398:	619a      	str	r2, [r3, #24]
	}
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	200000a0 	.word	0x200000a0
 80003a4:	20000000 	.word	0x20000000

080003a8 <enable_clocks>:
#include "initialisation.h"

void enable_clocks()
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <enable_clocks+0x28>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4a07      	ldr	r2, [pc, #28]	; (80003d0 <enable_clocks+0x28>)
 80003b2:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 80003b6:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <enable_clocks+0x28>)
 80003ba:	69db      	ldr	r3, [r3, #28]
 80003bc:	4a04      	ldr	r2, [pc, #16]	; (80003d0 <enable_clocks+0x28>)
 80003be:	f043 0301 	orr.w	r3, r3, #1
 80003c2:	61d3      	str	r3, [r2, #28]
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000

080003d4 <initialise_board>:

//initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board()
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80003da:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <initialise_board+0x20>)
 80003dc:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	f245 5255 	movw	r2, #21845	; 0x5555
 80003e4:	801a      	strh	r2, [r3, #0]
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	48001002 	.word	0x48001002

080003f8 <get_current_led>:
#include "led.h"
#include "serial.h"
#include <stdlib.h>

void get_current_led(uint8_t *bitmask)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	*bitmask = *(((uint8_t*)&(GPIOE->ODR)) + 1);
 8000400:	4b04      	ldr	r3, [pc, #16]	; (8000414 <get_current_led+0x1c>)
 8000402:	781a      	ldrb	r2, [r3, #0]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	701a      	strb	r2, [r3, #0]
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	48001015 	.word	0x48001015

08000418 <store_led>:

void store_led(uint8_t bitmask)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000422:	4b05      	ldr	r3, [pc, #20]	; (8000438 <store_led+0x20>)
 8000424:	60fb      	str	r3, [r7, #12]

	*led_register = bitmask;
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	79fa      	ldrb	r2, [r7, #7]
 800042a:	701a      	strb	r2, [r3, #0]
}
 800042c:	bf00      	nop
 800042e:	3714      	adds	r7, #20
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr
 8000438:	48001015 	.word	0x48001015

0800043c <str_to_bin>:

uint8_t str_to_bin(uint8_t* original){
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	char* ptr;

	uint8_t target = strtol(original, &ptr, 2);
 8000444:	f107 0308 	add.w	r3, r7, #8
 8000448:	2202      	movs	r2, #2
 800044a:	4619      	mov	r1, r3
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f000 fc43 	bl	8000cd8 <strtol>
 8000452:	4603      	mov	r3, r0
 8000454:	73fb      	strb	r3, [r7, #15]
	return(target);
 8000456:	7bfb      	ldrb	r3, [r7, #15]

}
 8000458:	4618      	mov	r0, r3
 800045a:	3710      	adds	r7, #16
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <modify_led>:

void modify_led(uint8_t *input)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	//variable for storing bitmask
	uint8_t temp[MASK_LENGTH] = {0};
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	2300      	movs	r3, #0
 800046e:	613b      	str	r3, [r7, #16]
	uint8_t new_mask = 0b00000000;
 8000470:	2300      	movs	r3, #0
 8000472:	75fb      	strb	r3, [r7, #23]
	uint8_t bitmask;

	// remove trailing /r/n previously added for printability
	strncpy(temp, input, MASK_LENGTH);
 8000474:	f107 030c 	add.w	r3, r7, #12
 8000478:	2208      	movs	r2, #8
 800047a:	6879      	ldr	r1, [r7, #4]
 800047c:	4618      	mov	r0, r3
 800047e:	f000 fc53 	bl	8000d28 <strncpy>

	// convert uint8_t array of chars into singular char
	new_mask = str_to_bin(temp);
 8000482:	f107 030c 	add.w	r3, r7, #12
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ffd8 	bl	800043c <str_to_bin>
 800048c:	4603      	mov	r3, r0
 800048e:	75fb      	strb	r3, [r7, #23]

	//get the current bitmask for led
	get_current_led(&bitmask);
 8000490:	f107 030b 	add.w	r3, r7, #11
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff ffaf 	bl	80003f8 <get_current_led>

	//if the leds all on, resets everything
	bitmask = new_mask;
 800049a:	7dfb      	ldrb	r3, [r7, #23]
 800049c:	72fb      	strb	r3, [r7, #11]

	//store led bitmask back
	store_led(bitmask);
 800049e:	7afb      	ldrb	r3, [r7, #11]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ffb9 	bl	8000418 <store_led>

}
 80004a6:	bf00      	nop
 80004a8:	3718      	adds	r7, #24
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
	...

080004b0 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	enable_clocks();
 80004b4:	f7ff ff78 	bl	80003a8 <enable_clocks>
	initialise_board();
 80004b8:	f7ff ff8c 	bl	80003d4 <initialise_board>

	SerialInitialise(BAUD_115200, &USART1_PORT, &USART_callback);
 80004bc:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <main+0x24>)
 80004be:	4906      	ldr	r1, [pc, #24]	; (80004d8 <main+0x28>)
 80004c0:	2004      	movs	r0, #4
 80004c2:	f000 f853 	bl	800056c <SerialInitialise>
	enable_uart_interrupt(&USART1_PORT);
 80004c6:	4804      	ldr	r0, [pc, #16]	; (80004d8 <main+0x28>)
 80004c8:	f000 f93c 	bl	8000744 <enable_uart_interrupt>

	/* Loop forever */
	for(;;) {
		flag_handler();
 80004cc:	f7ff ff30 	bl	8000330 <flag_handler>
 80004d0:	e7fc      	b.n	80004cc <main+0x1c>
 80004d2:	bf00      	nop
 80004d4:	08000821 	.word	0x08000821
 80004d8:	20000000 	.word	0x20000000

080004dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	db0b      	blt.n	8000506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	f003 021f 	and.w	r2, r3, #31
 80004f4:	4907      	ldr	r1, [pc, #28]	; (8000514 <__NVIC_EnableIRQ+0x38>)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	095b      	lsrs	r3, r3, #5
 80004fc:	2001      	movs	r0, #1
 80004fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	e000e100 	.word	0xe000e100

08000518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	6039      	str	r1, [r7, #0]
 8000522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000528:	2b00      	cmp	r3, #0
 800052a:	db0a      	blt.n	8000542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	b2da      	uxtb	r2, r3
 8000530:	490c      	ldr	r1, [pc, #48]	; (8000564 <__NVIC_SetPriority+0x4c>)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	0112      	lsls	r2, r2, #4
 8000538:	b2d2      	uxtb	r2, r2
 800053a:	440b      	add	r3, r1
 800053c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000540:	e00a      	b.n	8000558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4908      	ldr	r1, [pc, #32]	; (8000568 <__NVIC_SetPriority+0x50>)
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	f003 030f 	and.w	r3, r3, #15
 800054e:	3b04      	subs	r3, #4
 8000550:	0112      	lsls	r2, r2, #4
 8000552:	b2d2      	uxtb	r2, r2
 8000554:	440b      	add	r3, r1
 8000556:	761a      	strb	r2, [r3, #24]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	e000e100 	.word	0xe000e100
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <SerialInitialise>:
		0x00 // default function pointer is NULL
		};

// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 800056c:	b480      	push	{r7}
 800056e:	b087      	sub	sp, #28
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	625a      	str	r2, [r3, #36]	; 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800057e:	4b39      	ldr	r3, [pc, #228]	; (8000664 <SerialInitialise+0xf8>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a38      	ldr	r2, [pc, #224]	; (8000664 <SerialInitialise+0xf8>)
 8000584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000588:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800058a:	4b36      	ldr	r3, [pc, #216]	; (8000664 <SerialInitialise+0xf8>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a35      	ldr	r2, [pc, #212]	; (8000664 <SerialInitialise+0xf8>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	691a      	ldr	r2, [r3, #16]
 800059a:	4b32      	ldr	r3, [pc, #200]	; (8000664 <SerialInitialise+0xf8>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4931      	ldr	r1, [pc, #196]	; (8000664 <SerialInitialise+0xf8>)
 80005a0:	4313      	orrs	r3, r2
 80005a2:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	68ba      	ldr	r2, [r7, #8]
 80005aa:	6952      	ldr	r2, [r2, #20]
 80005ac:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	6992      	ldr	r2, [r2, #24]
 80005b6:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	69d9      	ldr	r1, [r3, #28]
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	6a1a      	ldr	r2, [r3, #32]
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	430a      	orrs	r2, r1
 80005c8:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	6a19      	ldr	r1, [r3, #32]
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	430a      	orrs	r2, r1
 80005da:	625a      	str	r2, [r3, #36]	; 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	68da      	ldr	r2, [r3, #12]
 80005e0:	4b20      	ldr	r3, [pc, #128]	; (8000664 <SerialInitialise+0xf8>)
 80005e2:	69db      	ldr	r3, [r3, #28]
 80005e4:	491f      	ldr	r1, [pc, #124]	; (8000664 <SerialInitialise+0xf8>)
 80005e6:	4313      	orrs	r3, r2
 80005e8:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	689a      	ldr	r2, [r3, #8]
 80005ee:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <SerialInitialise+0xf8>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	491c      	ldr	r1, [pc, #112]	; (8000664 <SerialInitialise+0xf8>)
 80005f4:	4313      	orrs	r3, r2
 80005f6:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	330c      	adds	r3, #12
 80005fe:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2b04      	cmp	r3, #4
 8000604:	d820      	bhi.n	8000648 <SerialInitialise+0xdc>
 8000606:	a201      	add	r2, pc, #4	; (adr r2, 800060c <SerialInitialise+0xa0>)
 8000608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060c:	08000621 	.word	0x08000621
 8000610:	08000629 	.word	0x08000629
 8000614:	08000631 	.word	0x08000631
 8000618:	08000639 	.word	0x08000639
 800061c:	08000641 	.word	0x08000641
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	2246      	movs	r2, #70	; 0x46
 8000624:	801a      	strh	r2, [r3, #0]
		break;
 8000626:	e00f      	b.n	8000648 <SerialInitialise+0xdc>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	2246      	movs	r2, #70	; 0x46
 800062c:	801a      	strh	r2, [r3, #0]
		break;
 800062e:	e00b      	b.n	8000648 <SerialInitialise+0xdc>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	2246      	movs	r2, #70	; 0x46
 8000634:	801a      	strh	r2, [r3, #0]
		break;
 8000636:	e007      	b.n	8000648 <SerialInitialise+0xdc>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	2246      	movs	r2, #70	; 0x46
 800063c:	801a      	strh	r2, [r3, #0]
		break;
 800063e:	e003      	b.n	8000648 <SerialInitialise+0xdc>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	2246      	movs	r2, #70	; 0x46
 8000644:	801a      	strh	r2, [r3, #0]
		break;
 8000646:	bf00      	nop
	}

	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f042 020d 	orr.w	r2, r2, #13
 8000656:	601a      	str	r2, [r3, #0]
}
 8000658:	bf00      	nop
 800065a:	371c      	adds	r7, #28
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	40021000 	.word	0x40021000

08000668 <getChar>:
uint8_t *action;
int i = 0;

void (*on_key_input)() = 0x00;

void getChar(SerialPort *serial_port, uint8_t* buffer, uint8_t* last_word, int* i) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
 8000674:	603b      	str	r3, [r7, #0]
	// gets the current count in the word
	uint8_t x = *i;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	74fb      	strb	r3, [r7, #19]
	// checks the flags of the input port - clears them if raised
	if ((serial_port->UART->ISR & USART_ISR_ORE) != 0 || (serial_port->UART->ISR & USART_ISR_FE) != 0){
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	f003 0308 	and.w	r3, r3, #8
 8000686:	2b00      	cmp	r3, #0
 8000688:	d106      	bne.n	8000698 <getChar+0x30>
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	69db      	ldr	r3, [r3, #28]
 8000690:	f003 0302 	and.w	r3, r3, #2
 8000694:	2b00      	cmp	r3, #0
 8000696:	d00f      	beq.n	80006b8 <getChar+0x50>
		serial_port->UART->ICR |= USART_ICR_ORECF;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	6a1a      	ldr	r2, [r3, #32]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f042 0208 	orr.w	r2, r2, #8
 80006a6:	621a      	str	r2, [r3, #32]
		serial_port->UART->ICR |= USART_ICR_FECF;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	6a1a      	ldr	r2, [r3, #32]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f042 0202 	orr.w	r2, r2, #2
 80006b6:	621a      	str	r2, [r3, #32]
	}
	// if the receive not empty flag is not 0 i.e. there is a character ready to be received
	if ((serial_port->UART->ISR & USART_ISR_RXNE) != 0){
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	f003 0320 	and.w	r3, r3, #32
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d038      	beq.n	8000738 <getChar+0xd0>
		// get the value from the Read Data Register (RDR)
		buffer[x] = serial_port->UART->RDR;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80006cc:	b299      	uxth	r1, r3
 80006ce:	7cfb      	ldrb	r3, [r7, #19]
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	4413      	add	r3, r2
 80006d4:	b2ca      	uxtb	r2, r1
 80006d6:	701a      	strb	r2, [r3, #0]
		// increment the counter for the position in the word
		*i += 1;
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	601a      	str	r2, [r3, #0]
		if (buffer[x] == TERMINATION_CHAR) {
 80006e2:	7cfb      	ldrb	r3, [r7, #19]
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b0d      	cmp	r3, #13
 80006ec:	d124      	bne.n	8000738 <getChar+0xd0>
			// add a newline to the buffer for better output aesthetic
			buffer[x+1] = NEWLINE_CHAR;
 80006ee:	7cfb      	ldrb	r3, [r7, #19]
 80006f0:	3301      	adds	r3, #1
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	4413      	add	r3, r2
 80006f6:	220a      	movs	r2, #10
 80006f8:	701a      	strb	r2, [r3, #0]
			// can be removed - demonstrate double buffer
			SerialOutputString(buffer, &USART1_PORT);
 80006fa:	4911      	ldr	r1, [pc, #68]	; (8000740 <getChar+0xd8>)
 80006fc:	68b8      	ldr	r0, [r7, #8]
 80006fe:	f000 f872 	bl	80007e6 <SerialOutputString>
//			SerialOutputString(last_word, &USART1_PORT);
			// any additional handling should go here - before buffer is cleared

			serial_port->completion_function(buffer);
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	4610      	mov	r0, r2
 800070a:	4798      	blx	r3

			// copy word to previous word and then clear current buffer
			strncpy(last_word, buffer, BUFFER_SIZE);
 800070c:	221e      	movs	r2, #30
 800070e:	68b9      	ldr	r1, [r7, #8]
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f000 fb09 	bl	8000d28 <strncpy>
			for (int j = 0; j < BUFFER_SIZE; j++){
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	e007      	b.n	800072c <getChar+0xc4>
				buffer[j] = 0;
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	4413      	add	r3, r2
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < BUFFER_SIZE; j++){
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	3301      	adds	r3, #1
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	2b1d      	cmp	r3, #29
 8000730:	ddf4      	ble.n	800071c <getChar+0xb4>
			}
			// reset the counter to 0
			*i = 0;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]

		}
	}
}
 8000738:	bf00      	nop
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000000 	.word	0x20000000

08000744 <enable_uart_interrupt>:
void enable_uart_interrupt(SerialPort *serial_port){
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
	__disable_irq();

	// enable the read data not empty interrupt enable bit in the control register
	serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f042 0220 	orr.w	r2, r2, #32
 800075e:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(USART1_IRQn, 1);
 8000760:	2101      	movs	r1, #1
 8000762:	2025      	movs	r0, #37	; 0x25
 8000764:	f7ff fed8 	bl	8000518 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8000768:	2025      	movs	r0, #37	; 0x25
 800076a:	f7ff feb7 	bl	80004dc <__NVIC_EnableIRQ>

	// set the interrupt function
	on_key_input = &getChar;
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <enable_uart_interrupt+0x3c>)
 8000770:	4a04      	ldr	r2, [pc, #16]	; (8000784 <enable_uart_interrupt+0x40>)
 8000772:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000774:	b662      	cpsie	i
}
 8000776:	bf00      	nop

	__enable_irq();
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200001b4 	.word	0x200001b4
 8000784:	08000669 	.word	0x08000669

08000788 <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler(){
 8000788:	b598      	push	{r3, r4, r7, lr}
 800078a:	af00      	add	r7, sp, #0
	// should receive a character and store it in a buffer then return
	on_key_input(&USART1_PORT, buffer, last_word, &i);
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <USART1_EXTI25_IRQHandler+0x18>)
 800078e:	681c      	ldr	r4, [r3, #0]
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <USART1_EXTI25_IRQHandler+0x1c>)
 8000792:	4a05      	ldr	r2, [pc, #20]	; (80007a8 <USART1_EXTI25_IRQHandler+0x20>)
 8000794:	4905      	ldr	r1, [pc, #20]	; (80007ac <USART1_EXTI25_IRQHandler+0x24>)
 8000796:	4806      	ldr	r0, [pc, #24]	; (80007b0 <USART1_EXTI25_IRQHandler+0x28>)
 8000798:	47a0      	blx	r4
}
 800079a:	bf00      	nop
 800079c:	bd98      	pop	{r3, r4, r7, pc}
 800079e:	bf00      	nop
 80007a0:	200001b4 	.word	0x200001b4
 80007a4:	200001b0 	.word	0x200001b0
 80007a8:	20000138 	.word	0x20000138
 80007ac:	200000c0 	.word	0x200000c0
 80007b0:	20000000 	.word	0x20000000

080007b4 <SerialOutputChar>:
||------------------||
||	  UART Output	||
||------------------||
*/

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	6039      	str	r1, [r7, #0]
 80007be:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 80007c0:	bf00      	nop
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	69db      	ldr	r3, [r3, #28]
 80007c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d0f8      	beq.n	80007c2 <SerialOutputChar+0xe>
	}
	serial_port->UART->TDR = data;
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	79fa      	ldrb	r2, [r7, #7]
 80007d6:	b292      	uxth	r2, r2
 80007d8:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <SerialOutputString>:


void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b084      	sub	sp, #16
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	6039      	str	r1, [r7, #0]
	uint32_t counter = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 80007f4:	e00b      	b.n	800080e <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	6839      	ldr	r1, [r7, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ffd9 	bl	80007b4 <SerialOutputChar>
		counter++;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	3301      	adds	r3, #1
 8000806:	60fb      	str	r3, [r7, #12]
		pt++;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3301      	adds	r3, #1
 800080c:	607b      	str	r3, [r7, #4]
	while(*pt) {
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1ef      	bne.n	80007f6 <SerialOutputString+0x10>
	}
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <USART_callback>:
||------------------------------||
||	  UART Completion Function	||
||------------------------------||
*/

void USART_callback(uint8_t *string) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b0a4      	sub	sp, #144	; 0x90
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
// This function will be called after a transmission is complete
	// use a temporary var to avoid original buffer from being modified
	uint8_t *temp[BUFFER_SIZE] = {0};
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	2278      	movs	r2, #120	; 0x78
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fae9 	bl	8000e08 <memset>
	uint8_t *instructions[2] = {0};
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
	int i = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	strncpy(temp, string, BUFFER_SIZE);
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	221e      	movs	r2, #30
 800084c:	6879      	ldr	r1, [r7, #4]
 800084e:	4618      	mov	r0, r3
 8000850:	f000 fa6a 	bl	8000d28 <strncpy>

	uint8_t *token = strtok(temp, " ");
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	4913      	ldr	r1, [pc, #76]	; (80008a8 <USART_callback+0x88>)
 800085a:	4618      	mov	r0, r3
 800085c:	f000 fa78 	bl	8000d50 <strtok>
 8000860:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	while (token != NULL) {
 8000864:	e011      	b.n	800088a <USART_callback+0x6a>
		instructions[i++] = token;
 8000866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	3390      	adds	r3, #144	; 0x90
 8000874:	443b      	add	r3, r7
 8000876:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800087a:	f843 2c88 	str.w	r2, [r3, #-136]
		token = strtok(NULL, " ");
 800087e:	490a      	ldr	r1, [pc, #40]	; (80008a8 <USART_callback+0x88>)
 8000880:	2000      	movs	r0, #0
 8000882:	f000 fa65 	bl	8000d50 <strtok>
 8000886:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	while (token != NULL) {
 800088a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800088e:	2b00      	cmp	r3, #0
 8000890:	d1e9      	bne.n	8000866 <USART_callback+0x46>
	}

	message_handler(instructions[0], instructions[1]);
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	68fa      	ldr	r2, [r7, #12]
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fd01 	bl	80002a0 <message_handler>
}
 800089e:	bf00      	nop
 80008a0:	3790      	adds	r7, #144	; 0x90
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	08001c0c 	.word	0x08001c0c

080008ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return 1;
 80008b0:	2301      	movs	r3, #1
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <_kill>:

int _kill(int pid, int sig)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80008c6:	f000 faa7 	bl	8000e18 <__errno>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2216      	movs	r2, #22
 80008ce:	601a      	str	r2, [r3, #0]
  return -1;
 80008d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <_exit>:

void _exit (int status)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80008e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff ffe7 	bl	80008bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80008ee:	e7fe      	b.n	80008ee <_exit+0x12>

080008f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	e00a      	b.n	8000918 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000902:	f3af 8000 	nop.w
 8000906:	4601      	mov	r1, r0
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	60ba      	str	r2, [r7, #8]
 800090e:	b2ca      	uxtb	r2, r1
 8000910:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	3301      	adds	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697a      	ldr	r2, [r7, #20]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	429a      	cmp	r2, r3
 800091e:	dbf0      	blt.n	8000902 <_read+0x12>
  }

  return len;
 8000920:	687b      	ldr	r3, [r7, #4]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b086      	sub	sp, #24
 800092e:	af00      	add	r7, sp, #0
 8000930:	60f8      	str	r0, [r7, #12]
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	e009      	b.n	8000950 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	1c5a      	adds	r2, r3, #1
 8000940:	60ba      	str	r2, [r7, #8]
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	3301      	adds	r3, #1
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697a      	ldr	r2, [r7, #20]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	429a      	cmp	r2, r3
 8000956:	dbf1      	blt.n	800093c <_write+0x12>
  }
  return len;
 8000958:	687b      	ldr	r3, [r7, #4]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <_close>:

int _close(int file)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800096a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800098a:	605a      	str	r2, [r3, #4]
  return 0;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <_isatty>:

int _isatty(int file)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
	...

080009cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d4:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <_sbrk+0x5c>)
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <_sbrk+0x60>)
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <_sbrk+0x64>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d102      	bne.n	80009ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <_sbrk+0x64>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <_sbrk+0x68>)
 80009ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <_sbrk+0x64>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d207      	bcs.n	8000a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009fc:	f000 fa0c 	bl	8000e18 <__errno>
 8000a00:	4603      	mov	r3, r0
 8000a02:	220c      	movs	r2, #12
 8000a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a0a:	e009      	b.n	8000a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <_sbrk+0x64>)
 8000a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2000a000 	.word	0x2000a000
 8000a2c:	00000400 	.word	0x00000400
 8000a30:	200001b8 	.word	0x200001b8
 8000a34:	20000308 	.word	0x20000308

08000a38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a3a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a3c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a42:	490d      	ldr	r1, [pc, #52]	; (8000a78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a44:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <LoopForever+0xe>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a58:	4c0a      	ldr	r4, [pc, #40]	; (8000a84 <LoopForever+0x16>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a66:	f000 f9dd 	bl	8000e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a6a:	f7ff fd21 	bl	80004b0 <main>

08000a6e <LoopForever>:

LoopForever:
  b LoopForever
 8000a6e:	e7fe      	b.n	8000a6e <LoopForever>
  ldr   r0, =_estack
 8000a70:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000a7c:	08001df8 	.word	0x08001df8
  ldr r2, =_sbss
 8000a80:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000a84:	20000308 	.word	0x20000308

08000a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_2_IRQHandler>
	...

08000a8c <std>:
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	b510      	push	{r4, lr}
 8000a90:	4604      	mov	r4, r0
 8000a92:	e9c0 3300 	strd	r3, r3, [r0]
 8000a96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a9a:	6083      	str	r3, [r0, #8]
 8000a9c:	8181      	strh	r1, [r0, #12]
 8000a9e:	6643      	str	r3, [r0, #100]	; 0x64
 8000aa0:	81c2      	strh	r2, [r0, #14]
 8000aa2:	6183      	str	r3, [r0, #24]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	2208      	movs	r2, #8
 8000aa8:	305c      	adds	r0, #92	; 0x5c
 8000aaa:	f000 f9ad 	bl	8000e08 <memset>
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <std+0x58>)
 8000ab0:	6263      	str	r3, [r4, #36]	; 0x24
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <std+0x5c>)
 8000ab4:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <std+0x60>)
 8000ab8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <std+0x64>)
 8000abc:	6323      	str	r3, [r4, #48]	; 0x30
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <std+0x68>)
 8000ac0:	6224      	str	r4, [r4, #32]
 8000ac2:	429c      	cmp	r4, r3
 8000ac4:	d006      	beq.n	8000ad4 <std+0x48>
 8000ac6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000aca:	4294      	cmp	r4, r2
 8000acc:	d002      	beq.n	8000ad4 <std+0x48>
 8000ace:	33d0      	adds	r3, #208	; 0xd0
 8000ad0:	429c      	cmp	r4, r3
 8000ad2:	d105      	bne.n	8000ae0 <std+0x54>
 8000ad4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000adc:	f000 b9c6 	b.w	8000e6c <__retarget_lock_init_recursive>
 8000ae0:	bd10      	pop	{r4, pc}
 8000ae2:	bf00      	nop
 8000ae4:	08001175 	.word	0x08001175
 8000ae8:	08001197 	.word	0x08001197
 8000aec:	080011cf 	.word	0x080011cf
 8000af0:	080011f3 	.word	0x080011f3
 8000af4:	200001bc 	.word	0x200001bc

08000af8 <stdio_exit_handler>:
 8000af8:	4a02      	ldr	r2, [pc, #8]	; (8000b04 <stdio_exit_handler+0xc>)
 8000afa:	4903      	ldr	r1, [pc, #12]	; (8000b08 <stdio_exit_handler+0x10>)
 8000afc:	4803      	ldr	r0, [pc, #12]	; (8000b0c <stdio_exit_handler+0x14>)
 8000afe:	f000 b8f5 	b.w	8000cec <_fwalk_sglue>
 8000b02:	bf00      	nop
 8000b04:	20000028 	.word	0x20000028
 8000b08:	0800110d 	.word	0x0800110d
 8000b0c:	20000034 	.word	0x20000034

08000b10 <cleanup_stdio>:
 8000b10:	6841      	ldr	r1, [r0, #4]
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <cleanup_stdio+0x34>)
 8000b14:	4299      	cmp	r1, r3
 8000b16:	b510      	push	{r4, lr}
 8000b18:	4604      	mov	r4, r0
 8000b1a:	d001      	beq.n	8000b20 <cleanup_stdio+0x10>
 8000b1c:	f000 faf6 	bl	800110c <_fflush_r>
 8000b20:	68a1      	ldr	r1, [r4, #8]
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <cleanup_stdio+0x38>)
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d002      	beq.n	8000b2e <cleanup_stdio+0x1e>
 8000b28:	4620      	mov	r0, r4
 8000b2a:	f000 faef 	bl	800110c <_fflush_r>
 8000b2e:	68e1      	ldr	r1, [r4, #12]
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <cleanup_stdio+0x3c>)
 8000b32:	4299      	cmp	r1, r3
 8000b34:	d004      	beq.n	8000b40 <cleanup_stdio+0x30>
 8000b36:	4620      	mov	r0, r4
 8000b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b3c:	f000 bae6 	b.w	800110c <_fflush_r>
 8000b40:	bd10      	pop	{r4, pc}
 8000b42:	bf00      	nop
 8000b44:	200001bc 	.word	0x200001bc
 8000b48:	20000224 	.word	0x20000224
 8000b4c:	2000028c 	.word	0x2000028c

08000b50 <global_stdio_init.part.0>:
 8000b50:	b510      	push	{r4, lr}
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <global_stdio_init.part.0+0x30>)
 8000b54:	4c0b      	ldr	r4, [pc, #44]	; (8000b84 <global_stdio_init.part.0+0x34>)
 8000b56:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <global_stdio_init.part.0+0x38>)
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2104      	movs	r1, #4
 8000b60:	f7ff ff94 	bl	8000a8c <std>
 8000b64:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2109      	movs	r1, #9
 8000b6c:	f7ff ff8e 	bl	8000a8c <std>
 8000b70:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000b74:	2202      	movs	r2, #2
 8000b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b7a:	2112      	movs	r1, #18
 8000b7c:	f7ff bf86 	b.w	8000a8c <std>
 8000b80:	200002f4 	.word	0x200002f4
 8000b84:	200001bc 	.word	0x200001bc
 8000b88:	08000af9 	.word	0x08000af9

08000b8c <__sfp_lock_acquire>:
 8000b8c:	4801      	ldr	r0, [pc, #4]	; (8000b94 <__sfp_lock_acquire+0x8>)
 8000b8e:	f000 b96e 	b.w	8000e6e <__retarget_lock_acquire_recursive>
 8000b92:	bf00      	nop
 8000b94:	200002f9 	.word	0x200002f9

08000b98 <__sfp_lock_release>:
 8000b98:	4801      	ldr	r0, [pc, #4]	; (8000ba0 <__sfp_lock_release+0x8>)
 8000b9a:	f000 b969 	b.w	8000e70 <__retarget_lock_release_recursive>
 8000b9e:	bf00      	nop
 8000ba0:	200002f9 	.word	0x200002f9

08000ba4 <__sinit>:
 8000ba4:	b510      	push	{r4, lr}
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	f7ff fff0 	bl	8000b8c <__sfp_lock_acquire>
 8000bac:	6a23      	ldr	r3, [r4, #32]
 8000bae:	b11b      	cbz	r3, 8000bb8 <__sinit+0x14>
 8000bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bb4:	f7ff bff0 	b.w	8000b98 <__sfp_lock_release>
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__sinit+0x28>)
 8000bba:	6223      	str	r3, [r4, #32]
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <__sinit+0x2c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d1f5      	bne.n	8000bb0 <__sinit+0xc>
 8000bc4:	f7ff ffc4 	bl	8000b50 <global_stdio_init.part.0>
 8000bc8:	e7f2      	b.n	8000bb0 <__sinit+0xc>
 8000bca:	bf00      	nop
 8000bcc:	08000b11 	.word	0x08000b11
 8000bd0:	200002f4 	.word	0x200002f4

08000bd4 <_strtol_l.constprop.0>:
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bda:	d001      	beq.n	8000be0 <_strtol_l.constprop.0+0xc>
 8000bdc:	2b24      	cmp	r3, #36	; 0x24
 8000bde:	d906      	bls.n	8000bee <_strtol_l.constprop.0+0x1a>
 8000be0:	f000 f91a 	bl	8000e18 <__errno>
 8000be4:	2316      	movs	r3, #22
 8000be6:	6003      	str	r3, [r0, #0]
 8000be8:	2000      	movs	r0, #0
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8000cd4 <_strtol_l.constprop.0+0x100>
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	462e      	mov	r6, r5
 8000bf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000bfa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8000bfe:	f017 0708 	ands.w	r7, r7, #8
 8000c02:	d1f7      	bne.n	8000bf4 <_strtol_l.constprop.0+0x20>
 8000c04:	2c2d      	cmp	r4, #45	; 0x2d
 8000c06:	d132      	bne.n	8000c6e <_strtol_l.constprop.0+0x9a>
 8000c08:	782c      	ldrb	r4, [r5, #0]
 8000c0a:	2701      	movs	r7, #1
 8000c0c:	1cb5      	adds	r5, r6, #2
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d05b      	beq.n	8000cca <_strtol_l.constprop.0+0xf6>
 8000c12:	2b10      	cmp	r3, #16
 8000c14:	d109      	bne.n	8000c2a <_strtol_l.constprop.0+0x56>
 8000c16:	2c30      	cmp	r4, #48	; 0x30
 8000c18:	d107      	bne.n	8000c2a <_strtol_l.constprop.0+0x56>
 8000c1a:	782c      	ldrb	r4, [r5, #0]
 8000c1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8000c20:	2c58      	cmp	r4, #88	; 0x58
 8000c22:	d14d      	bne.n	8000cc0 <_strtol_l.constprop.0+0xec>
 8000c24:	786c      	ldrb	r4, [r5, #1]
 8000c26:	2310      	movs	r3, #16
 8000c28:	3502      	adds	r5, #2
 8000c2a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8000c2e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8000c32:	f04f 0e00 	mov.w	lr, #0
 8000c36:	fbb8 f9f3 	udiv	r9, r8, r3
 8000c3a:	4676      	mov	r6, lr
 8000c3c:	fb03 8a19 	mls	sl, r3, r9, r8
 8000c40:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8000c44:	f1bc 0f09 	cmp.w	ip, #9
 8000c48:	d816      	bhi.n	8000c78 <_strtol_l.constprop.0+0xa4>
 8000c4a:	4664      	mov	r4, ip
 8000c4c:	42a3      	cmp	r3, r4
 8000c4e:	dd24      	ble.n	8000c9a <_strtol_l.constprop.0+0xc6>
 8000c50:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8000c54:	d008      	beq.n	8000c68 <_strtol_l.constprop.0+0x94>
 8000c56:	45b1      	cmp	r9, r6
 8000c58:	d31c      	bcc.n	8000c94 <_strtol_l.constprop.0+0xc0>
 8000c5a:	d101      	bne.n	8000c60 <_strtol_l.constprop.0+0x8c>
 8000c5c:	45a2      	cmp	sl, r4
 8000c5e:	db19      	blt.n	8000c94 <_strtol_l.constprop.0+0xc0>
 8000c60:	fb06 4603 	mla	r6, r6, r3, r4
 8000c64:	f04f 0e01 	mov.w	lr, #1
 8000c68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000c6c:	e7e8      	b.n	8000c40 <_strtol_l.constprop.0+0x6c>
 8000c6e:	2c2b      	cmp	r4, #43	; 0x2b
 8000c70:	bf04      	itt	eq
 8000c72:	782c      	ldrbeq	r4, [r5, #0]
 8000c74:	1cb5      	addeq	r5, r6, #2
 8000c76:	e7ca      	b.n	8000c0e <_strtol_l.constprop.0+0x3a>
 8000c78:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8000c7c:	f1bc 0f19 	cmp.w	ip, #25
 8000c80:	d801      	bhi.n	8000c86 <_strtol_l.constprop.0+0xb2>
 8000c82:	3c37      	subs	r4, #55	; 0x37
 8000c84:	e7e2      	b.n	8000c4c <_strtol_l.constprop.0+0x78>
 8000c86:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8000c8a:	f1bc 0f19 	cmp.w	ip, #25
 8000c8e:	d804      	bhi.n	8000c9a <_strtol_l.constprop.0+0xc6>
 8000c90:	3c57      	subs	r4, #87	; 0x57
 8000c92:	e7db      	b.n	8000c4c <_strtol_l.constprop.0+0x78>
 8000c94:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8000c98:	e7e6      	b.n	8000c68 <_strtol_l.constprop.0+0x94>
 8000c9a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8000c9e:	d105      	bne.n	8000cac <_strtol_l.constprop.0+0xd8>
 8000ca0:	2322      	movs	r3, #34	; 0x22
 8000ca2:	6003      	str	r3, [r0, #0]
 8000ca4:	4646      	mov	r6, r8
 8000ca6:	b942      	cbnz	r2, 8000cba <_strtol_l.constprop.0+0xe6>
 8000ca8:	4630      	mov	r0, r6
 8000caa:	e79e      	b.n	8000bea <_strtol_l.constprop.0+0x16>
 8000cac:	b107      	cbz	r7, 8000cb0 <_strtol_l.constprop.0+0xdc>
 8000cae:	4276      	negs	r6, r6
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	d0f9      	beq.n	8000ca8 <_strtol_l.constprop.0+0xd4>
 8000cb4:	f1be 0f00 	cmp.w	lr, #0
 8000cb8:	d000      	beq.n	8000cbc <_strtol_l.constprop.0+0xe8>
 8000cba:	1e69      	subs	r1, r5, #1
 8000cbc:	6011      	str	r1, [r2, #0]
 8000cbe:	e7f3      	b.n	8000ca8 <_strtol_l.constprop.0+0xd4>
 8000cc0:	2430      	movs	r4, #48	; 0x30
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1b1      	bne.n	8000c2a <_strtol_l.constprop.0+0x56>
 8000cc6:	2308      	movs	r3, #8
 8000cc8:	e7af      	b.n	8000c2a <_strtol_l.constprop.0+0x56>
 8000cca:	2c30      	cmp	r4, #48	; 0x30
 8000ccc:	d0a5      	beq.n	8000c1a <_strtol_l.constprop.0+0x46>
 8000cce:	230a      	movs	r3, #10
 8000cd0:	e7ab      	b.n	8000c2a <_strtol_l.constprop.0+0x56>
 8000cd2:	bf00      	nop
 8000cd4:	08001c80 	.word	0x08001c80

08000cd8 <strtol>:
 8000cd8:	4613      	mov	r3, r2
 8000cda:	460a      	mov	r2, r1
 8000cdc:	4601      	mov	r1, r0
 8000cde:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <strtol+0x10>)
 8000ce0:	6800      	ldr	r0, [r0, #0]
 8000ce2:	f7ff bf77 	b.w	8000bd4 <_strtol_l.constprop.0>
 8000ce6:	bf00      	nop
 8000ce8:	20000080 	.word	0x20000080

08000cec <_fwalk_sglue>:
 8000cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cf0:	4607      	mov	r7, r0
 8000cf2:	4688      	mov	r8, r1
 8000cf4:	4614      	mov	r4, r2
 8000cf6:	2600      	movs	r6, #0
 8000cf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000cfc:	f1b9 0901 	subs.w	r9, r9, #1
 8000d00:	d505      	bpl.n	8000d0e <_fwalk_sglue+0x22>
 8000d02:	6824      	ldr	r4, [r4, #0]
 8000d04:	2c00      	cmp	r4, #0
 8000d06:	d1f7      	bne.n	8000cf8 <_fwalk_sglue+0xc>
 8000d08:	4630      	mov	r0, r6
 8000d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d0e:	89ab      	ldrh	r3, [r5, #12]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d907      	bls.n	8000d24 <_fwalk_sglue+0x38>
 8000d14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	d003      	beq.n	8000d24 <_fwalk_sglue+0x38>
 8000d1c:	4629      	mov	r1, r5
 8000d1e:	4638      	mov	r0, r7
 8000d20:	47c0      	blx	r8
 8000d22:	4306      	orrs	r6, r0
 8000d24:	3568      	adds	r5, #104	; 0x68
 8000d26:	e7e9      	b.n	8000cfc <_fwalk_sglue+0x10>

08000d28 <strncpy>:
 8000d28:	b510      	push	{r4, lr}
 8000d2a:	3901      	subs	r1, #1
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	b132      	cbz	r2, 8000d3e <strncpy+0x16>
 8000d30:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8000d34:	f803 4b01 	strb.w	r4, [r3], #1
 8000d38:	3a01      	subs	r2, #1
 8000d3a:	2c00      	cmp	r4, #0
 8000d3c:	d1f7      	bne.n	8000d2e <strncpy+0x6>
 8000d3e:	441a      	add	r2, r3
 8000d40:	2100      	movs	r1, #0
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d100      	bne.n	8000d48 <strncpy+0x20>
 8000d46:	bd10      	pop	{r4, pc}
 8000d48:	f803 1b01 	strb.w	r1, [r3], #1
 8000d4c:	e7f9      	b.n	8000d42 <strncpy+0x1a>
	...

08000d50 <strtok>:
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <strtok+0x5c>)
 8000d52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d54:	681e      	ldr	r6, [r3, #0]
 8000d56:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8000d58:	4605      	mov	r5, r0
 8000d5a:	b9fc      	cbnz	r4, 8000d9c <strtok+0x4c>
 8000d5c:	2050      	movs	r0, #80	; 0x50
 8000d5e:	9101      	str	r1, [sp, #4]
 8000d60:	f000 f8a6 	bl	8000eb0 <malloc>
 8000d64:	9901      	ldr	r1, [sp, #4]
 8000d66:	6470      	str	r0, [r6, #68]	; 0x44
 8000d68:	4602      	mov	r2, r0
 8000d6a:	b920      	cbnz	r0, 8000d76 <strtok+0x26>
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <strtok+0x60>)
 8000d6e:	4811      	ldr	r0, [pc, #68]	; (8000db4 <strtok+0x64>)
 8000d70:	215b      	movs	r1, #91	; 0x5b
 8000d72:	f000 f87f 	bl	8000e74 <__assert_func>
 8000d76:	e9c0 4400 	strd	r4, r4, [r0]
 8000d7a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8000d7e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8000d82:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8000d86:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8000d8a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8000d8e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8000d92:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8000d96:	6184      	str	r4, [r0, #24]
 8000d98:	7704      	strb	r4, [r0, #28]
 8000d9a:	6244      	str	r4, [r0, #36]	; 0x24
 8000d9c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8000d9e:	2301      	movs	r3, #1
 8000da0:	4628      	mov	r0, r5
 8000da2:	b002      	add	sp, #8
 8000da4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000da8:	f000 b806 	b.w	8000db8 <__strtok_r>
 8000dac:	20000080 	.word	0x20000080
 8000db0:	08001c0e 	.word	0x08001c0e
 8000db4:	08001c25 	.word	0x08001c25

08000db8 <__strtok_r>:
 8000db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dba:	b908      	cbnz	r0, 8000dc0 <__strtok_r+0x8>
 8000dbc:	6810      	ldr	r0, [r2, #0]
 8000dbe:	b188      	cbz	r0, 8000de4 <__strtok_r+0x2c>
 8000dc0:	4604      	mov	r4, r0
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8000dc8:	460f      	mov	r7, r1
 8000dca:	f817 6b01 	ldrb.w	r6, [r7], #1
 8000dce:	b91e      	cbnz	r6, 8000dd8 <__strtok_r+0x20>
 8000dd0:	b965      	cbnz	r5, 8000dec <__strtok_r+0x34>
 8000dd2:	6015      	str	r5, [r2, #0]
 8000dd4:	4628      	mov	r0, r5
 8000dd6:	e005      	b.n	8000de4 <__strtok_r+0x2c>
 8000dd8:	42b5      	cmp	r5, r6
 8000dda:	d1f6      	bne.n	8000dca <__strtok_r+0x12>
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1f0      	bne.n	8000dc2 <__strtok_r+0xa>
 8000de0:	6014      	str	r4, [r2, #0]
 8000de2:	7003      	strb	r3, [r0, #0]
 8000de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000de6:	461c      	mov	r4, r3
 8000de8:	e00c      	b.n	8000e04 <__strtok_r+0x4c>
 8000dea:	b915      	cbnz	r5, 8000df2 <__strtok_r+0x3a>
 8000dec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000df0:	460e      	mov	r6, r1
 8000df2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8000df6:	42ab      	cmp	r3, r5
 8000df8:	d1f7      	bne.n	8000dea <__strtok_r+0x32>
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0f3      	beq.n	8000de6 <__strtok_r+0x2e>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f804 3c01 	strb.w	r3, [r4, #-1]
 8000e04:	6014      	str	r4, [r2, #0]
 8000e06:	e7ed      	b.n	8000de4 <__strtok_r+0x2c>

08000e08 <memset>:
 8000e08:	4402      	add	r2, r0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d100      	bne.n	8000e12 <memset+0xa>
 8000e10:	4770      	bx	lr
 8000e12:	f803 1b01 	strb.w	r1, [r3], #1
 8000e16:	e7f9      	b.n	8000e0c <memset+0x4>

08000e18 <__errno>:
 8000e18:	4b01      	ldr	r3, [pc, #4]	; (8000e20 <__errno+0x8>)
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000080 	.word	0x20000080

08000e24 <__libc_init_array>:
 8000e24:	b570      	push	{r4, r5, r6, lr}
 8000e26:	4d0d      	ldr	r5, [pc, #52]	; (8000e5c <__libc_init_array+0x38>)
 8000e28:	4c0d      	ldr	r4, [pc, #52]	; (8000e60 <__libc_init_array+0x3c>)
 8000e2a:	1b64      	subs	r4, r4, r5
 8000e2c:	10a4      	asrs	r4, r4, #2
 8000e2e:	2600      	movs	r6, #0
 8000e30:	42a6      	cmp	r6, r4
 8000e32:	d109      	bne.n	8000e48 <__libc_init_array+0x24>
 8000e34:	4d0b      	ldr	r5, [pc, #44]	; (8000e64 <__libc_init_array+0x40>)
 8000e36:	4c0c      	ldr	r4, [pc, #48]	; (8000e68 <__libc_init_array+0x44>)
 8000e38:	f000 fece 	bl	8001bd8 <_init>
 8000e3c:	1b64      	subs	r4, r4, r5
 8000e3e:	10a4      	asrs	r4, r4, #2
 8000e40:	2600      	movs	r6, #0
 8000e42:	42a6      	cmp	r6, r4
 8000e44:	d105      	bne.n	8000e52 <__libc_init_array+0x2e>
 8000e46:	bd70      	pop	{r4, r5, r6, pc}
 8000e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e4c:	4798      	blx	r3
 8000e4e:	3601      	adds	r6, #1
 8000e50:	e7ee      	b.n	8000e30 <__libc_init_array+0xc>
 8000e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e56:	4798      	blx	r3
 8000e58:	3601      	adds	r6, #1
 8000e5a:	e7f2      	b.n	8000e42 <__libc_init_array+0x1e>
 8000e5c:	08001df0 	.word	0x08001df0
 8000e60:	08001df0 	.word	0x08001df0
 8000e64:	08001df0 	.word	0x08001df0
 8000e68:	08001df4 	.word	0x08001df4

08000e6c <__retarget_lock_init_recursive>:
 8000e6c:	4770      	bx	lr

08000e6e <__retarget_lock_acquire_recursive>:
 8000e6e:	4770      	bx	lr

08000e70 <__retarget_lock_release_recursive>:
 8000e70:	4770      	bx	lr
	...

08000e74 <__assert_func>:
 8000e74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000e76:	4614      	mov	r4, r2
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <__assert_func+0x2c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4605      	mov	r5, r0
 8000e80:	68d8      	ldr	r0, [r3, #12]
 8000e82:	b14c      	cbz	r4, 8000e98 <__assert_func+0x24>
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <__assert_func+0x30>)
 8000e86:	9100      	str	r1, [sp, #0]
 8000e88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000e8c:	4906      	ldr	r1, [pc, #24]	; (8000ea8 <__assert_func+0x34>)
 8000e8e:	462b      	mov	r3, r5
 8000e90:	f000 f9b4 	bl	80011fc <fiprintf>
 8000e94:	f000 fa1a 	bl	80012cc <abort>
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <__assert_func+0x38>)
 8000e9a:	461c      	mov	r4, r3
 8000e9c:	e7f3      	b.n	8000e86 <__assert_func+0x12>
 8000e9e:	bf00      	nop
 8000ea0:	20000080 	.word	0x20000080
 8000ea4:	08001d80 	.word	0x08001d80
 8000ea8:	08001d8d 	.word	0x08001d8d
 8000eac:	08001dbb 	.word	0x08001dbb

08000eb0 <malloc>:
 8000eb0:	4b02      	ldr	r3, [pc, #8]	; (8000ebc <malloc+0xc>)
 8000eb2:	4601      	mov	r1, r0
 8000eb4:	6818      	ldr	r0, [r3, #0]
 8000eb6:	f000 b823 	b.w	8000f00 <_malloc_r>
 8000eba:	bf00      	nop
 8000ebc:	20000080 	.word	0x20000080

08000ec0 <sbrk_aligned>:
 8000ec0:	b570      	push	{r4, r5, r6, lr}
 8000ec2:	4e0e      	ldr	r6, [pc, #56]	; (8000efc <sbrk_aligned+0x3c>)
 8000ec4:	460c      	mov	r4, r1
 8000ec6:	6831      	ldr	r1, [r6, #0]
 8000ec8:	4605      	mov	r5, r0
 8000eca:	b911      	cbnz	r1, 8000ed2 <sbrk_aligned+0x12>
 8000ecc:	f000 f9dc 	bl	8001288 <_sbrk_r>
 8000ed0:	6030      	str	r0, [r6, #0]
 8000ed2:	4621      	mov	r1, r4
 8000ed4:	4628      	mov	r0, r5
 8000ed6:	f000 f9d7 	bl	8001288 <_sbrk_r>
 8000eda:	1c43      	adds	r3, r0, #1
 8000edc:	d00a      	beq.n	8000ef4 <sbrk_aligned+0x34>
 8000ede:	1cc4      	adds	r4, r0, #3
 8000ee0:	f024 0403 	bic.w	r4, r4, #3
 8000ee4:	42a0      	cmp	r0, r4
 8000ee6:	d007      	beq.n	8000ef8 <sbrk_aligned+0x38>
 8000ee8:	1a21      	subs	r1, r4, r0
 8000eea:	4628      	mov	r0, r5
 8000eec:	f000 f9cc 	bl	8001288 <_sbrk_r>
 8000ef0:	3001      	adds	r0, #1
 8000ef2:	d101      	bne.n	8000ef8 <sbrk_aligned+0x38>
 8000ef4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000ef8:	4620      	mov	r0, r4
 8000efa:	bd70      	pop	{r4, r5, r6, pc}
 8000efc:	20000300 	.word	0x20000300

08000f00 <_malloc_r>:
 8000f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f04:	1ccd      	adds	r5, r1, #3
 8000f06:	f025 0503 	bic.w	r5, r5, #3
 8000f0a:	3508      	adds	r5, #8
 8000f0c:	2d0c      	cmp	r5, #12
 8000f0e:	bf38      	it	cc
 8000f10:	250c      	movcc	r5, #12
 8000f12:	2d00      	cmp	r5, #0
 8000f14:	4607      	mov	r7, r0
 8000f16:	db01      	blt.n	8000f1c <_malloc_r+0x1c>
 8000f18:	42a9      	cmp	r1, r5
 8000f1a:	d905      	bls.n	8000f28 <_malloc_r+0x28>
 8000f1c:	230c      	movs	r3, #12
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	2600      	movs	r6, #0
 8000f22:	4630      	mov	r0, r6
 8000f24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000ffc <_malloc_r+0xfc>
 8000f2c:	f000 f916 	bl	800115c <__malloc_lock>
 8000f30:	f8d8 3000 	ldr.w	r3, [r8]
 8000f34:	461c      	mov	r4, r3
 8000f36:	bb5c      	cbnz	r4, 8000f90 <_malloc_r+0x90>
 8000f38:	4629      	mov	r1, r5
 8000f3a:	4638      	mov	r0, r7
 8000f3c:	f7ff ffc0 	bl	8000ec0 <sbrk_aligned>
 8000f40:	1c43      	adds	r3, r0, #1
 8000f42:	4604      	mov	r4, r0
 8000f44:	d155      	bne.n	8000ff2 <_malloc_r+0xf2>
 8000f46:	f8d8 4000 	ldr.w	r4, [r8]
 8000f4a:	4626      	mov	r6, r4
 8000f4c:	2e00      	cmp	r6, #0
 8000f4e:	d145      	bne.n	8000fdc <_malloc_r+0xdc>
 8000f50:	2c00      	cmp	r4, #0
 8000f52:	d048      	beq.n	8000fe6 <_malloc_r+0xe6>
 8000f54:	6823      	ldr	r3, [r4, #0]
 8000f56:	4631      	mov	r1, r6
 8000f58:	4638      	mov	r0, r7
 8000f5a:	eb04 0903 	add.w	r9, r4, r3
 8000f5e:	f000 f993 	bl	8001288 <_sbrk_r>
 8000f62:	4581      	cmp	r9, r0
 8000f64:	d13f      	bne.n	8000fe6 <_malloc_r+0xe6>
 8000f66:	6821      	ldr	r1, [r4, #0]
 8000f68:	1a6d      	subs	r5, r5, r1
 8000f6a:	4629      	mov	r1, r5
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	f7ff ffa7 	bl	8000ec0 <sbrk_aligned>
 8000f72:	3001      	adds	r0, #1
 8000f74:	d037      	beq.n	8000fe6 <_malloc_r+0xe6>
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	442b      	add	r3, r5
 8000f7a:	6023      	str	r3, [r4, #0]
 8000f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d038      	beq.n	8000ff6 <_malloc_r+0xf6>
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	42a2      	cmp	r2, r4
 8000f88:	d12b      	bne.n	8000fe2 <_malloc_r+0xe2>
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	e00f      	b.n	8000fb0 <_malloc_r+0xb0>
 8000f90:	6822      	ldr	r2, [r4, #0]
 8000f92:	1b52      	subs	r2, r2, r5
 8000f94:	d41f      	bmi.n	8000fd6 <_malloc_r+0xd6>
 8000f96:	2a0b      	cmp	r2, #11
 8000f98:	d917      	bls.n	8000fca <_malloc_r+0xca>
 8000f9a:	1961      	adds	r1, r4, r5
 8000f9c:	42a3      	cmp	r3, r4
 8000f9e:	6025      	str	r5, [r4, #0]
 8000fa0:	bf18      	it	ne
 8000fa2:	6059      	strne	r1, [r3, #4]
 8000fa4:	6863      	ldr	r3, [r4, #4]
 8000fa6:	bf08      	it	eq
 8000fa8:	f8c8 1000 	streq.w	r1, [r8]
 8000fac:	5162      	str	r2, [r4, r5]
 8000fae:	604b      	str	r3, [r1, #4]
 8000fb0:	4638      	mov	r0, r7
 8000fb2:	f104 060b 	add.w	r6, r4, #11
 8000fb6:	f000 f8d7 	bl	8001168 <__malloc_unlock>
 8000fba:	f026 0607 	bic.w	r6, r6, #7
 8000fbe:	1d23      	adds	r3, r4, #4
 8000fc0:	1af2      	subs	r2, r6, r3
 8000fc2:	d0ae      	beq.n	8000f22 <_malloc_r+0x22>
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	50a3      	str	r3, [r4, r2]
 8000fc8:	e7ab      	b.n	8000f22 <_malloc_r+0x22>
 8000fca:	42a3      	cmp	r3, r4
 8000fcc:	6862      	ldr	r2, [r4, #4]
 8000fce:	d1dd      	bne.n	8000f8c <_malloc_r+0x8c>
 8000fd0:	f8c8 2000 	str.w	r2, [r8]
 8000fd4:	e7ec      	b.n	8000fb0 <_malloc_r+0xb0>
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	6864      	ldr	r4, [r4, #4]
 8000fda:	e7ac      	b.n	8000f36 <_malloc_r+0x36>
 8000fdc:	4634      	mov	r4, r6
 8000fde:	6876      	ldr	r6, [r6, #4]
 8000fe0:	e7b4      	b.n	8000f4c <_malloc_r+0x4c>
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	e7cc      	b.n	8000f80 <_malloc_r+0x80>
 8000fe6:	230c      	movs	r3, #12
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	4638      	mov	r0, r7
 8000fec:	f000 f8bc 	bl	8001168 <__malloc_unlock>
 8000ff0:	e797      	b.n	8000f22 <_malloc_r+0x22>
 8000ff2:	6025      	str	r5, [r4, #0]
 8000ff4:	e7dc      	b.n	8000fb0 <_malloc_r+0xb0>
 8000ff6:	605b      	str	r3, [r3, #4]
 8000ff8:	deff      	udf	#255	; 0xff
 8000ffa:	bf00      	nop
 8000ffc:	200002fc 	.word	0x200002fc

08001000 <__sflush_r>:
 8001000:	898a      	ldrh	r2, [r1, #12]
 8001002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001006:	4605      	mov	r5, r0
 8001008:	0710      	lsls	r0, r2, #28
 800100a:	460c      	mov	r4, r1
 800100c:	d458      	bmi.n	80010c0 <__sflush_r+0xc0>
 800100e:	684b      	ldr	r3, [r1, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	dc05      	bgt.n	8001020 <__sflush_r+0x20>
 8001014:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001016:	2b00      	cmp	r3, #0
 8001018:	dc02      	bgt.n	8001020 <__sflush_r+0x20>
 800101a:	2000      	movs	r0, #0
 800101c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001020:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001022:	2e00      	cmp	r6, #0
 8001024:	d0f9      	beq.n	800101a <__sflush_r+0x1a>
 8001026:	2300      	movs	r3, #0
 8001028:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800102c:	682f      	ldr	r7, [r5, #0]
 800102e:	6a21      	ldr	r1, [r4, #32]
 8001030:	602b      	str	r3, [r5, #0]
 8001032:	d032      	beq.n	800109a <__sflush_r+0x9a>
 8001034:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001036:	89a3      	ldrh	r3, [r4, #12]
 8001038:	075a      	lsls	r2, r3, #29
 800103a:	d505      	bpl.n	8001048 <__sflush_r+0x48>
 800103c:	6863      	ldr	r3, [r4, #4]
 800103e:	1ac0      	subs	r0, r0, r3
 8001040:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001042:	b10b      	cbz	r3, 8001048 <__sflush_r+0x48>
 8001044:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001046:	1ac0      	subs	r0, r0, r3
 8001048:	2300      	movs	r3, #0
 800104a:	4602      	mov	r2, r0
 800104c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800104e:	6a21      	ldr	r1, [r4, #32]
 8001050:	4628      	mov	r0, r5
 8001052:	47b0      	blx	r6
 8001054:	1c43      	adds	r3, r0, #1
 8001056:	89a3      	ldrh	r3, [r4, #12]
 8001058:	d106      	bne.n	8001068 <__sflush_r+0x68>
 800105a:	6829      	ldr	r1, [r5, #0]
 800105c:	291d      	cmp	r1, #29
 800105e:	d82b      	bhi.n	80010b8 <__sflush_r+0xb8>
 8001060:	4a29      	ldr	r2, [pc, #164]	; (8001108 <__sflush_r+0x108>)
 8001062:	410a      	asrs	r2, r1
 8001064:	07d6      	lsls	r6, r2, #31
 8001066:	d427      	bmi.n	80010b8 <__sflush_r+0xb8>
 8001068:	2200      	movs	r2, #0
 800106a:	6062      	str	r2, [r4, #4]
 800106c:	04d9      	lsls	r1, r3, #19
 800106e:	6922      	ldr	r2, [r4, #16]
 8001070:	6022      	str	r2, [r4, #0]
 8001072:	d504      	bpl.n	800107e <__sflush_r+0x7e>
 8001074:	1c42      	adds	r2, r0, #1
 8001076:	d101      	bne.n	800107c <__sflush_r+0x7c>
 8001078:	682b      	ldr	r3, [r5, #0]
 800107a:	b903      	cbnz	r3, 800107e <__sflush_r+0x7e>
 800107c:	6560      	str	r0, [r4, #84]	; 0x54
 800107e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001080:	602f      	str	r7, [r5, #0]
 8001082:	2900      	cmp	r1, #0
 8001084:	d0c9      	beq.n	800101a <__sflush_r+0x1a>
 8001086:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800108a:	4299      	cmp	r1, r3
 800108c:	d002      	beq.n	8001094 <__sflush_r+0x94>
 800108e:	4628      	mov	r0, r5
 8001090:	f000 f924 	bl	80012dc <_free_r>
 8001094:	2000      	movs	r0, #0
 8001096:	6360      	str	r0, [r4, #52]	; 0x34
 8001098:	e7c0      	b.n	800101c <__sflush_r+0x1c>
 800109a:	2301      	movs	r3, #1
 800109c:	4628      	mov	r0, r5
 800109e:	47b0      	blx	r6
 80010a0:	1c41      	adds	r1, r0, #1
 80010a2:	d1c8      	bne.n	8001036 <__sflush_r+0x36>
 80010a4:	682b      	ldr	r3, [r5, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0c5      	beq.n	8001036 <__sflush_r+0x36>
 80010aa:	2b1d      	cmp	r3, #29
 80010ac:	d001      	beq.n	80010b2 <__sflush_r+0xb2>
 80010ae:	2b16      	cmp	r3, #22
 80010b0:	d101      	bne.n	80010b6 <__sflush_r+0xb6>
 80010b2:	602f      	str	r7, [r5, #0]
 80010b4:	e7b1      	b.n	800101a <__sflush_r+0x1a>
 80010b6:	89a3      	ldrh	r3, [r4, #12]
 80010b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010bc:	81a3      	strh	r3, [r4, #12]
 80010be:	e7ad      	b.n	800101c <__sflush_r+0x1c>
 80010c0:	690f      	ldr	r7, [r1, #16]
 80010c2:	2f00      	cmp	r7, #0
 80010c4:	d0a9      	beq.n	800101a <__sflush_r+0x1a>
 80010c6:	0793      	lsls	r3, r2, #30
 80010c8:	680e      	ldr	r6, [r1, #0]
 80010ca:	bf08      	it	eq
 80010cc:	694b      	ldreq	r3, [r1, #20]
 80010ce:	600f      	str	r7, [r1, #0]
 80010d0:	bf18      	it	ne
 80010d2:	2300      	movne	r3, #0
 80010d4:	eba6 0807 	sub.w	r8, r6, r7
 80010d8:	608b      	str	r3, [r1, #8]
 80010da:	f1b8 0f00 	cmp.w	r8, #0
 80010de:	dd9c      	ble.n	800101a <__sflush_r+0x1a>
 80010e0:	6a21      	ldr	r1, [r4, #32]
 80010e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80010e4:	4643      	mov	r3, r8
 80010e6:	463a      	mov	r2, r7
 80010e8:	4628      	mov	r0, r5
 80010ea:	47b0      	blx	r6
 80010ec:	2800      	cmp	r0, #0
 80010ee:	dc06      	bgt.n	80010fe <__sflush_r+0xfe>
 80010f0:	89a3      	ldrh	r3, [r4, #12]
 80010f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f6:	81a3      	strh	r3, [r4, #12]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010fc:	e78e      	b.n	800101c <__sflush_r+0x1c>
 80010fe:	4407      	add	r7, r0
 8001100:	eba8 0800 	sub.w	r8, r8, r0
 8001104:	e7e9      	b.n	80010da <__sflush_r+0xda>
 8001106:	bf00      	nop
 8001108:	dfbffffe 	.word	0xdfbffffe

0800110c <_fflush_r>:
 800110c:	b538      	push	{r3, r4, r5, lr}
 800110e:	690b      	ldr	r3, [r1, #16]
 8001110:	4605      	mov	r5, r0
 8001112:	460c      	mov	r4, r1
 8001114:	b913      	cbnz	r3, 800111c <_fflush_r+0x10>
 8001116:	2500      	movs	r5, #0
 8001118:	4628      	mov	r0, r5
 800111a:	bd38      	pop	{r3, r4, r5, pc}
 800111c:	b118      	cbz	r0, 8001126 <_fflush_r+0x1a>
 800111e:	6a03      	ldr	r3, [r0, #32]
 8001120:	b90b      	cbnz	r3, 8001126 <_fflush_r+0x1a>
 8001122:	f7ff fd3f 	bl	8000ba4 <__sinit>
 8001126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0f3      	beq.n	8001116 <_fflush_r+0xa>
 800112e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001130:	07d0      	lsls	r0, r2, #31
 8001132:	d404      	bmi.n	800113e <_fflush_r+0x32>
 8001134:	0599      	lsls	r1, r3, #22
 8001136:	d402      	bmi.n	800113e <_fflush_r+0x32>
 8001138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800113a:	f7ff fe98 	bl	8000e6e <__retarget_lock_acquire_recursive>
 800113e:	4628      	mov	r0, r5
 8001140:	4621      	mov	r1, r4
 8001142:	f7ff ff5d 	bl	8001000 <__sflush_r>
 8001146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001148:	07da      	lsls	r2, r3, #31
 800114a:	4605      	mov	r5, r0
 800114c:	d4e4      	bmi.n	8001118 <_fflush_r+0xc>
 800114e:	89a3      	ldrh	r3, [r4, #12]
 8001150:	059b      	lsls	r3, r3, #22
 8001152:	d4e1      	bmi.n	8001118 <_fflush_r+0xc>
 8001154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001156:	f7ff fe8b 	bl	8000e70 <__retarget_lock_release_recursive>
 800115a:	e7dd      	b.n	8001118 <_fflush_r+0xc>

0800115c <__malloc_lock>:
 800115c:	4801      	ldr	r0, [pc, #4]	; (8001164 <__malloc_lock+0x8>)
 800115e:	f7ff be86 	b.w	8000e6e <__retarget_lock_acquire_recursive>
 8001162:	bf00      	nop
 8001164:	200002f8 	.word	0x200002f8

08001168 <__malloc_unlock>:
 8001168:	4801      	ldr	r0, [pc, #4]	; (8001170 <__malloc_unlock+0x8>)
 800116a:	f7ff be81 	b.w	8000e70 <__retarget_lock_release_recursive>
 800116e:	bf00      	nop
 8001170:	200002f8 	.word	0x200002f8

08001174 <__sread>:
 8001174:	b510      	push	{r4, lr}
 8001176:	460c      	mov	r4, r1
 8001178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800117c:	f000 f872 	bl	8001264 <_read_r>
 8001180:	2800      	cmp	r0, #0
 8001182:	bfab      	itete	ge
 8001184:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001186:	89a3      	ldrhlt	r3, [r4, #12]
 8001188:	181b      	addge	r3, r3, r0
 800118a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800118e:	bfac      	ite	ge
 8001190:	6563      	strge	r3, [r4, #84]	; 0x54
 8001192:	81a3      	strhlt	r3, [r4, #12]
 8001194:	bd10      	pop	{r4, pc}

08001196 <__swrite>:
 8001196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800119a:	461f      	mov	r7, r3
 800119c:	898b      	ldrh	r3, [r1, #12]
 800119e:	05db      	lsls	r3, r3, #23
 80011a0:	4605      	mov	r5, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	4616      	mov	r6, r2
 80011a6:	d505      	bpl.n	80011b4 <__swrite+0x1e>
 80011a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011ac:	2302      	movs	r3, #2
 80011ae:	2200      	movs	r2, #0
 80011b0:	f000 f846 	bl	8001240 <_lseek_r>
 80011b4:	89a3      	ldrh	r3, [r4, #12]
 80011b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011be:	81a3      	strh	r3, [r4, #12]
 80011c0:	4632      	mov	r2, r6
 80011c2:	463b      	mov	r3, r7
 80011c4:	4628      	mov	r0, r5
 80011c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011ca:	f000 b86d 	b.w	80012a8 <_write_r>

080011ce <__sseek>:
 80011ce:	b510      	push	{r4, lr}
 80011d0:	460c      	mov	r4, r1
 80011d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011d6:	f000 f833 	bl	8001240 <_lseek_r>
 80011da:	1c43      	adds	r3, r0, #1
 80011dc:	89a3      	ldrh	r3, [r4, #12]
 80011de:	bf15      	itete	ne
 80011e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80011e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80011e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80011ea:	81a3      	strheq	r3, [r4, #12]
 80011ec:	bf18      	it	ne
 80011ee:	81a3      	strhne	r3, [r4, #12]
 80011f0:	bd10      	pop	{r4, pc}

080011f2 <__sclose>:
 80011f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011f6:	f000 b813 	b.w	8001220 <_close_r>
	...

080011fc <fiprintf>:
 80011fc:	b40e      	push	{r1, r2, r3}
 80011fe:	b503      	push	{r0, r1, lr}
 8001200:	4601      	mov	r1, r0
 8001202:	ab03      	add	r3, sp, #12
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <fiprintf+0x20>)
 8001206:	f853 2b04 	ldr.w	r2, [r3], #4
 800120a:	6800      	ldr	r0, [r0, #0]
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	f000 f8db 	bl	80013c8 <_vfiprintf_r>
 8001212:	b002      	add	sp, #8
 8001214:	f85d eb04 	ldr.w	lr, [sp], #4
 8001218:	b003      	add	sp, #12
 800121a:	4770      	bx	lr
 800121c:	20000080 	.word	0x20000080

08001220 <_close_r>:
 8001220:	b538      	push	{r3, r4, r5, lr}
 8001222:	4d06      	ldr	r5, [pc, #24]	; (800123c <_close_r+0x1c>)
 8001224:	2300      	movs	r3, #0
 8001226:	4604      	mov	r4, r0
 8001228:	4608      	mov	r0, r1
 800122a:	602b      	str	r3, [r5, #0]
 800122c:	f7ff fb99 	bl	8000962 <_close>
 8001230:	1c43      	adds	r3, r0, #1
 8001232:	d102      	bne.n	800123a <_close_r+0x1a>
 8001234:	682b      	ldr	r3, [r5, #0]
 8001236:	b103      	cbz	r3, 800123a <_close_r+0x1a>
 8001238:	6023      	str	r3, [r4, #0]
 800123a:	bd38      	pop	{r3, r4, r5, pc}
 800123c:	20000304 	.word	0x20000304

08001240 <_lseek_r>:
 8001240:	b538      	push	{r3, r4, r5, lr}
 8001242:	4d07      	ldr	r5, [pc, #28]	; (8001260 <_lseek_r+0x20>)
 8001244:	4604      	mov	r4, r0
 8001246:	4608      	mov	r0, r1
 8001248:	4611      	mov	r1, r2
 800124a:	2200      	movs	r2, #0
 800124c:	602a      	str	r2, [r5, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	f7ff fbae 	bl	80009b0 <_lseek>
 8001254:	1c43      	adds	r3, r0, #1
 8001256:	d102      	bne.n	800125e <_lseek_r+0x1e>
 8001258:	682b      	ldr	r3, [r5, #0]
 800125a:	b103      	cbz	r3, 800125e <_lseek_r+0x1e>
 800125c:	6023      	str	r3, [r4, #0]
 800125e:	bd38      	pop	{r3, r4, r5, pc}
 8001260:	20000304 	.word	0x20000304

08001264 <_read_r>:
 8001264:	b538      	push	{r3, r4, r5, lr}
 8001266:	4d07      	ldr	r5, [pc, #28]	; (8001284 <_read_r+0x20>)
 8001268:	4604      	mov	r4, r0
 800126a:	4608      	mov	r0, r1
 800126c:	4611      	mov	r1, r2
 800126e:	2200      	movs	r2, #0
 8001270:	602a      	str	r2, [r5, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	f7ff fb3c 	bl	80008f0 <_read>
 8001278:	1c43      	adds	r3, r0, #1
 800127a:	d102      	bne.n	8001282 <_read_r+0x1e>
 800127c:	682b      	ldr	r3, [r5, #0]
 800127e:	b103      	cbz	r3, 8001282 <_read_r+0x1e>
 8001280:	6023      	str	r3, [r4, #0]
 8001282:	bd38      	pop	{r3, r4, r5, pc}
 8001284:	20000304 	.word	0x20000304

08001288 <_sbrk_r>:
 8001288:	b538      	push	{r3, r4, r5, lr}
 800128a:	4d06      	ldr	r5, [pc, #24]	; (80012a4 <_sbrk_r+0x1c>)
 800128c:	2300      	movs	r3, #0
 800128e:	4604      	mov	r4, r0
 8001290:	4608      	mov	r0, r1
 8001292:	602b      	str	r3, [r5, #0]
 8001294:	f7ff fb9a 	bl	80009cc <_sbrk>
 8001298:	1c43      	adds	r3, r0, #1
 800129a:	d102      	bne.n	80012a2 <_sbrk_r+0x1a>
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	b103      	cbz	r3, 80012a2 <_sbrk_r+0x1a>
 80012a0:	6023      	str	r3, [r4, #0]
 80012a2:	bd38      	pop	{r3, r4, r5, pc}
 80012a4:	20000304 	.word	0x20000304

080012a8 <_write_r>:
 80012a8:	b538      	push	{r3, r4, r5, lr}
 80012aa:	4d07      	ldr	r5, [pc, #28]	; (80012c8 <_write_r+0x20>)
 80012ac:	4604      	mov	r4, r0
 80012ae:	4608      	mov	r0, r1
 80012b0:	4611      	mov	r1, r2
 80012b2:	2200      	movs	r2, #0
 80012b4:	602a      	str	r2, [r5, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	f7ff fb37 	bl	800092a <_write>
 80012bc:	1c43      	adds	r3, r0, #1
 80012be:	d102      	bne.n	80012c6 <_write_r+0x1e>
 80012c0:	682b      	ldr	r3, [r5, #0]
 80012c2:	b103      	cbz	r3, 80012c6 <_write_r+0x1e>
 80012c4:	6023      	str	r3, [r4, #0]
 80012c6:	bd38      	pop	{r3, r4, r5, pc}
 80012c8:	20000304 	.word	0x20000304

080012cc <abort>:
 80012cc:	b508      	push	{r3, lr}
 80012ce:	2006      	movs	r0, #6
 80012d0:	f000 fc66 	bl	8001ba0 <raise>
 80012d4:	2001      	movs	r0, #1
 80012d6:	f7ff fb01 	bl	80008dc <_exit>
	...

080012dc <_free_r>:
 80012dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80012de:	2900      	cmp	r1, #0
 80012e0:	d044      	beq.n	800136c <_free_r+0x90>
 80012e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012e6:	9001      	str	r0, [sp, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f1a1 0404 	sub.w	r4, r1, #4
 80012ee:	bfb8      	it	lt
 80012f0:	18e4      	addlt	r4, r4, r3
 80012f2:	f7ff ff33 	bl	800115c <__malloc_lock>
 80012f6:	4a1e      	ldr	r2, [pc, #120]	; (8001370 <_free_r+0x94>)
 80012f8:	9801      	ldr	r0, [sp, #4]
 80012fa:	6813      	ldr	r3, [r2, #0]
 80012fc:	b933      	cbnz	r3, 800130c <_free_r+0x30>
 80012fe:	6063      	str	r3, [r4, #4]
 8001300:	6014      	str	r4, [r2, #0]
 8001302:	b003      	add	sp, #12
 8001304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001308:	f7ff bf2e 	b.w	8001168 <__malloc_unlock>
 800130c:	42a3      	cmp	r3, r4
 800130e:	d908      	bls.n	8001322 <_free_r+0x46>
 8001310:	6825      	ldr	r5, [r4, #0]
 8001312:	1961      	adds	r1, r4, r5
 8001314:	428b      	cmp	r3, r1
 8001316:	bf01      	itttt	eq
 8001318:	6819      	ldreq	r1, [r3, #0]
 800131a:	685b      	ldreq	r3, [r3, #4]
 800131c:	1949      	addeq	r1, r1, r5
 800131e:	6021      	streq	r1, [r4, #0]
 8001320:	e7ed      	b.n	80012fe <_free_r+0x22>
 8001322:	461a      	mov	r2, r3
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	b10b      	cbz	r3, 800132c <_free_r+0x50>
 8001328:	42a3      	cmp	r3, r4
 800132a:	d9fa      	bls.n	8001322 <_free_r+0x46>
 800132c:	6811      	ldr	r1, [r2, #0]
 800132e:	1855      	adds	r5, r2, r1
 8001330:	42a5      	cmp	r5, r4
 8001332:	d10b      	bne.n	800134c <_free_r+0x70>
 8001334:	6824      	ldr	r4, [r4, #0]
 8001336:	4421      	add	r1, r4
 8001338:	1854      	adds	r4, r2, r1
 800133a:	42a3      	cmp	r3, r4
 800133c:	6011      	str	r1, [r2, #0]
 800133e:	d1e0      	bne.n	8001302 <_free_r+0x26>
 8001340:	681c      	ldr	r4, [r3, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	6053      	str	r3, [r2, #4]
 8001346:	440c      	add	r4, r1
 8001348:	6014      	str	r4, [r2, #0]
 800134a:	e7da      	b.n	8001302 <_free_r+0x26>
 800134c:	d902      	bls.n	8001354 <_free_r+0x78>
 800134e:	230c      	movs	r3, #12
 8001350:	6003      	str	r3, [r0, #0]
 8001352:	e7d6      	b.n	8001302 <_free_r+0x26>
 8001354:	6825      	ldr	r5, [r4, #0]
 8001356:	1961      	adds	r1, r4, r5
 8001358:	428b      	cmp	r3, r1
 800135a:	bf04      	itt	eq
 800135c:	6819      	ldreq	r1, [r3, #0]
 800135e:	685b      	ldreq	r3, [r3, #4]
 8001360:	6063      	str	r3, [r4, #4]
 8001362:	bf04      	itt	eq
 8001364:	1949      	addeq	r1, r1, r5
 8001366:	6021      	streq	r1, [r4, #0]
 8001368:	6054      	str	r4, [r2, #4]
 800136a:	e7ca      	b.n	8001302 <_free_r+0x26>
 800136c:	b003      	add	sp, #12
 800136e:	bd30      	pop	{r4, r5, pc}
 8001370:	200002fc 	.word	0x200002fc

08001374 <__sfputc_r>:
 8001374:	6893      	ldr	r3, [r2, #8]
 8001376:	3b01      	subs	r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	b410      	push	{r4}
 800137c:	6093      	str	r3, [r2, #8]
 800137e:	da08      	bge.n	8001392 <__sfputc_r+0x1e>
 8001380:	6994      	ldr	r4, [r2, #24]
 8001382:	42a3      	cmp	r3, r4
 8001384:	db01      	blt.n	800138a <__sfputc_r+0x16>
 8001386:	290a      	cmp	r1, #10
 8001388:	d103      	bne.n	8001392 <__sfputc_r+0x1e>
 800138a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800138e:	f000 bac5 	b.w	800191c <__swbuf_r>
 8001392:	6813      	ldr	r3, [r2, #0]
 8001394:	1c58      	adds	r0, r3, #1
 8001396:	6010      	str	r0, [r2, #0]
 8001398:	7019      	strb	r1, [r3, #0]
 800139a:	4608      	mov	r0, r1
 800139c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <__sfputs_r>:
 80013a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a4:	4606      	mov	r6, r0
 80013a6:	460f      	mov	r7, r1
 80013a8:	4614      	mov	r4, r2
 80013aa:	18d5      	adds	r5, r2, r3
 80013ac:	42ac      	cmp	r4, r5
 80013ae:	d101      	bne.n	80013b4 <__sfputs_r+0x12>
 80013b0:	2000      	movs	r0, #0
 80013b2:	e007      	b.n	80013c4 <__sfputs_r+0x22>
 80013b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013b8:	463a      	mov	r2, r7
 80013ba:	4630      	mov	r0, r6
 80013bc:	f7ff ffda 	bl	8001374 <__sfputc_r>
 80013c0:	1c43      	adds	r3, r0, #1
 80013c2:	d1f3      	bne.n	80013ac <__sfputs_r+0xa>
 80013c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080013c8 <_vfiprintf_r>:
 80013c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013cc:	460d      	mov	r5, r1
 80013ce:	b09d      	sub	sp, #116	; 0x74
 80013d0:	4614      	mov	r4, r2
 80013d2:	4698      	mov	r8, r3
 80013d4:	4606      	mov	r6, r0
 80013d6:	b118      	cbz	r0, 80013e0 <_vfiprintf_r+0x18>
 80013d8:	6a03      	ldr	r3, [r0, #32]
 80013da:	b90b      	cbnz	r3, 80013e0 <_vfiprintf_r+0x18>
 80013dc:	f7ff fbe2 	bl	8000ba4 <__sinit>
 80013e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80013e2:	07d9      	lsls	r1, r3, #31
 80013e4:	d405      	bmi.n	80013f2 <_vfiprintf_r+0x2a>
 80013e6:	89ab      	ldrh	r3, [r5, #12]
 80013e8:	059a      	lsls	r2, r3, #22
 80013ea:	d402      	bmi.n	80013f2 <_vfiprintf_r+0x2a>
 80013ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80013ee:	f7ff fd3e 	bl	8000e6e <__retarget_lock_acquire_recursive>
 80013f2:	89ab      	ldrh	r3, [r5, #12]
 80013f4:	071b      	lsls	r3, r3, #28
 80013f6:	d501      	bpl.n	80013fc <_vfiprintf_r+0x34>
 80013f8:	692b      	ldr	r3, [r5, #16]
 80013fa:	b99b      	cbnz	r3, 8001424 <_vfiprintf_r+0x5c>
 80013fc:	4629      	mov	r1, r5
 80013fe:	4630      	mov	r0, r6
 8001400:	f000 faca 	bl	8001998 <__swsetup_r>
 8001404:	b170      	cbz	r0, 8001424 <_vfiprintf_r+0x5c>
 8001406:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001408:	07dc      	lsls	r4, r3, #31
 800140a:	d504      	bpl.n	8001416 <_vfiprintf_r+0x4e>
 800140c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001410:	b01d      	add	sp, #116	; 0x74
 8001412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001416:	89ab      	ldrh	r3, [r5, #12]
 8001418:	0598      	lsls	r0, r3, #22
 800141a:	d4f7      	bmi.n	800140c <_vfiprintf_r+0x44>
 800141c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800141e:	f7ff fd27 	bl	8000e70 <__retarget_lock_release_recursive>
 8001422:	e7f3      	b.n	800140c <_vfiprintf_r+0x44>
 8001424:	2300      	movs	r3, #0
 8001426:	9309      	str	r3, [sp, #36]	; 0x24
 8001428:	2320      	movs	r3, #32
 800142a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800142e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001432:	2330      	movs	r3, #48	; 0x30
 8001434:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80015e8 <_vfiprintf_r+0x220>
 8001438:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800143c:	f04f 0901 	mov.w	r9, #1
 8001440:	4623      	mov	r3, r4
 8001442:	469a      	mov	sl, r3
 8001444:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001448:	b10a      	cbz	r2, 800144e <_vfiprintf_r+0x86>
 800144a:	2a25      	cmp	r2, #37	; 0x25
 800144c:	d1f9      	bne.n	8001442 <_vfiprintf_r+0x7a>
 800144e:	ebba 0b04 	subs.w	fp, sl, r4
 8001452:	d00b      	beq.n	800146c <_vfiprintf_r+0xa4>
 8001454:	465b      	mov	r3, fp
 8001456:	4622      	mov	r2, r4
 8001458:	4629      	mov	r1, r5
 800145a:	4630      	mov	r0, r6
 800145c:	f7ff ffa1 	bl	80013a2 <__sfputs_r>
 8001460:	3001      	adds	r0, #1
 8001462:	f000 80a9 	beq.w	80015b8 <_vfiprintf_r+0x1f0>
 8001466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001468:	445a      	add	r2, fp
 800146a:	9209      	str	r2, [sp, #36]	; 0x24
 800146c:	f89a 3000 	ldrb.w	r3, [sl]
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 80a1 	beq.w	80015b8 <_vfiprintf_r+0x1f0>
 8001476:	2300      	movs	r3, #0
 8001478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800147c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001480:	f10a 0a01 	add.w	sl, sl, #1
 8001484:	9304      	str	r3, [sp, #16]
 8001486:	9307      	str	r3, [sp, #28]
 8001488:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800148c:	931a      	str	r3, [sp, #104]	; 0x68
 800148e:	4654      	mov	r4, sl
 8001490:	2205      	movs	r2, #5
 8001492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001496:	4854      	ldr	r0, [pc, #336]	; (80015e8 <_vfiprintf_r+0x220>)
 8001498:	f7fe feb2 	bl	8000200 <memchr>
 800149c:	9a04      	ldr	r2, [sp, #16]
 800149e:	b9d8      	cbnz	r0, 80014d8 <_vfiprintf_r+0x110>
 80014a0:	06d1      	lsls	r1, r2, #27
 80014a2:	bf44      	itt	mi
 80014a4:	2320      	movmi	r3, #32
 80014a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80014aa:	0713      	lsls	r3, r2, #28
 80014ac:	bf44      	itt	mi
 80014ae:	232b      	movmi	r3, #43	; 0x2b
 80014b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80014b4:	f89a 3000 	ldrb.w	r3, [sl]
 80014b8:	2b2a      	cmp	r3, #42	; 0x2a
 80014ba:	d015      	beq.n	80014e8 <_vfiprintf_r+0x120>
 80014bc:	9a07      	ldr	r2, [sp, #28]
 80014be:	4654      	mov	r4, sl
 80014c0:	2000      	movs	r0, #0
 80014c2:	f04f 0c0a 	mov.w	ip, #10
 80014c6:	4621      	mov	r1, r4
 80014c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80014cc:	3b30      	subs	r3, #48	; 0x30
 80014ce:	2b09      	cmp	r3, #9
 80014d0:	d94d      	bls.n	800156e <_vfiprintf_r+0x1a6>
 80014d2:	b1b0      	cbz	r0, 8001502 <_vfiprintf_r+0x13a>
 80014d4:	9207      	str	r2, [sp, #28]
 80014d6:	e014      	b.n	8001502 <_vfiprintf_r+0x13a>
 80014d8:	eba0 0308 	sub.w	r3, r0, r8
 80014dc:	fa09 f303 	lsl.w	r3, r9, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	9304      	str	r3, [sp, #16]
 80014e4:	46a2      	mov	sl, r4
 80014e6:	e7d2      	b.n	800148e <_vfiprintf_r+0xc6>
 80014e8:	9b03      	ldr	r3, [sp, #12]
 80014ea:	1d19      	adds	r1, r3, #4
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	9103      	str	r1, [sp, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	bfbb      	ittet	lt
 80014f4:	425b      	neglt	r3, r3
 80014f6:	f042 0202 	orrlt.w	r2, r2, #2
 80014fa:	9307      	strge	r3, [sp, #28]
 80014fc:	9307      	strlt	r3, [sp, #28]
 80014fe:	bfb8      	it	lt
 8001500:	9204      	strlt	r2, [sp, #16]
 8001502:	7823      	ldrb	r3, [r4, #0]
 8001504:	2b2e      	cmp	r3, #46	; 0x2e
 8001506:	d10c      	bne.n	8001522 <_vfiprintf_r+0x15a>
 8001508:	7863      	ldrb	r3, [r4, #1]
 800150a:	2b2a      	cmp	r3, #42	; 0x2a
 800150c:	d134      	bne.n	8001578 <_vfiprintf_r+0x1b0>
 800150e:	9b03      	ldr	r3, [sp, #12]
 8001510:	1d1a      	adds	r2, r3, #4
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	9203      	str	r2, [sp, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	bfb8      	it	lt
 800151a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800151e:	3402      	adds	r4, #2
 8001520:	9305      	str	r3, [sp, #20]
 8001522:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80015f8 <_vfiprintf_r+0x230>
 8001526:	7821      	ldrb	r1, [r4, #0]
 8001528:	2203      	movs	r2, #3
 800152a:	4650      	mov	r0, sl
 800152c:	f7fe fe68 	bl	8000200 <memchr>
 8001530:	b138      	cbz	r0, 8001542 <_vfiprintf_r+0x17a>
 8001532:	9b04      	ldr	r3, [sp, #16]
 8001534:	eba0 000a 	sub.w	r0, r0, sl
 8001538:	2240      	movs	r2, #64	; 0x40
 800153a:	4082      	lsls	r2, r0
 800153c:	4313      	orrs	r3, r2
 800153e:	3401      	adds	r4, #1
 8001540:	9304      	str	r3, [sp, #16]
 8001542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001546:	4829      	ldr	r0, [pc, #164]	; (80015ec <_vfiprintf_r+0x224>)
 8001548:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800154c:	2206      	movs	r2, #6
 800154e:	f7fe fe57 	bl	8000200 <memchr>
 8001552:	2800      	cmp	r0, #0
 8001554:	d03f      	beq.n	80015d6 <_vfiprintf_r+0x20e>
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <_vfiprintf_r+0x228>)
 8001558:	bb1b      	cbnz	r3, 80015a2 <_vfiprintf_r+0x1da>
 800155a:	9b03      	ldr	r3, [sp, #12]
 800155c:	3307      	adds	r3, #7
 800155e:	f023 0307 	bic.w	r3, r3, #7
 8001562:	3308      	adds	r3, #8
 8001564:	9303      	str	r3, [sp, #12]
 8001566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001568:	443b      	add	r3, r7
 800156a:	9309      	str	r3, [sp, #36]	; 0x24
 800156c:	e768      	b.n	8001440 <_vfiprintf_r+0x78>
 800156e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001572:	460c      	mov	r4, r1
 8001574:	2001      	movs	r0, #1
 8001576:	e7a6      	b.n	80014c6 <_vfiprintf_r+0xfe>
 8001578:	2300      	movs	r3, #0
 800157a:	3401      	adds	r4, #1
 800157c:	9305      	str	r3, [sp, #20]
 800157e:	4619      	mov	r1, r3
 8001580:	f04f 0c0a 	mov.w	ip, #10
 8001584:	4620      	mov	r0, r4
 8001586:	f810 2b01 	ldrb.w	r2, [r0], #1
 800158a:	3a30      	subs	r2, #48	; 0x30
 800158c:	2a09      	cmp	r2, #9
 800158e:	d903      	bls.n	8001598 <_vfiprintf_r+0x1d0>
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0c6      	beq.n	8001522 <_vfiprintf_r+0x15a>
 8001594:	9105      	str	r1, [sp, #20]
 8001596:	e7c4      	b.n	8001522 <_vfiprintf_r+0x15a>
 8001598:	fb0c 2101 	mla	r1, ip, r1, r2
 800159c:	4604      	mov	r4, r0
 800159e:	2301      	movs	r3, #1
 80015a0:	e7f0      	b.n	8001584 <_vfiprintf_r+0x1bc>
 80015a2:	ab03      	add	r3, sp, #12
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	462a      	mov	r2, r5
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <_vfiprintf_r+0x22c>)
 80015aa:	a904      	add	r1, sp, #16
 80015ac:	4630      	mov	r0, r6
 80015ae:	f3af 8000 	nop.w
 80015b2:	4607      	mov	r7, r0
 80015b4:	1c78      	adds	r0, r7, #1
 80015b6:	d1d6      	bne.n	8001566 <_vfiprintf_r+0x19e>
 80015b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80015ba:	07d9      	lsls	r1, r3, #31
 80015bc:	d405      	bmi.n	80015ca <_vfiprintf_r+0x202>
 80015be:	89ab      	ldrh	r3, [r5, #12]
 80015c0:	059a      	lsls	r2, r3, #22
 80015c2:	d402      	bmi.n	80015ca <_vfiprintf_r+0x202>
 80015c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80015c6:	f7ff fc53 	bl	8000e70 <__retarget_lock_release_recursive>
 80015ca:	89ab      	ldrh	r3, [r5, #12]
 80015cc:	065b      	lsls	r3, r3, #25
 80015ce:	f53f af1d 	bmi.w	800140c <_vfiprintf_r+0x44>
 80015d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80015d4:	e71c      	b.n	8001410 <_vfiprintf_r+0x48>
 80015d6:	ab03      	add	r3, sp, #12
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	462a      	mov	r2, r5
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <_vfiprintf_r+0x22c>)
 80015de:	a904      	add	r1, sp, #16
 80015e0:	4630      	mov	r0, r6
 80015e2:	f000 f879 	bl	80016d8 <_printf_i>
 80015e6:	e7e4      	b.n	80015b2 <_vfiprintf_r+0x1ea>
 80015e8:	08001dbc 	.word	0x08001dbc
 80015ec:	08001dc6 	.word	0x08001dc6
 80015f0:	00000000 	.word	0x00000000
 80015f4:	080013a3 	.word	0x080013a3
 80015f8:	08001dc2 	.word	0x08001dc2

080015fc <_printf_common>:
 80015fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001600:	4616      	mov	r6, r2
 8001602:	4699      	mov	r9, r3
 8001604:	688a      	ldr	r2, [r1, #8]
 8001606:	690b      	ldr	r3, [r1, #16]
 8001608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800160c:	4293      	cmp	r3, r2
 800160e:	bfb8      	it	lt
 8001610:	4613      	movlt	r3, r2
 8001612:	6033      	str	r3, [r6, #0]
 8001614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001618:	4607      	mov	r7, r0
 800161a:	460c      	mov	r4, r1
 800161c:	b10a      	cbz	r2, 8001622 <_printf_common+0x26>
 800161e:	3301      	adds	r3, #1
 8001620:	6033      	str	r3, [r6, #0]
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	0699      	lsls	r1, r3, #26
 8001626:	bf42      	ittt	mi
 8001628:	6833      	ldrmi	r3, [r6, #0]
 800162a:	3302      	addmi	r3, #2
 800162c:	6033      	strmi	r3, [r6, #0]
 800162e:	6825      	ldr	r5, [r4, #0]
 8001630:	f015 0506 	ands.w	r5, r5, #6
 8001634:	d106      	bne.n	8001644 <_printf_common+0x48>
 8001636:	f104 0a19 	add.w	sl, r4, #25
 800163a:	68e3      	ldr	r3, [r4, #12]
 800163c:	6832      	ldr	r2, [r6, #0]
 800163e:	1a9b      	subs	r3, r3, r2
 8001640:	42ab      	cmp	r3, r5
 8001642:	dc26      	bgt.n	8001692 <_printf_common+0x96>
 8001644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001648:	1e13      	subs	r3, r2, #0
 800164a:	6822      	ldr	r2, [r4, #0]
 800164c:	bf18      	it	ne
 800164e:	2301      	movne	r3, #1
 8001650:	0692      	lsls	r2, r2, #26
 8001652:	d42b      	bmi.n	80016ac <_printf_common+0xb0>
 8001654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001658:	4649      	mov	r1, r9
 800165a:	4638      	mov	r0, r7
 800165c:	47c0      	blx	r8
 800165e:	3001      	adds	r0, #1
 8001660:	d01e      	beq.n	80016a0 <_printf_common+0xa4>
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	6922      	ldr	r2, [r4, #16]
 8001666:	f003 0306 	and.w	r3, r3, #6
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf02      	ittt	eq
 800166e:	68e5      	ldreq	r5, [r4, #12]
 8001670:	6833      	ldreq	r3, [r6, #0]
 8001672:	1aed      	subeq	r5, r5, r3
 8001674:	68a3      	ldr	r3, [r4, #8]
 8001676:	bf0c      	ite	eq
 8001678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800167c:	2500      	movne	r5, #0
 800167e:	4293      	cmp	r3, r2
 8001680:	bfc4      	itt	gt
 8001682:	1a9b      	subgt	r3, r3, r2
 8001684:	18ed      	addgt	r5, r5, r3
 8001686:	2600      	movs	r6, #0
 8001688:	341a      	adds	r4, #26
 800168a:	42b5      	cmp	r5, r6
 800168c:	d11a      	bne.n	80016c4 <_printf_common+0xc8>
 800168e:	2000      	movs	r0, #0
 8001690:	e008      	b.n	80016a4 <_printf_common+0xa8>
 8001692:	2301      	movs	r3, #1
 8001694:	4652      	mov	r2, sl
 8001696:	4649      	mov	r1, r9
 8001698:	4638      	mov	r0, r7
 800169a:	47c0      	blx	r8
 800169c:	3001      	adds	r0, #1
 800169e:	d103      	bne.n	80016a8 <_printf_common+0xac>
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016a8:	3501      	adds	r5, #1
 80016aa:	e7c6      	b.n	800163a <_printf_common+0x3e>
 80016ac:	18e1      	adds	r1, r4, r3
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	2030      	movs	r0, #48	; 0x30
 80016b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80016b6:	4422      	add	r2, r4
 80016b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80016bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80016c0:	3302      	adds	r3, #2
 80016c2:	e7c7      	b.n	8001654 <_printf_common+0x58>
 80016c4:	2301      	movs	r3, #1
 80016c6:	4622      	mov	r2, r4
 80016c8:	4649      	mov	r1, r9
 80016ca:	4638      	mov	r0, r7
 80016cc:	47c0      	blx	r8
 80016ce:	3001      	adds	r0, #1
 80016d0:	d0e6      	beq.n	80016a0 <_printf_common+0xa4>
 80016d2:	3601      	adds	r6, #1
 80016d4:	e7d9      	b.n	800168a <_printf_common+0x8e>
	...

080016d8 <_printf_i>:
 80016d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80016dc:	7e0f      	ldrb	r7, [r1, #24]
 80016de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80016e0:	2f78      	cmp	r7, #120	; 0x78
 80016e2:	4691      	mov	r9, r2
 80016e4:	4680      	mov	r8, r0
 80016e6:	460c      	mov	r4, r1
 80016e8:	469a      	mov	sl, r3
 80016ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80016ee:	d807      	bhi.n	8001700 <_printf_i+0x28>
 80016f0:	2f62      	cmp	r7, #98	; 0x62
 80016f2:	d80a      	bhi.n	800170a <_printf_i+0x32>
 80016f4:	2f00      	cmp	r7, #0
 80016f6:	f000 80d4 	beq.w	80018a2 <_printf_i+0x1ca>
 80016fa:	2f58      	cmp	r7, #88	; 0x58
 80016fc:	f000 80c0 	beq.w	8001880 <_printf_i+0x1a8>
 8001700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001708:	e03a      	b.n	8001780 <_printf_i+0xa8>
 800170a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800170e:	2b15      	cmp	r3, #21
 8001710:	d8f6      	bhi.n	8001700 <_printf_i+0x28>
 8001712:	a101      	add	r1, pc, #4	; (adr r1, 8001718 <_printf_i+0x40>)
 8001714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001718:	08001771 	.word	0x08001771
 800171c:	08001785 	.word	0x08001785
 8001720:	08001701 	.word	0x08001701
 8001724:	08001701 	.word	0x08001701
 8001728:	08001701 	.word	0x08001701
 800172c:	08001701 	.word	0x08001701
 8001730:	08001785 	.word	0x08001785
 8001734:	08001701 	.word	0x08001701
 8001738:	08001701 	.word	0x08001701
 800173c:	08001701 	.word	0x08001701
 8001740:	08001701 	.word	0x08001701
 8001744:	08001889 	.word	0x08001889
 8001748:	080017b1 	.word	0x080017b1
 800174c:	08001843 	.word	0x08001843
 8001750:	08001701 	.word	0x08001701
 8001754:	08001701 	.word	0x08001701
 8001758:	080018ab 	.word	0x080018ab
 800175c:	08001701 	.word	0x08001701
 8001760:	080017b1 	.word	0x080017b1
 8001764:	08001701 	.word	0x08001701
 8001768:	08001701 	.word	0x08001701
 800176c:	0800184b 	.word	0x0800184b
 8001770:	682b      	ldr	r3, [r5, #0]
 8001772:	1d1a      	adds	r2, r3, #4
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	602a      	str	r2, [r5, #0]
 8001778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800177c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001780:	2301      	movs	r3, #1
 8001782:	e09f      	b.n	80018c4 <_printf_i+0x1ec>
 8001784:	6820      	ldr	r0, [r4, #0]
 8001786:	682b      	ldr	r3, [r5, #0]
 8001788:	0607      	lsls	r7, r0, #24
 800178a:	f103 0104 	add.w	r1, r3, #4
 800178e:	6029      	str	r1, [r5, #0]
 8001790:	d501      	bpl.n	8001796 <_printf_i+0xbe>
 8001792:	681e      	ldr	r6, [r3, #0]
 8001794:	e003      	b.n	800179e <_printf_i+0xc6>
 8001796:	0646      	lsls	r6, r0, #25
 8001798:	d5fb      	bpl.n	8001792 <_printf_i+0xba>
 800179a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800179e:	2e00      	cmp	r6, #0
 80017a0:	da03      	bge.n	80017aa <_printf_i+0xd2>
 80017a2:	232d      	movs	r3, #45	; 0x2d
 80017a4:	4276      	negs	r6, r6
 80017a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80017aa:	485a      	ldr	r0, [pc, #360]	; (8001914 <_printf_i+0x23c>)
 80017ac:	230a      	movs	r3, #10
 80017ae:	e012      	b.n	80017d6 <_printf_i+0xfe>
 80017b0:	682b      	ldr	r3, [r5, #0]
 80017b2:	6820      	ldr	r0, [r4, #0]
 80017b4:	1d19      	adds	r1, r3, #4
 80017b6:	6029      	str	r1, [r5, #0]
 80017b8:	0605      	lsls	r5, r0, #24
 80017ba:	d501      	bpl.n	80017c0 <_printf_i+0xe8>
 80017bc:	681e      	ldr	r6, [r3, #0]
 80017be:	e002      	b.n	80017c6 <_printf_i+0xee>
 80017c0:	0641      	lsls	r1, r0, #25
 80017c2:	d5fb      	bpl.n	80017bc <_printf_i+0xe4>
 80017c4:	881e      	ldrh	r6, [r3, #0]
 80017c6:	4853      	ldr	r0, [pc, #332]	; (8001914 <_printf_i+0x23c>)
 80017c8:	2f6f      	cmp	r7, #111	; 0x6f
 80017ca:	bf0c      	ite	eq
 80017cc:	2308      	moveq	r3, #8
 80017ce:	230a      	movne	r3, #10
 80017d0:	2100      	movs	r1, #0
 80017d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80017d6:	6865      	ldr	r5, [r4, #4]
 80017d8:	60a5      	str	r5, [r4, #8]
 80017da:	2d00      	cmp	r5, #0
 80017dc:	bfa2      	ittt	ge
 80017de:	6821      	ldrge	r1, [r4, #0]
 80017e0:	f021 0104 	bicge.w	r1, r1, #4
 80017e4:	6021      	strge	r1, [r4, #0]
 80017e6:	b90e      	cbnz	r6, 80017ec <_printf_i+0x114>
 80017e8:	2d00      	cmp	r5, #0
 80017ea:	d04b      	beq.n	8001884 <_printf_i+0x1ac>
 80017ec:	4615      	mov	r5, r2
 80017ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80017f2:	fb03 6711 	mls	r7, r3, r1, r6
 80017f6:	5dc7      	ldrb	r7, [r0, r7]
 80017f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80017fc:	4637      	mov	r7, r6
 80017fe:	42bb      	cmp	r3, r7
 8001800:	460e      	mov	r6, r1
 8001802:	d9f4      	bls.n	80017ee <_printf_i+0x116>
 8001804:	2b08      	cmp	r3, #8
 8001806:	d10b      	bne.n	8001820 <_printf_i+0x148>
 8001808:	6823      	ldr	r3, [r4, #0]
 800180a:	07de      	lsls	r6, r3, #31
 800180c:	d508      	bpl.n	8001820 <_printf_i+0x148>
 800180e:	6923      	ldr	r3, [r4, #16]
 8001810:	6861      	ldr	r1, [r4, #4]
 8001812:	4299      	cmp	r1, r3
 8001814:	bfde      	ittt	le
 8001816:	2330      	movle	r3, #48	; 0x30
 8001818:	f805 3c01 	strble.w	r3, [r5, #-1]
 800181c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001820:	1b52      	subs	r2, r2, r5
 8001822:	6122      	str	r2, [r4, #16]
 8001824:	f8cd a000 	str.w	sl, [sp]
 8001828:	464b      	mov	r3, r9
 800182a:	aa03      	add	r2, sp, #12
 800182c:	4621      	mov	r1, r4
 800182e:	4640      	mov	r0, r8
 8001830:	f7ff fee4 	bl	80015fc <_printf_common>
 8001834:	3001      	adds	r0, #1
 8001836:	d14a      	bne.n	80018ce <_printf_i+0x1f6>
 8001838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800183c:	b004      	add	sp, #16
 800183e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001842:	6823      	ldr	r3, [r4, #0]
 8001844:	f043 0320 	orr.w	r3, r3, #32
 8001848:	6023      	str	r3, [r4, #0]
 800184a:	4833      	ldr	r0, [pc, #204]	; (8001918 <_printf_i+0x240>)
 800184c:	2778      	movs	r7, #120	; 0x78
 800184e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001852:	6823      	ldr	r3, [r4, #0]
 8001854:	6829      	ldr	r1, [r5, #0]
 8001856:	061f      	lsls	r7, r3, #24
 8001858:	f851 6b04 	ldr.w	r6, [r1], #4
 800185c:	d402      	bmi.n	8001864 <_printf_i+0x18c>
 800185e:	065f      	lsls	r7, r3, #25
 8001860:	bf48      	it	mi
 8001862:	b2b6      	uxthmi	r6, r6
 8001864:	07df      	lsls	r7, r3, #31
 8001866:	bf48      	it	mi
 8001868:	f043 0320 	orrmi.w	r3, r3, #32
 800186c:	6029      	str	r1, [r5, #0]
 800186e:	bf48      	it	mi
 8001870:	6023      	strmi	r3, [r4, #0]
 8001872:	b91e      	cbnz	r6, 800187c <_printf_i+0x1a4>
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	f023 0320 	bic.w	r3, r3, #32
 800187a:	6023      	str	r3, [r4, #0]
 800187c:	2310      	movs	r3, #16
 800187e:	e7a7      	b.n	80017d0 <_printf_i+0xf8>
 8001880:	4824      	ldr	r0, [pc, #144]	; (8001914 <_printf_i+0x23c>)
 8001882:	e7e4      	b.n	800184e <_printf_i+0x176>
 8001884:	4615      	mov	r5, r2
 8001886:	e7bd      	b.n	8001804 <_printf_i+0x12c>
 8001888:	682b      	ldr	r3, [r5, #0]
 800188a:	6826      	ldr	r6, [r4, #0]
 800188c:	6961      	ldr	r1, [r4, #20]
 800188e:	1d18      	adds	r0, r3, #4
 8001890:	6028      	str	r0, [r5, #0]
 8001892:	0635      	lsls	r5, r6, #24
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	d501      	bpl.n	800189c <_printf_i+0x1c4>
 8001898:	6019      	str	r1, [r3, #0]
 800189a:	e002      	b.n	80018a2 <_printf_i+0x1ca>
 800189c:	0670      	lsls	r0, r6, #25
 800189e:	d5fb      	bpl.n	8001898 <_printf_i+0x1c0>
 80018a0:	8019      	strh	r1, [r3, #0]
 80018a2:	2300      	movs	r3, #0
 80018a4:	6123      	str	r3, [r4, #16]
 80018a6:	4615      	mov	r5, r2
 80018a8:	e7bc      	b.n	8001824 <_printf_i+0x14c>
 80018aa:	682b      	ldr	r3, [r5, #0]
 80018ac:	1d1a      	adds	r2, r3, #4
 80018ae:	602a      	str	r2, [r5, #0]
 80018b0:	681d      	ldr	r5, [r3, #0]
 80018b2:	6862      	ldr	r2, [r4, #4]
 80018b4:	2100      	movs	r1, #0
 80018b6:	4628      	mov	r0, r5
 80018b8:	f7fe fca2 	bl	8000200 <memchr>
 80018bc:	b108      	cbz	r0, 80018c2 <_printf_i+0x1ea>
 80018be:	1b40      	subs	r0, r0, r5
 80018c0:	6060      	str	r0, [r4, #4]
 80018c2:	6863      	ldr	r3, [r4, #4]
 80018c4:	6123      	str	r3, [r4, #16]
 80018c6:	2300      	movs	r3, #0
 80018c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018cc:	e7aa      	b.n	8001824 <_printf_i+0x14c>
 80018ce:	6923      	ldr	r3, [r4, #16]
 80018d0:	462a      	mov	r2, r5
 80018d2:	4649      	mov	r1, r9
 80018d4:	4640      	mov	r0, r8
 80018d6:	47d0      	blx	sl
 80018d8:	3001      	adds	r0, #1
 80018da:	d0ad      	beq.n	8001838 <_printf_i+0x160>
 80018dc:	6823      	ldr	r3, [r4, #0]
 80018de:	079b      	lsls	r3, r3, #30
 80018e0:	d413      	bmi.n	800190a <_printf_i+0x232>
 80018e2:	68e0      	ldr	r0, [r4, #12]
 80018e4:	9b03      	ldr	r3, [sp, #12]
 80018e6:	4298      	cmp	r0, r3
 80018e8:	bfb8      	it	lt
 80018ea:	4618      	movlt	r0, r3
 80018ec:	e7a6      	b.n	800183c <_printf_i+0x164>
 80018ee:	2301      	movs	r3, #1
 80018f0:	4632      	mov	r2, r6
 80018f2:	4649      	mov	r1, r9
 80018f4:	4640      	mov	r0, r8
 80018f6:	47d0      	blx	sl
 80018f8:	3001      	adds	r0, #1
 80018fa:	d09d      	beq.n	8001838 <_printf_i+0x160>
 80018fc:	3501      	adds	r5, #1
 80018fe:	68e3      	ldr	r3, [r4, #12]
 8001900:	9903      	ldr	r1, [sp, #12]
 8001902:	1a5b      	subs	r3, r3, r1
 8001904:	42ab      	cmp	r3, r5
 8001906:	dcf2      	bgt.n	80018ee <_printf_i+0x216>
 8001908:	e7eb      	b.n	80018e2 <_printf_i+0x20a>
 800190a:	2500      	movs	r5, #0
 800190c:	f104 0619 	add.w	r6, r4, #25
 8001910:	e7f5      	b.n	80018fe <_printf_i+0x226>
 8001912:	bf00      	nop
 8001914:	08001dcd 	.word	0x08001dcd
 8001918:	08001dde 	.word	0x08001dde

0800191c <__swbuf_r>:
 800191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191e:	460e      	mov	r6, r1
 8001920:	4614      	mov	r4, r2
 8001922:	4605      	mov	r5, r0
 8001924:	b118      	cbz	r0, 800192e <__swbuf_r+0x12>
 8001926:	6a03      	ldr	r3, [r0, #32]
 8001928:	b90b      	cbnz	r3, 800192e <__swbuf_r+0x12>
 800192a:	f7ff f93b 	bl	8000ba4 <__sinit>
 800192e:	69a3      	ldr	r3, [r4, #24]
 8001930:	60a3      	str	r3, [r4, #8]
 8001932:	89a3      	ldrh	r3, [r4, #12]
 8001934:	071a      	lsls	r2, r3, #28
 8001936:	d525      	bpl.n	8001984 <__swbuf_r+0x68>
 8001938:	6923      	ldr	r3, [r4, #16]
 800193a:	b31b      	cbz	r3, 8001984 <__swbuf_r+0x68>
 800193c:	6823      	ldr	r3, [r4, #0]
 800193e:	6922      	ldr	r2, [r4, #16]
 8001940:	1a98      	subs	r0, r3, r2
 8001942:	6963      	ldr	r3, [r4, #20]
 8001944:	b2f6      	uxtb	r6, r6
 8001946:	4283      	cmp	r3, r0
 8001948:	4637      	mov	r7, r6
 800194a:	dc04      	bgt.n	8001956 <__swbuf_r+0x3a>
 800194c:	4621      	mov	r1, r4
 800194e:	4628      	mov	r0, r5
 8001950:	f7ff fbdc 	bl	800110c <_fflush_r>
 8001954:	b9e0      	cbnz	r0, 8001990 <__swbuf_r+0x74>
 8001956:	68a3      	ldr	r3, [r4, #8]
 8001958:	3b01      	subs	r3, #1
 800195a:	60a3      	str	r3, [r4, #8]
 800195c:	6823      	ldr	r3, [r4, #0]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	6022      	str	r2, [r4, #0]
 8001962:	701e      	strb	r6, [r3, #0]
 8001964:	6962      	ldr	r2, [r4, #20]
 8001966:	1c43      	adds	r3, r0, #1
 8001968:	429a      	cmp	r2, r3
 800196a:	d004      	beq.n	8001976 <__swbuf_r+0x5a>
 800196c:	89a3      	ldrh	r3, [r4, #12]
 800196e:	07db      	lsls	r3, r3, #31
 8001970:	d506      	bpl.n	8001980 <__swbuf_r+0x64>
 8001972:	2e0a      	cmp	r6, #10
 8001974:	d104      	bne.n	8001980 <__swbuf_r+0x64>
 8001976:	4621      	mov	r1, r4
 8001978:	4628      	mov	r0, r5
 800197a:	f7ff fbc7 	bl	800110c <_fflush_r>
 800197e:	b938      	cbnz	r0, 8001990 <__swbuf_r+0x74>
 8001980:	4638      	mov	r0, r7
 8001982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001984:	4621      	mov	r1, r4
 8001986:	4628      	mov	r0, r5
 8001988:	f000 f806 	bl	8001998 <__swsetup_r>
 800198c:	2800      	cmp	r0, #0
 800198e:	d0d5      	beq.n	800193c <__swbuf_r+0x20>
 8001990:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001994:	e7f4      	b.n	8001980 <__swbuf_r+0x64>
	...

08001998 <__swsetup_r>:
 8001998:	b538      	push	{r3, r4, r5, lr}
 800199a:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <__swsetup_r+0xac>)
 800199c:	4605      	mov	r5, r0
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	460c      	mov	r4, r1
 80019a2:	b118      	cbz	r0, 80019ac <__swsetup_r+0x14>
 80019a4:	6a03      	ldr	r3, [r0, #32]
 80019a6:	b90b      	cbnz	r3, 80019ac <__swsetup_r+0x14>
 80019a8:	f7ff f8fc 	bl	8000ba4 <__sinit>
 80019ac:	89a3      	ldrh	r3, [r4, #12]
 80019ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80019b2:	0718      	lsls	r0, r3, #28
 80019b4:	d422      	bmi.n	80019fc <__swsetup_r+0x64>
 80019b6:	06d9      	lsls	r1, r3, #27
 80019b8:	d407      	bmi.n	80019ca <__swsetup_r+0x32>
 80019ba:	2309      	movs	r3, #9
 80019bc:	602b      	str	r3, [r5, #0]
 80019be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80019c2:	81a3      	strh	r3, [r4, #12]
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019c8:	e034      	b.n	8001a34 <__swsetup_r+0x9c>
 80019ca:	0758      	lsls	r0, r3, #29
 80019cc:	d512      	bpl.n	80019f4 <__swsetup_r+0x5c>
 80019ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80019d0:	b141      	cbz	r1, 80019e4 <__swsetup_r+0x4c>
 80019d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80019d6:	4299      	cmp	r1, r3
 80019d8:	d002      	beq.n	80019e0 <__swsetup_r+0x48>
 80019da:	4628      	mov	r0, r5
 80019dc:	f7ff fc7e 	bl	80012dc <_free_r>
 80019e0:	2300      	movs	r3, #0
 80019e2:	6363      	str	r3, [r4, #52]	; 0x34
 80019e4:	89a3      	ldrh	r3, [r4, #12]
 80019e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80019ea:	81a3      	strh	r3, [r4, #12]
 80019ec:	2300      	movs	r3, #0
 80019ee:	6063      	str	r3, [r4, #4]
 80019f0:	6923      	ldr	r3, [r4, #16]
 80019f2:	6023      	str	r3, [r4, #0]
 80019f4:	89a3      	ldrh	r3, [r4, #12]
 80019f6:	f043 0308 	orr.w	r3, r3, #8
 80019fa:	81a3      	strh	r3, [r4, #12]
 80019fc:	6923      	ldr	r3, [r4, #16]
 80019fe:	b94b      	cbnz	r3, 8001a14 <__swsetup_r+0x7c>
 8001a00:	89a3      	ldrh	r3, [r4, #12]
 8001a02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a0a:	d003      	beq.n	8001a14 <__swsetup_r+0x7c>
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	4628      	mov	r0, r5
 8001a10:	f000 f840 	bl	8001a94 <__smakebuf_r>
 8001a14:	89a0      	ldrh	r0, [r4, #12]
 8001a16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001a1a:	f010 0301 	ands.w	r3, r0, #1
 8001a1e:	d00a      	beq.n	8001a36 <__swsetup_r+0x9e>
 8001a20:	2300      	movs	r3, #0
 8001a22:	60a3      	str	r3, [r4, #8]
 8001a24:	6963      	ldr	r3, [r4, #20]
 8001a26:	425b      	negs	r3, r3
 8001a28:	61a3      	str	r3, [r4, #24]
 8001a2a:	6923      	ldr	r3, [r4, #16]
 8001a2c:	b943      	cbnz	r3, 8001a40 <__swsetup_r+0xa8>
 8001a2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001a32:	d1c4      	bne.n	80019be <__swsetup_r+0x26>
 8001a34:	bd38      	pop	{r3, r4, r5, pc}
 8001a36:	0781      	lsls	r1, r0, #30
 8001a38:	bf58      	it	pl
 8001a3a:	6963      	ldrpl	r3, [r4, #20]
 8001a3c:	60a3      	str	r3, [r4, #8]
 8001a3e:	e7f4      	b.n	8001a2a <__swsetup_r+0x92>
 8001a40:	2000      	movs	r0, #0
 8001a42:	e7f7      	b.n	8001a34 <__swsetup_r+0x9c>
 8001a44:	20000080 	.word	0x20000080

08001a48 <__swhatbuf_r>:
 8001a48:	b570      	push	{r4, r5, r6, lr}
 8001a4a:	460c      	mov	r4, r1
 8001a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a50:	2900      	cmp	r1, #0
 8001a52:	b096      	sub	sp, #88	; 0x58
 8001a54:	4615      	mov	r5, r2
 8001a56:	461e      	mov	r6, r3
 8001a58:	da0d      	bge.n	8001a76 <__swhatbuf_r+0x2e>
 8001a5a:	89a3      	ldrh	r3, [r4, #12]
 8001a5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001a60:	f04f 0100 	mov.w	r1, #0
 8001a64:	bf0c      	ite	eq
 8001a66:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001a6a:	2340      	movne	r3, #64	; 0x40
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	6031      	str	r1, [r6, #0]
 8001a70:	602b      	str	r3, [r5, #0]
 8001a72:	b016      	add	sp, #88	; 0x58
 8001a74:	bd70      	pop	{r4, r5, r6, pc}
 8001a76:	466a      	mov	r2, sp
 8001a78:	f000 f848 	bl	8001b0c <_fstat_r>
 8001a7c:	2800      	cmp	r0, #0
 8001a7e:	dbec      	blt.n	8001a5a <__swhatbuf_r+0x12>
 8001a80:	9901      	ldr	r1, [sp, #4]
 8001a82:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001a86:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001a8a:	4259      	negs	r1, r3
 8001a8c:	4159      	adcs	r1, r3
 8001a8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a92:	e7eb      	b.n	8001a6c <__swhatbuf_r+0x24>

08001a94 <__smakebuf_r>:
 8001a94:	898b      	ldrh	r3, [r1, #12]
 8001a96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a98:	079d      	lsls	r5, r3, #30
 8001a9a:	4606      	mov	r6, r0
 8001a9c:	460c      	mov	r4, r1
 8001a9e:	d507      	bpl.n	8001ab0 <__smakebuf_r+0x1c>
 8001aa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001aa4:	6023      	str	r3, [r4, #0]
 8001aa6:	6123      	str	r3, [r4, #16]
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	6163      	str	r3, [r4, #20]
 8001aac:	b002      	add	sp, #8
 8001aae:	bd70      	pop	{r4, r5, r6, pc}
 8001ab0:	ab01      	add	r3, sp, #4
 8001ab2:	466a      	mov	r2, sp
 8001ab4:	f7ff ffc8 	bl	8001a48 <__swhatbuf_r>
 8001ab8:	9900      	ldr	r1, [sp, #0]
 8001aba:	4605      	mov	r5, r0
 8001abc:	4630      	mov	r0, r6
 8001abe:	f7ff fa1f 	bl	8000f00 <_malloc_r>
 8001ac2:	b948      	cbnz	r0, 8001ad8 <__smakebuf_r+0x44>
 8001ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ac8:	059a      	lsls	r2, r3, #22
 8001aca:	d4ef      	bmi.n	8001aac <__smakebuf_r+0x18>
 8001acc:	f023 0303 	bic.w	r3, r3, #3
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	81a3      	strh	r3, [r4, #12]
 8001ad6:	e7e3      	b.n	8001aa0 <__smakebuf_r+0xc>
 8001ad8:	89a3      	ldrh	r3, [r4, #12]
 8001ada:	6020      	str	r0, [r4, #0]
 8001adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae0:	81a3      	strh	r3, [r4, #12]
 8001ae2:	9b00      	ldr	r3, [sp, #0]
 8001ae4:	6163      	str	r3, [r4, #20]
 8001ae6:	9b01      	ldr	r3, [sp, #4]
 8001ae8:	6120      	str	r0, [r4, #16]
 8001aea:	b15b      	cbz	r3, 8001b04 <__smakebuf_r+0x70>
 8001aec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001af0:	4630      	mov	r0, r6
 8001af2:	f000 f81d 	bl	8001b30 <_isatty_r>
 8001af6:	b128      	cbz	r0, 8001b04 <__smakebuf_r+0x70>
 8001af8:	89a3      	ldrh	r3, [r4, #12]
 8001afa:	f023 0303 	bic.w	r3, r3, #3
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	81a3      	strh	r3, [r4, #12]
 8001b04:	89a3      	ldrh	r3, [r4, #12]
 8001b06:	431d      	orrs	r5, r3
 8001b08:	81a5      	strh	r5, [r4, #12]
 8001b0a:	e7cf      	b.n	8001aac <__smakebuf_r+0x18>

08001b0c <_fstat_r>:
 8001b0c:	b538      	push	{r3, r4, r5, lr}
 8001b0e:	4d07      	ldr	r5, [pc, #28]	; (8001b2c <_fstat_r+0x20>)
 8001b10:	2300      	movs	r3, #0
 8001b12:	4604      	mov	r4, r0
 8001b14:	4608      	mov	r0, r1
 8001b16:	4611      	mov	r1, r2
 8001b18:	602b      	str	r3, [r5, #0]
 8001b1a:	f7fe ff2e 	bl	800097a <_fstat>
 8001b1e:	1c43      	adds	r3, r0, #1
 8001b20:	d102      	bne.n	8001b28 <_fstat_r+0x1c>
 8001b22:	682b      	ldr	r3, [r5, #0]
 8001b24:	b103      	cbz	r3, 8001b28 <_fstat_r+0x1c>
 8001b26:	6023      	str	r3, [r4, #0]
 8001b28:	bd38      	pop	{r3, r4, r5, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000304 	.word	0x20000304

08001b30 <_isatty_r>:
 8001b30:	b538      	push	{r3, r4, r5, lr}
 8001b32:	4d06      	ldr	r5, [pc, #24]	; (8001b4c <_isatty_r+0x1c>)
 8001b34:	2300      	movs	r3, #0
 8001b36:	4604      	mov	r4, r0
 8001b38:	4608      	mov	r0, r1
 8001b3a:	602b      	str	r3, [r5, #0]
 8001b3c:	f7fe ff2d 	bl	800099a <_isatty>
 8001b40:	1c43      	adds	r3, r0, #1
 8001b42:	d102      	bne.n	8001b4a <_isatty_r+0x1a>
 8001b44:	682b      	ldr	r3, [r5, #0]
 8001b46:	b103      	cbz	r3, 8001b4a <_isatty_r+0x1a>
 8001b48:	6023      	str	r3, [r4, #0]
 8001b4a:	bd38      	pop	{r3, r4, r5, pc}
 8001b4c:	20000304 	.word	0x20000304

08001b50 <_raise_r>:
 8001b50:	291f      	cmp	r1, #31
 8001b52:	b538      	push	{r3, r4, r5, lr}
 8001b54:	4604      	mov	r4, r0
 8001b56:	460d      	mov	r5, r1
 8001b58:	d904      	bls.n	8001b64 <_raise_r+0x14>
 8001b5a:	2316      	movs	r3, #22
 8001b5c:	6003      	str	r3, [r0, #0]
 8001b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b62:	bd38      	pop	{r3, r4, r5, pc}
 8001b64:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001b66:	b112      	cbz	r2, 8001b6e <_raise_r+0x1e>
 8001b68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001b6c:	b94b      	cbnz	r3, 8001b82 <_raise_r+0x32>
 8001b6e:	4620      	mov	r0, r4
 8001b70:	f000 f830 	bl	8001bd4 <_getpid_r>
 8001b74:	462a      	mov	r2, r5
 8001b76:	4601      	mov	r1, r0
 8001b78:	4620      	mov	r0, r4
 8001b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b7e:	f000 b817 	b.w	8001bb0 <_kill_r>
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d00a      	beq.n	8001b9c <_raise_r+0x4c>
 8001b86:	1c59      	adds	r1, r3, #1
 8001b88:	d103      	bne.n	8001b92 <_raise_r+0x42>
 8001b8a:	2316      	movs	r3, #22
 8001b8c:	6003      	str	r3, [r0, #0]
 8001b8e:	2001      	movs	r0, #1
 8001b90:	e7e7      	b.n	8001b62 <_raise_r+0x12>
 8001b92:	2400      	movs	r4, #0
 8001b94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001b98:	4628      	mov	r0, r5
 8001b9a:	4798      	blx	r3
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	e7e0      	b.n	8001b62 <_raise_r+0x12>

08001ba0 <raise>:
 8001ba0:	4b02      	ldr	r3, [pc, #8]	; (8001bac <raise+0xc>)
 8001ba2:	4601      	mov	r1, r0
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	f7ff bfd3 	b.w	8001b50 <_raise_r>
 8001baa:	bf00      	nop
 8001bac:	20000080 	.word	0x20000080

08001bb0 <_kill_r>:
 8001bb0:	b538      	push	{r3, r4, r5, lr}
 8001bb2:	4d07      	ldr	r5, [pc, #28]	; (8001bd0 <_kill_r+0x20>)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	4604      	mov	r4, r0
 8001bb8:	4608      	mov	r0, r1
 8001bba:	4611      	mov	r1, r2
 8001bbc:	602b      	str	r3, [r5, #0]
 8001bbe:	f7fe fe7d 	bl	80008bc <_kill>
 8001bc2:	1c43      	adds	r3, r0, #1
 8001bc4:	d102      	bne.n	8001bcc <_kill_r+0x1c>
 8001bc6:	682b      	ldr	r3, [r5, #0]
 8001bc8:	b103      	cbz	r3, 8001bcc <_kill_r+0x1c>
 8001bca:	6023      	str	r3, [r4, #0]
 8001bcc:	bd38      	pop	{r3, r4, r5, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000304 	.word	0x20000304

08001bd4 <_getpid_r>:
 8001bd4:	f7fe be6a 	b.w	80008ac <_getpid>

08001bd8 <_init>:
 8001bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bda:	bf00      	nop
 8001bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bde:	bc08      	pop	{r3}
 8001be0:	469e      	mov	lr, r3
 8001be2:	4770      	bx	lr

08001be4 <_fini>:
 8001be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be6:	bf00      	nop
 8001be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bea:	bc08      	pop	{r3}
 8001bec:	469e      	mov	lr, r3
 8001bee:	4770      	bx	lr
