
C_LAB_TASK_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004a0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000634  08000634  00010634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000648  08000648  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08000648  08000648  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000648  08000648  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000648  08000648  00010648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800064c  0800064c  0001064c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08000650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          00000164  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000018c  2000018c  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000d2a  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000037f  00000000  00000000  00020dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000a8  00000000  00000000  00021148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000071  00000000  00000000  000211f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00015c46  00000000  00000000  00021261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000f00  00000000  00000000  00036ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000762fa  00000000  00000000  00037da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000001e8  00000000  00000000  000ae0a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  000ae28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800061c 	.word	0x0800061c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	0800061c 	.word	0x0800061c

080001d4 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	uint8_t* string = "This is a string!\r\n";
 80001da:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <main+0x1c>)
 80001dc:	607b      	str	r3, [r7, #4]

//	void (*completion_function)(uint32_t) = &finished_transmission;

	SerialInitialise(BAUD_115200, &USART1_PORT, &USART_callback);
 80001de:	4a05      	ldr	r2, [pc, #20]	; (80001f4 <main+0x20>)
 80001e0:	4905      	ldr	r1, [pc, #20]	; (80001f8 <main+0x24>)
 80001e2:	2004      	movs	r0, #4
 80001e4:	f000 f852 	bl	800028c <SerialInitialise>
	enable_uart_interrupt(&USART1_PORT);
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <main+0x24>)
 80001ea:	f000 f93f 	bl	800046c <enable_uart_interrupt>

	/* Loop forever */
	for(;;) {
 80001ee:	e7fe      	b.n	80001ee <main+0x1a>
 80001f0:	08000634 	.word	0x08000634
 80001f4:	08000549 	.word	0x08000549
 80001f8:	20000000 	.word	0x20000000

080001fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020a:	2b00      	cmp	r3, #0
 800020c:	db0b      	blt.n	8000226 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	f003 021f 	and.w	r2, r3, #31
 8000214:	4907      	ldr	r1, [pc, #28]	; (8000234 <__NVIC_EnableIRQ+0x38>)
 8000216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021a:	095b      	lsrs	r3, r3, #5
 800021c:	2001      	movs	r0, #1
 800021e:	fa00 f202 	lsl.w	r2, r0, r2
 8000222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000226:	bf00      	nop
 8000228:	370c      	adds	r7, #12
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	e000e100 	.word	0xe000e100

08000238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	6039      	str	r1, [r7, #0]
 8000242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000248:	2b00      	cmp	r3, #0
 800024a:	db0a      	blt.n	8000262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	b2da      	uxtb	r2, r3
 8000250:	490c      	ldr	r1, [pc, #48]	; (8000284 <__NVIC_SetPriority+0x4c>)
 8000252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000256:	0112      	lsls	r2, r2, #4
 8000258:	b2d2      	uxtb	r2, r2
 800025a:	440b      	add	r3, r1
 800025c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000260:	e00a      	b.n	8000278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	b2da      	uxtb	r2, r3
 8000266:	4908      	ldr	r1, [pc, #32]	; (8000288 <__NVIC_SetPriority+0x50>)
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	f003 030f 	and.w	r3, r3, #15
 800026e:	3b04      	subs	r3, #4
 8000270:	0112      	lsls	r2, r2, #4
 8000272:	b2d2      	uxtb	r2, r2
 8000274:	440b      	add	r3, r1
 8000276:	761a      	strb	r2, [r3, #24]
}
 8000278:	bf00      	nop
 800027a:	370c      	adds	r7, #12
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000e100 	.word	0xe000e100
 8000288:	e000ed00 	.word	0xe000ed00

0800028c <SerialInitialise>:
		0x00 // default function pointer is NULL
		};

// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 800028c:	b480      	push	{r7}
 800028e:	b087      	sub	sp, #28
 8000290:	af00      	add	r7, sp, #0
 8000292:	60f8      	str	r0, [r7, #12]
 8000294:	60b9      	str	r1, [r7, #8]
 8000296:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	625a      	str	r2, [r3, #36]	; 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800029e:	4b39      	ldr	r3, [pc, #228]	; (8000384 <SerialInitialise+0xf8>)
 80002a0:	69db      	ldr	r3, [r3, #28]
 80002a2:	4a38      	ldr	r2, [pc, #224]	; (8000384 <SerialInitialise+0xf8>)
 80002a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002a8:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002aa:	4b36      	ldr	r3, [pc, #216]	; (8000384 <SerialInitialise+0xf8>)
 80002ac:	699b      	ldr	r3, [r3, #24]
 80002ae:	4a35      	ldr	r2, [pc, #212]	; (8000384 <SerialInitialise+0xf8>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	691a      	ldr	r2, [r3, #16]
 80002ba:	4b32      	ldr	r3, [pc, #200]	; (8000384 <SerialInitialise+0xf8>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	4931      	ldr	r1, [pc, #196]	; (8000384 <SerialInitialise+0xf8>)
 80002c0:	4313      	orrs	r3, r2
 80002c2:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	68ba      	ldr	r2, [r7, #8]
 80002ca:	6952      	ldr	r2, [r2, #20]
 80002cc:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	68ba      	ldr	r2, [r7, #8]
 80002d4:	6992      	ldr	r2, [r2, #24]
 80002d6:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	69d9      	ldr	r1, [r3, #28]
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	6a1a      	ldr	r2, [r3, #32]
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	430a      	orrs	r2, r1
 80002e8:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	6a19      	ldr	r1, [r3, #32]
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	685b      	ldr	r3, [r3, #4]
 80002f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	430a      	orrs	r2, r1
 80002fa:	625a      	str	r2, [r3, #36]	; 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	68da      	ldr	r2, [r3, #12]
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SerialInitialise+0xf8>)
 8000302:	69db      	ldr	r3, [r3, #28]
 8000304:	491f      	ldr	r1, [pc, #124]	; (8000384 <SerialInitialise+0xf8>)
 8000306:	4313      	orrs	r3, r2
 8000308:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	689a      	ldr	r2, [r3, #8]
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SerialInitialise+0xf8>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	491c      	ldr	r1, [pc, #112]	; (8000384 <SerialInitialise+0xf8>)
 8000314:	4313      	orrs	r3, r2
 8000316:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	330c      	adds	r3, #12
 800031e:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	2b04      	cmp	r3, #4
 8000324:	d820      	bhi.n	8000368 <SerialInitialise+0xdc>
 8000326:	a201      	add	r2, pc, #4	; (adr r2, 800032c <SerialInitialise+0xa0>)
 8000328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800032c:	08000341 	.word	0x08000341
 8000330:	08000349 	.word	0x08000349
 8000334:	08000351 	.word	0x08000351
 8000338:	08000359 	.word	0x08000359
 800033c:	08000361 	.word	0x08000361
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000340:	697b      	ldr	r3, [r7, #20]
 8000342:	2246      	movs	r2, #70	; 0x46
 8000344:	801a      	strh	r2, [r3, #0]
		break;
 8000346:	e00f      	b.n	8000368 <SerialInitialise+0xdc>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	2246      	movs	r2, #70	; 0x46
 800034c:	801a      	strh	r2, [r3, #0]
		break;
 800034e:	e00b      	b.n	8000368 <SerialInitialise+0xdc>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	2246      	movs	r2, #70	; 0x46
 8000354:	801a      	strh	r2, [r3, #0]
		break;
 8000356:	e007      	b.n	8000368 <SerialInitialise+0xdc>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	2246      	movs	r2, #70	; 0x46
 800035c:	801a      	strh	r2, [r3, #0]
		break;
 800035e:	e003      	b.n	8000368 <SerialInitialise+0xdc>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	2246      	movs	r2, #70	; 0x46
 8000364:	801a      	strh	r2, [r3, #0]
		break;
 8000366:	bf00      	nop
	}

	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f042 020d 	orr.w	r2, r2, #13
 8000376:	601a      	str	r2, [r3, #0]
}
 8000378:	bf00      	nop
 800037a:	371c      	adds	r7, #28
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	40021000 	.word	0x40021000

08000388 <getChar>:
uint8_t *last_word[BUFFER_SIZE] = {0};
int i = 0;

void (*on_key_input)() = 0x00;

void getChar(SerialPort *serial_port, uint8_t* buffer, uint8_t* last_word, int* i) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	60b9      	str	r1, [r7, #8]
 8000392:	607a      	str	r2, [r7, #4]
 8000394:	603b      	str	r3, [r7, #0]
	// gets the current count in the word
	uint8_t x = *i;
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	74fb      	strb	r3, [r7, #19]
	// checks the flags of the input port - clears them if raised
	if ((serial_port->UART->ISR & USART_ISR_ORE) != 0 || (serial_port->UART->ISR & USART_ISR_FE) != 0){
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	f003 0308 	and.w	r3, r3, #8
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d106      	bne.n	80003b8 <getChar+0x30>
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	69db      	ldr	r3, [r3, #28]
 80003b0:	f003 0302 	and.w	r3, r3, #2
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d00f      	beq.n	80003d8 <getChar+0x50>
		serial_port->UART->ICR |= USART_ICR_ORECF;
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	6a1a      	ldr	r2, [r3, #32]
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f042 0208 	orr.w	r2, r2, #8
 80003c6:	621a      	str	r2, [r3, #32]
		serial_port->UART->ICR |= USART_ICR_FECF;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	6a1a      	ldr	r2, [r3, #32]
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f042 0202 	orr.w	r2, r2, #2
 80003d6:	621a      	str	r2, [r3, #32]
	}
	// if the receive not empty flag is not 0 i.e. there is a character ready to be received
	if ((serial_port->UART->ISR & USART_ISR_RXNE) != 0){
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f003 0320 	and.w	r3, r3, #32
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d03c      	beq.n	8000460 <getChar+0xd8>
		// get the value from the Read Data Register (RDR)
		buffer[x] = serial_port->UART->RDR;
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80003ec:	b299      	uxth	r1, r3
 80003ee:	7cfb      	ldrb	r3, [r7, #19]
 80003f0:	68ba      	ldr	r2, [r7, #8]
 80003f2:	4413      	add	r3, r2
 80003f4:	b2ca      	uxtb	r2, r1
 80003f6:	701a      	strb	r2, [r3, #0]
		// increment the counter for the position in the word
		*i += 1;
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	1c5a      	adds	r2, r3, #1
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	601a      	str	r2, [r3, #0]
		if (buffer[x] == TERMINATION_CHAR) {
 8000402:	7cfb      	ldrb	r3, [r7, #19]
 8000404:	68ba      	ldr	r2, [r7, #8]
 8000406:	4413      	add	r3, r2
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2b0d      	cmp	r3, #13
 800040c:	d128      	bne.n	8000460 <getChar+0xd8>
			// add a newline to the buffer for better output aesthetic
			buffer[x+1] = NEWLINE_CHAR;
 800040e:	7cfb      	ldrb	r3, [r7, #19]
 8000410:	3301      	adds	r3, #1
 8000412:	68ba      	ldr	r2, [r7, #8]
 8000414:	4413      	add	r3, r2
 8000416:	220a      	movs	r2, #10
 8000418:	701a      	strb	r2, [r3, #0]
			// can be removed - demonstrate double buffer
			SerialOutputString(buffer, &USART1_PORT);
 800041a:	4913      	ldr	r1, [pc, #76]	; (8000468 <getChar+0xe0>)
 800041c:	68b8      	ldr	r0, [r7, #8]
 800041e:	f000 f876 	bl	800050e <SerialOutputString>
			SerialOutputString(last_word, &USART1_PORT);
 8000422:	4911      	ldr	r1, [pc, #68]	; (8000468 <getChar+0xe0>)
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f000 f872 	bl	800050e <SerialOutputString>
			// any additional handling should go here - before buffer is cleared

			serial_port->completion_function(last_word);
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	4610      	mov	r0, r2
 8000432:	4798      	blx	r3

			// copy word to previous word and then clear current buffer
			strncpy(last_word, buffer, BUFFER_SIZE);
 8000434:	2228      	movs	r2, #40	; 0x28
 8000436:	68b9      	ldr	r1, [r7, #8]
 8000438:	6878      	ldr	r0, [r7, #4]
 800043a:	f000 f8b8 	bl	80005ae <strncpy>
			for (int j = 0; j < BUFFER_SIZE; j++){
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]
 8000442:	e007      	b.n	8000454 <getChar+0xcc>
				buffer[j] = 0;
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	68ba      	ldr	r2, [r7, #8]
 8000448:	4413      	add	r3, r2
 800044a:	2200      	movs	r2, #0
 800044c:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < BUFFER_SIZE; j++){
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	3301      	adds	r3, #1
 8000452:	617b      	str	r3, [r7, #20]
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	2b27      	cmp	r3, #39	; 0x27
 8000458:	ddf4      	ble.n	8000444 <getChar+0xbc>
			}
			// reset the counter to 0
			*i = 0;
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]

		}
	}
}
 8000460:	bf00      	nop
 8000462:	3718      	adds	r7, #24
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000000 	.word	0x20000000

0800046c <enable_uart_interrupt>:
void enable_uart_interrupt(SerialPort *serial_port){
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000474:	b672      	cpsid	i
}
 8000476:	bf00      	nop
	__disable_irq();

	// enable the read data not empty interrupt enable bit in the control register
	serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f042 0220 	orr.w	r2, r2, #32
 8000486:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(USART1_IRQn, 1);
 8000488:	2101      	movs	r1, #1
 800048a:	2025      	movs	r0, #37	; 0x25
 800048c:	f7ff fed4 	bl	8000238 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8000490:	2025      	movs	r0, #37	; 0x25
 8000492:	f7ff feb3 	bl	80001fc <__NVIC_EnableIRQ>

	// set the interrupt function
	on_key_input = &getChar;
 8000496:	4b04      	ldr	r3, [pc, #16]	; (80004a8 <enable_uart_interrupt+0x3c>)
 8000498:	4a04      	ldr	r2, [pc, #16]	; (80004ac <enable_uart_interrupt+0x40>)
 800049a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800049c:	b662      	cpsie	i
}
 800049e:	bf00      	nop

	__enable_irq();
}
 80004a0:	bf00      	nop
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000188 	.word	0x20000188
 80004ac:	08000389 	.word	0x08000389

080004b0 <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler(){
 80004b0:	b598      	push	{r3, r4, r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	// should receive a character and store it in a buffer then return
	on_key_input(&USART1_PORT, buffer, last_word, &i);
 80004b4:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <USART1_EXTI25_IRQHandler+0x18>)
 80004b6:	681c      	ldr	r4, [r3, #0]
 80004b8:	4b04      	ldr	r3, [pc, #16]	; (80004cc <USART1_EXTI25_IRQHandler+0x1c>)
 80004ba:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <USART1_EXTI25_IRQHandler+0x20>)
 80004bc:	4905      	ldr	r1, [pc, #20]	; (80004d4 <USART1_EXTI25_IRQHandler+0x24>)
 80004be:	4806      	ldr	r0, [pc, #24]	; (80004d8 <USART1_EXTI25_IRQHandler+0x28>)
 80004c0:	47a0      	blx	r4
}
 80004c2:	bf00      	nop
 80004c4:	bd98      	pop	{r3, r4, r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000188 	.word	0x20000188
 80004cc:	20000184 	.word	0x20000184
 80004d0:	200000e4 	.word	0x200000e4
 80004d4:	20000044 	.word	0x20000044
 80004d8:	20000000 	.word	0x20000000

080004dc <SerialOutputChar>:
||------------------||
||	  UART Output	||
||------------------||
*/

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	6039      	str	r1, [r7, #0]
 80004e6:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 80004e8:	bf00      	nop
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	69db      	ldr	r3, [r3, #28]
 80004f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0f8      	beq.n	80004ea <SerialOutputChar+0xe>
	}
	serial_port->UART->TDR = data;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	79fa      	ldrb	r2, [r7, #7]
 80004fe:	b292      	uxth	r2, r2
 8000500:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <SerialOutputString>:


void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 800050e:	b580      	push	{r7, lr}
 8000510:	b084      	sub	sp, #16
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
 8000516:	6039      	str	r1, [r7, #0]
	uint32_t counter = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 800051c:	e00b      	b.n	8000536 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	6839      	ldr	r1, [r7, #0]
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff ffd9 	bl	80004dc <SerialOutputChar>
		counter++;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	3301      	adds	r3, #1
 800052e:	60fb      	str	r3, [r7, #12]
		pt++;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	3301      	adds	r3, #1
 8000534:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d1ef      	bne.n	800051e <SerialOutputString+0x10>
	}
}
 800053e:	bf00      	nop
 8000540:	bf00      	nop
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <USART_callback>:
||------------------------------||
||	  UART Completion Function	||
||------------------------------||
*/

void USART_callback(uint8_t *string) {
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
//
//	if (instruct[0] == "led"){
//		SerialOutputString(instruct[1], &USART1_PORT);
//	}
//	SerialOutputString(string, &USART1_PORT);
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800055c:	480d      	ldr	r0, [pc, #52]	; (8000594 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800055e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000560:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000564:	480c      	ldr	r0, [pc, #48]	; (8000598 <LoopForever+0x6>)
  ldr r1, =_edata
 8000566:	490d      	ldr	r1, [pc, #52]	; (800059c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000568:	4a0d      	ldr	r2, [pc, #52]	; (80005a0 <LoopForever+0xe>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800056c:	e002      	b.n	8000574 <LoopCopyDataInit>

0800056e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000572:	3304      	adds	r3, #4

08000574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000578:	d3f9      	bcc.n	800056e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057a:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800057c:	4c0a      	ldr	r4, [pc, #40]	; (80005a8 <LoopForever+0x16>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000580:	e001      	b.n	8000586 <LoopFillZerobss>

08000582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000584:	3204      	adds	r2, #4

08000586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000588:	d3fb      	bcc.n	8000582 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800058a:	f000 f823 	bl	80005d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800058e:	f7ff fe21 	bl	80001d4 <main>

08000592 <LoopForever>:

LoopForever:
  b LoopForever
 8000592:	e7fe      	b.n	8000592 <LoopForever>
  ldr   r0, =_estack
 8000594:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800059c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80005a0:	08000650 	.word	0x08000650
  ldr r2, =_sbss
 80005a4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80005a8:	2000018c 	.word	0x2000018c

080005ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ac:	e7fe      	b.n	80005ac <ADC1_2_IRQHandler>

080005ae <strncpy>:
 80005ae:	b510      	push	{r4, lr}
 80005b0:	3901      	subs	r1, #1
 80005b2:	4603      	mov	r3, r0
 80005b4:	b132      	cbz	r2, 80005c4 <strncpy+0x16>
 80005b6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80005ba:	f803 4b01 	strb.w	r4, [r3], #1
 80005be:	3a01      	subs	r2, #1
 80005c0:	2c00      	cmp	r4, #0
 80005c2:	d1f7      	bne.n	80005b4 <strncpy+0x6>
 80005c4:	441a      	add	r2, r3
 80005c6:	2100      	movs	r1, #0
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d100      	bne.n	80005ce <strncpy+0x20>
 80005cc:	bd10      	pop	{r4, pc}
 80005ce:	f803 1b01 	strb.w	r1, [r3], #1
 80005d2:	e7f9      	b.n	80005c8 <strncpy+0x1a>

080005d4 <__libc_init_array>:
 80005d4:	b570      	push	{r4, r5, r6, lr}
 80005d6:	4d0d      	ldr	r5, [pc, #52]	; (800060c <__libc_init_array+0x38>)
 80005d8:	4c0d      	ldr	r4, [pc, #52]	; (8000610 <__libc_init_array+0x3c>)
 80005da:	1b64      	subs	r4, r4, r5
 80005dc:	10a4      	asrs	r4, r4, #2
 80005de:	2600      	movs	r6, #0
 80005e0:	42a6      	cmp	r6, r4
 80005e2:	d109      	bne.n	80005f8 <__libc_init_array+0x24>
 80005e4:	4d0b      	ldr	r5, [pc, #44]	; (8000614 <__libc_init_array+0x40>)
 80005e6:	4c0c      	ldr	r4, [pc, #48]	; (8000618 <__libc_init_array+0x44>)
 80005e8:	f000 f818 	bl	800061c <_init>
 80005ec:	1b64      	subs	r4, r4, r5
 80005ee:	10a4      	asrs	r4, r4, #2
 80005f0:	2600      	movs	r6, #0
 80005f2:	42a6      	cmp	r6, r4
 80005f4:	d105      	bne.n	8000602 <__libc_init_array+0x2e>
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005fc:	4798      	blx	r3
 80005fe:	3601      	adds	r6, #1
 8000600:	e7ee      	b.n	80005e0 <__libc_init_array+0xc>
 8000602:	f855 3b04 	ldr.w	r3, [r5], #4
 8000606:	4798      	blx	r3
 8000608:	3601      	adds	r6, #1
 800060a:	e7f2      	b.n	80005f2 <__libc_init_array+0x1e>
 800060c:	08000648 	.word	0x08000648
 8000610:	08000648 	.word	0x08000648
 8000614:	08000648 	.word	0x08000648
 8000618:	0800064c 	.word	0x0800064c

0800061c <_init>:
 800061c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800061e:	bf00      	nop
 8000620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000622:	bc08      	pop	{r3}
 8000624:	469e      	mov	lr, r3
 8000626:	4770      	bx	lr

08000628 <_fini>:
 8000628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062a:	bf00      	nop
 800062c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800062e:	bc08      	pop	{r3}
 8000630:	469e      	mov	lr, r3
 8000632:	4770      	bx	lr
