
C_LAB_TASK_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800188c  0800188c  0001188c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001988  08001988  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08001988  08001988  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001988  08001988  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001988  08001988  00011988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800198c  0800198c  0001198c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08001990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          000001c4  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000248  20000248  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000158e  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000005fa  00000000  00000000  00021685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000170  00000000  00000000  00021c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000fd  00000000  00000000  00021df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00016be2  00000000  00000000  00021eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001c7c  00000000  00000000  00038acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00078374  00000000  00000000  0003a74b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000e7c  00000000  00000000  000b2ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  000b393c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001874 	.word	0x08001874

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08001874 	.word	0x08001874

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	uint8_t* string = "This is a string!\r\n";
 8000286:	4b05      	ldr	r3, [pc, #20]	; (800029c <main+0x1c>)
 8000288:	607b      	str	r3, [r7, #4]

//	void (*completion_function)(uint32_t) = &finished_transmission;

	SerialInitialise(BAUD_115200, &USART1_PORT, &USART_callback);
 800028a:	4a05      	ldr	r2, [pc, #20]	; (80002a0 <main+0x20>)
 800028c:	4905      	ldr	r1, [pc, #20]	; (80002a4 <main+0x24>)
 800028e:	2004      	movs	r0, #4
 8000290:	f000 f852 	bl	8000338 <SerialInitialise>
	enable_uart_interrupt(&USART1_PORT);
 8000294:	4803      	ldr	r0, [pc, #12]	; (80002a4 <main+0x24>)
 8000296:	f000 f93f 	bl	8000518 <enable_uart_interrupt>

	/* Loop forever */
	for(;;) {
 800029a:	e7fe      	b.n	800029a <main+0x1a>
 800029c:	0800188c 	.word	0x0800188c
 80002a0:	080005f5 	.word	0x080005f5
 80002a4:	20000000 	.word	0x20000000

080002a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	db0b      	blt.n	80002d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	f003 021f 	and.w	r2, r3, #31
 80002c0:	4907      	ldr	r1, [pc, #28]	; (80002e0 <__NVIC_EnableIRQ+0x38>)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	095b      	lsrs	r3, r3, #5
 80002c8:	2001      	movs	r0, #1
 80002ca:	fa00 f202 	lsl.w	r2, r0, r2
 80002ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	e000e100 	.word	0xe000e100

080002e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	6039      	str	r1, [r7, #0]
 80002ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	db0a      	blt.n	800030e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	b2da      	uxtb	r2, r3
 80002fc:	490c      	ldr	r1, [pc, #48]	; (8000330 <__NVIC_SetPriority+0x4c>)
 80002fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000302:	0112      	lsls	r2, r2, #4
 8000304:	b2d2      	uxtb	r2, r2
 8000306:	440b      	add	r3, r1
 8000308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800030c:	e00a      	b.n	8000324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	b2da      	uxtb	r2, r3
 8000312:	4908      	ldr	r1, [pc, #32]	; (8000334 <__NVIC_SetPriority+0x50>)
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	f003 030f 	and.w	r3, r3, #15
 800031a:	3b04      	subs	r3, #4
 800031c:	0112      	lsls	r2, r2, #4
 800031e:	b2d2      	uxtb	r2, r2
 8000320:	440b      	add	r3, r1
 8000322:	761a      	strb	r2, [r3, #24]
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	e000e100 	.word	0xe000e100
 8000334:	e000ed00 	.word	0xe000ed00

08000338 <SerialInitialise>:
		0x00 // default function pointer is NULL
		};

// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000338:	b480      	push	{r7}
 800033a:	b087      	sub	sp, #28
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	625a      	str	r2, [r3, #36]	; 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800034a:	4b39      	ldr	r3, [pc, #228]	; (8000430 <SerialInitialise+0xf8>)
 800034c:	69db      	ldr	r3, [r3, #28]
 800034e:	4a38      	ldr	r2, [pc, #224]	; (8000430 <SerialInitialise+0xf8>)
 8000350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000354:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000356:	4b36      	ldr	r3, [pc, #216]	; (8000430 <SerialInitialise+0xf8>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a35      	ldr	r2, [pc, #212]	; (8000430 <SerialInitialise+0xf8>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	691a      	ldr	r2, [r3, #16]
 8000366:	4b32      	ldr	r3, [pc, #200]	; (8000430 <SerialInitialise+0xf8>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4931      	ldr	r1, [pc, #196]	; (8000430 <SerialInitialise+0xf8>)
 800036c:	4313      	orrs	r3, r2
 800036e:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	68ba      	ldr	r2, [r7, #8]
 8000376:	6952      	ldr	r2, [r2, #20]
 8000378:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	68ba      	ldr	r2, [r7, #8]
 8000380:	6992      	ldr	r2, [r2, #24]
 8000382:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	69d9      	ldr	r1, [r3, #28]
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	6a1a      	ldr	r2, [r3, #32]
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	430a      	orrs	r2, r1
 8000394:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	6a19      	ldr	r1, [r3, #32]
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	430a      	orrs	r2, r1
 80003a6:	625a      	str	r2, [r3, #36]	; 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	68da      	ldr	r2, [r3, #12]
 80003ac:	4b20      	ldr	r3, [pc, #128]	; (8000430 <SerialInitialise+0xf8>)
 80003ae:	69db      	ldr	r3, [r3, #28]
 80003b0:	491f      	ldr	r1, [pc, #124]	; (8000430 <SerialInitialise+0xf8>)
 80003b2:	4313      	orrs	r3, r2
 80003b4:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	689a      	ldr	r2, [r3, #8]
 80003ba:	4b1d      	ldr	r3, [pc, #116]	; (8000430 <SerialInitialise+0xf8>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	491c      	ldr	r1, [pc, #112]	; (8000430 <SerialInitialise+0xf8>)
 80003c0:	4313      	orrs	r3, r2
 80003c2:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	330c      	adds	r3, #12
 80003ca:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	2b04      	cmp	r3, #4
 80003d0:	d820      	bhi.n	8000414 <SerialInitialise+0xdc>
 80003d2:	a201      	add	r2, pc, #4	; (adr r2, 80003d8 <SerialInitialise+0xa0>)
 80003d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d8:	080003ed 	.word	0x080003ed
 80003dc:	080003f5 	.word	0x080003f5
 80003e0:	080003fd 	.word	0x080003fd
 80003e4:	08000405 	.word	0x08000405
 80003e8:	0800040d 	.word	0x0800040d
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	2246      	movs	r2, #70	; 0x46
 80003f0:	801a      	strh	r2, [r3, #0]
		break;
 80003f2:	e00f      	b.n	8000414 <SerialInitialise+0xdc>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	2246      	movs	r2, #70	; 0x46
 80003f8:	801a      	strh	r2, [r3, #0]
		break;
 80003fa:	e00b      	b.n	8000414 <SerialInitialise+0xdc>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80003fc:	697b      	ldr	r3, [r7, #20]
 80003fe:	2246      	movs	r2, #70	; 0x46
 8000400:	801a      	strh	r2, [r3, #0]
		break;
 8000402:	e007      	b.n	8000414 <SerialInitialise+0xdc>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	2246      	movs	r2, #70	; 0x46
 8000408:	801a      	strh	r2, [r3, #0]
		break;
 800040a:	e003      	b.n	8000414 <SerialInitialise+0xdc>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	2246      	movs	r2, #70	; 0x46
 8000410:	801a      	strh	r2, [r3, #0]
		break;
 8000412:	bf00      	nop
	}

	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f042 020d 	orr.w	r2, r2, #13
 8000422:	601a      	str	r2, [r3, #0]
}
 8000424:	bf00      	nop
 8000426:	371c      	adds	r7, #28
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40021000 	.word	0x40021000

08000434 <getChar>:
uint8_t *last_word[BUFFER_SIZE] = {0};
int i = 0;

void (*on_key_input)() = 0x00;

void getChar(SerialPort *serial_port, uint8_t* buffer, uint8_t* last_word, int* i) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	607a      	str	r2, [r7, #4]
 8000440:	603b      	str	r3, [r7, #0]
	// gets the current count in the word
	uint8_t x = *i;
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	74fb      	strb	r3, [r7, #19]
	// checks the flags of the input port - clears them if raised
	if ((serial_port->UART->ISR & USART_ISR_ORE) != 0 || (serial_port->UART->ISR & USART_ISR_FE) != 0){
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	f003 0308 	and.w	r3, r3, #8
 8000452:	2b00      	cmp	r3, #0
 8000454:	d106      	bne.n	8000464 <getChar+0x30>
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	69db      	ldr	r3, [r3, #28]
 800045c:	f003 0302 	and.w	r3, r3, #2
 8000460:	2b00      	cmp	r3, #0
 8000462:	d00f      	beq.n	8000484 <getChar+0x50>
		serial_port->UART->ICR |= USART_ICR_ORECF;
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	6a1a      	ldr	r2, [r3, #32]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f042 0208 	orr.w	r2, r2, #8
 8000472:	621a      	str	r2, [r3, #32]
		serial_port->UART->ICR |= USART_ICR_FECF;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	6a1a      	ldr	r2, [r3, #32]
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f042 0202 	orr.w	r2, r2, #2
 8000482:	621a      	str	r2, [r3, #32]
	}
	// if the receive not empty flag is not 0 i.e. there is a character ready to be received
	if ((serial_port->UART->ISR & USART_ISR_RXNE) != 0){
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f003 0320 	and.w	r3, r3, #32
 800048e:	2b00      	cmp	r3, #0
 8000490:	d03c      	beq.n	800050c <getChar+0xd8>
		// get the value from the Read Data Register (RDR)
		buffer[x] = serial_port->UART->RDR;
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000498:	b299      	uxth	r1, r3
 800049a:	7cfb      	ldrb	r3, [r7, #19]
 800049c:	68ba      	ldr	r2, [r7, #8]
 800049e:	4413      	add	r3, r2
 80004a0:	b2ca      	uxtb	r2, r1
 80004a2:	701a      	strb	r2, [r3, #0]
		// increment the counter for the position in the word
		*i += 1;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	1c5a      	adds	r2, r3, #1
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	601a      	str	r2, [r3, #0]
		if (buffer[x] == TERMINATION_CHAR) {
 80004ae:	7cfb      	ldrb	r3, [r7, #19]
 80004b0:	68ba      	ldr	r2, [r7, #8]
 80004b2:	4413      	add	r3, r2
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b0d      	cmp	r3, #13
 80004b8:	d128      	bne.n	800050c <getChar+0xd8>
			// add a newline to the buffer for better output aesthetic
			buffer[x+1] = NEWLINE_CHAR;
 80004ba:	7cfb      	ldrb	r3, [r7, #19]
 80004bc:	3301      	adds	r3, #1
 80004be:	68ba      	ldr	r2, [r7, #8]
 80004c0:	4413      	add	r3, r2
 80004c2:	220a      	movs	r2, #10
 80004c4:	701a      	strb	r2, [r3, #0]
			// can be removed - demonstrate double buffer
			SerialOutputString(buffer, &USART1_PORT);
 80004c6:	4913      	ldr	r1, [pc, #76]	; (8000514 <getChar+0xe0>)
 80004c8:	68b8      	ldr	r0, [r7, #8]
 80004ca:	f000 f876 	bl	80005ba <SerialOutputString>
			SerialOutputString(last_word, &USART1_PORT);
 80004ce:	4911      	ldr	r1, [pc, #68]	; (8000514 <getChar+0xe0>)
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f000 f872 	bl	80005ba <SerialOutputString>
			// any additional handling should go here - before buffer is cleared

			serial_port->completion_function(last_word);
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	4610      	mov	r0, r2
 80004de:	4798      	blx	r3

			// copy word to previous word and then clear current buffer
			strncpy(last_word, buffer, BUFFER_SIZE);
 80004e0:	220a      	movs	r2, #10
 80004e2:	68b9      	ldr	r1, [r7, #8]
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f000 fa6d 	bl	80009c4 <strncpy>
			for (int j = 0; j < BUFFER_SIZE; j++){
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
 80004ee:	e007      	b.n	8000500 <getChar+0xcc>
				buffer[j] = 0;
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	68ba      	ldr	r2, [r7, #8]
 80004f4:	4413      	add	r3, r2
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < BUFFER_SIZE; j++){
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	3301      	adds	r3, #1
 80004fe:	617b      	str	r3, [r7, #20]
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	2b09      	cmp	r3, #9
 8000504:	ddf4      	ble.n	80004f0 <getChar+0xbc>
			}
			// reset the counter to 0
			*i = 0;
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]

		}
	}
}
 800050c:	bf00      	nop
 800050e:	3718      	adds	r7, #24
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000000 	.word	0x20000000

08000518 <enable_uart_interrupt>:
void enable_uart_interrupt(SerialPort *serial_port){
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
}
 8000522:	bf00      	nop
	__disable_irq();

	// enable the read data not empty interrupt enable bit in the control register
	serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f042 0220 	orr.w	r2, r2, #32
 8000532:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(USART1_IRQn, 1);
 8000534:	2101      	movs	r1, #1
 8000536:	2025      	movs	r0, #37	; 0x25
 8000538:	f7ff fed4 	bl	80002e4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 800053c:	2025      	movs	r0, #37	; 0x25
 800053e:	f7ff feb3 	bl	80002a8 <__NVIC_EnableIRQ>

	// set the interrupt function
	on_key_input = &getChar;
 8000542:	4b04      	ldr	r3, [pc, #16]	; (8000554 <enable_uart_interrupt+0x3c>)
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <enable_uart_interrupt+0x40>)
 8000546:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000548:	b662      	cpsie	i
}
 800054a:	bf00      	nop

	__enable_irq();
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	200000f4 	.word	0x200000f4
 8000558:	08000435 	.word	0x08000435

0800055c <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler(){
 800055c:	b598      	push	{r3, r4, r7, lr}
 800055e:	af00      	add	r7, sp, #0
	// should receive a character and store it in a buffer then return
	on_key_input(&USART1_PORT, buffer, last_word, &i);
 8000560:	4b04      	ldr	r3, [pc, #16]	; (8000574 <USART1_EXTI25_IRQHandler+0x18>)
 8000562:	681c      	ldr	r4, [r3, #0]
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <USART1_EXTI25_IRQHandler+0x1c>)
 8000566:	4a05      	ldr	r2, [pc, #20]	; (800057c <USART1_EXTI25_IRQHandler+0x20>)
 8000568:	4905      	ldr	r1, [pc, #20]	; (8000580 <USART1_EXTI25_IRQHandler+0x24>)
 800056a:	4806      	ldr	r0, [pc, #24]	; (8000584 <USART1_EXTI25_IRQHandler+0x28>)
 800056c:	47a0      	blx	r4
}
 800056e:	bf00      	nop
 8000570:	bd98      	pop	{r3, r4, r7, pc}
 8000572:	bf00      	nop
 8000574:	200000f4 	.word	0x200000f4
 8000578:	200000f0 	.word	0x200000f0
 800057c:	200000c8 	.word	0x200000c8
 8000580:	200000a0 	.word	0x200000a0
 8000584:	20000000 	.word	0x20000000

08000588 <SerialOutputChar>:
||------------------||
||	  UART Output	||
||------------------||
*/

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 8000594:	bf00      	nop
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	69db      	ldr	r3, [r3, #28]
 800059c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d0f8      	beq.n	8000596 <SerialOutputChar+0xe>
	}
	serial_port->UART->TDR = data;
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	79fa      	ldrb	r2, [r7, #7]
 80005aa:	b292      	uxth	r2, r2
 80005ac:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <SerialOutputString>:


void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b084      	sub	sp, #16
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	6039      	str	r1, [r7, #0]
	uint32_t counter = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 80005c8:	e00b      	b.n	80005e2 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	6839      	ldr	r1, [r7, #0]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ffd9 	bl	8000588 <SerialOutputChar>
		counter++;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	3301      	adds	r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
		pt++;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3301      	adds	r3, #1
 80005e0:	607b      	str	r3, [r7, #4]
	while(*pt) {
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1ef      	bne.n	80005ca <SerialOutputString+0x10>
	}
}
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <USART_callback>:
||------------------------------||
||	  UART Completion Function	||
||------------------------------||
*/

void USART_callback(uint8_t *string) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
//	// This function will be called after a transmission is complete
	uint8_t *instruct[2] = {0};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
	int i = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]

	uint8_t *token = strtok(string, " ");
 800060a:	4912      	ldr	r1, [pc, #72]	; (8000654 <USART_callback+0x60>)
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f000 f9ed 	bl	80009ec <strtok>
 8000612:	6138      	str	r0, [r7, #16]
	while (token != NULL){
 8000614:	e00d      	b.n	8000632 <USART_callback+0x3e>
		instruct[i++] = token;
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	1c5a      	adds	r2, r3, #1
 800061a:	617a      	str	r2, [r7, #20]
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	3318      	adds	r3, #24
 8000620:	443b      	add	r3, r7
 8000622:	693a      	ldr	r2, [r7, #16]
 8000624:	f843 2c10 	str.w	r2, [r3, #-16]
		token = strtok(NULL, " ");
 8000628:	490a      	ldr	r1, [pc, #40]	; (8000654 <USART_callback+0x60>)
 800062a:	2000      	movs	r0, #0
 800062c:	f000 f9de 	bl	80009ec <strtok>
 8000630:	6138      	str	r0, [r7, #16]
	while (token != NULL){
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1ee      	bne.n	8000616 <USART_callback+0x22>
	}

	if (instruct[0] == "led"){
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	4a07      	ldr	r2, [pc, #28]	; (8000658 <USART_callback+0x64>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d104      	bne.n	800064a <USART_callback+0x56>
		SerialOutputString(instruct[1], &USART1_PORT);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	4906      	ldr	r1, [pc, #24]	; (800065c <USART_callback+0x68>)
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ffb8 	bl	80005ba <SerialOutputString>
	}
//	SerialOutputString(string, &USART1_PORT);
}
 800064a:	bf00      	nop
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	080018a0 	.word	0x080018a0
 8000658:	080018a4 	.word	0x080018a4
 800065c:	20000000 	.word	0x20000000

08000660 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return 1;
 8000664:	2301      	movs	r3, #1
}
 8000666:	4618      	mov	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <_kill>:

int _kill(int pid, int sig)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800067a:	f000 fa1b 	bl	8000ab4 <__errno>
 800067e:	4603      	mov	r3, r0
 8000680:	2216      	movs	r2, #22
 8000682:	601a      	str	r2, [r3, #0]
  return -1;
 8000684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <_exit>:

void _exit (int status)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000698:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f7ff ffe7 	bl	8000670 <_kill>
  while (1) {}    /* Make sure we hang here */
 80006a2:	e7fe      	b.n	80006a2 <_exit+0x12>

080006a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	e00a      	b.n	80006cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006b6:	f3af 8000 	nop.w
 80006ba:	4601      	mov	r1, r0
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	60ba      	str	r2, [r7, #8]
 80006c2:	b2ca      	uxtb	r2, r1
 80006c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	3301      	adds	r3, #1
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	697a      	ldr	r2, [r7, #20]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	dbf0      	blt.n	80006b6 <_read+0x12>
  }

  return len;
 80006d4:	687b      	ldr	r3, [r7, #4]
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3718      	adds	r7, #24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b086      	sub	sp, #24
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	60f8      	str	r0, [r7, #12]
 80006e6:	60b9      	str	r1, [r7, #8]
 80006e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
 80006ee:	e009      	b.n	8000704 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	1c5a      	adds	r2, r3, #1
 80006f4:	60ba      	str	r2, [r7, #8]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	3301      	adds	r3, #1
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	429a      	cmp	r2, r3
 800070a:	dbf1      	blt.n	80006f0 <_write+0x12>
  }
  return len;
 800070c:	687b      	ldr	r3, [r7, #4]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <_close>:

int _close(int file)
{
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800071e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000722:	4618      	mov	r0, r3
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800072e:	b480      	push	{r7}
 8000730:	b083      	sub	sp, #12
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
 8000736:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800073e:	605a      	str	r2, [r3, #4]
  return 0;
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <_isatty>:

int _isatty(int file)
{
 800074e:	b480      	push	{r7}
 8000750:	b083      	sub	sp, #12
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000756:	2301      	movs	r3, #1
}
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
	...

08000780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000788:	4a14      	ldr	r2, [pc, #80]	; (80007dc <_sbrk+0x5c>)
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <_sbrk+0x60>)
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <_sbrk+0x64>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d102      	bne.n	80007a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <_sbrk+0x64>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <_sbrk+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <_sbrk+0x64>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d207      	bcs.n	80007c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b0:	f000 f980 	bl	8000ab4 <__errno>
 80007b4:	4603      	mov	r3, r0
 80007b6:	220c      	movs	r2, #12
 80007b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007be:	e009      	b.n	80007d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <_sbrk+0x64>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007c6:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <_sbrk+0x64>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <_sbrk+0x64>)
 80007d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007d2:	68fb      	ldr	r3, [r7, #12]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000a000 	.word	0x2000a000
 80007e0:	00000400 	.word	0x00000400
 80007e4:	200000f8 	.word	0x200000f8
 80007e8:	20000248 	.word	0x20000248

080007ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f4:	480c      	ldr	r0, [pc, #48]	; (8000828 <LoopForever+0x6>)
  ldr r1, =_edata
 80007f6:	490d      	ldr	r1, [pc, #52]	; (800082c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f8:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <LoopForever+0xe>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007fc:	e002      	b.n	8000804 <LoopCopyDataInit>

080007fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000802:	3304      	adds	r3, #4

08000804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000808:	d3f9      	bcc.n	80007fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800080c:	4c0a      	ldr	r4, [pc, #40]	; (8000838 <LoopForever+0x16>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000810:	e001      	b.n	8000816 <LoopFillZerobss>

08000812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000814:	3204      	adds	r2, #4

08000816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000818:	d3fb      	bcc.n	8000812 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800081a:	f000 f951 	bl	8000ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081e:	f7ff fd2f 	bl	8000280 <main>

08000822 <LoopForever>:

LoopForever:
  b LoopForever
 8000822:	e7fe      	b.n	8000822 <LoopForever>
  ldr   r0, =_estack
 8000824:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800082c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000830:	08001990 	.word	0x08001990
  ldr r2, =_sbss
 8000834:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000838:	20000248 	.word	0x20000248

0800083c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800083c:	e7fe      	b.n	800083c <ADC1_2_IRQHandler>
	...

08000840 <std>:
 8000840:	2300      	movs	r3, #0
 8000842:	b510      	push	{r4, lr}
 8000844:	4604      	mov	r4, r0
 8000846:	e9c0 3300 	strd	r3, r3, [r0]
 800084a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800084e:	6083      	str	r3, [r0, #8]
 8000850:	8181      	strh	r1, [r0, #12]
 8000852:	6643      	str	r3, [r0, #100]	; 0x64
 8000854:	81c2      	strh	r2, [r0, #14]
 8000856:	6183      	str	r3, [r0, #24]
 8000858:	4619      	mov	r1, r3
 800085a:	2208      	movs	r2, #8
 800085c:	305c      	adds	r0, #92	; 0x5c
 800085e:	f000 f921 	bl	8000aa4 <memset>
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <std+0x58>)
 8000864:	6263      	str	r3, [r4, #36]	; 0x24
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <std+0x5c>)
 8000868:	62a3      	str	r3, [r4, #40]	; 0x28
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <std+0x60>)
 800086c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <std+0x64>)
 8000870:	6323      	str	r3, [r4, #48]	; 0x30
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <std+0x68>)
 8000874:	6224      	str	r4, [r4, #32]
 8000876:	429c      	cmp	r4, r3
 8000878:	d006      	beq.n	8000888 <std+0x48>
 800087a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800087e:	4294      	cmp	r4, r2
 8000880:	d002      	beq.n	8000888 <std+0x48>
 8000882:	33d0      	adds	r3, #208	; 0xd0
 8000884:	429c      	cmp	r4, r3
 8000886:	d105      	bne.n	8000894 <std+0x54>
 8000888:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800088c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000890:	f000 b93a 	b.w	8000b08 <__retarget_lock_init_recursive>
 8000894:	bd10      	pop	{r4, pc}
 8000896:	bf00      	nop
 8000898:	08000e11 	.word	0x08000e11
 800089c:	08000e33 	.word	0x08000e33
 80008a0:	08000e6b 	.word	0x08000e6b
 80008a4:	08000e8f 	.word	0x08000e8f
 80008a8:	200000fc 	.word	0x200000fc

080008ac <stdio_exit_handler>:
 80008ac:	4a02      	ldr	r2, [pc, #8]	; (80008b8 <stdio_exit_handler+0xc>)
 80008ae:	4903      	ldr	r1, [pc, #12]	; (80008bc <stdio_exit_handler+0x10>)
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <stdio_exit_handler+0x14>)
 80008b2:	f000 b869 	b.w	8000988 <_fwalk_sglue>
 80008b6:	bf00      	nop
 80008b8:	20000028 	.word	0x20000028
 80008bc:	08000da9 	.word	0x08000da9
 80008c0:	20000034 	.word	0x20000034

080008c4 <cleanup_stdio>:
 80008c4:	6841      	ldr	r1, [r0, #4]
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <cleanup_stdio+0x34>)
 80008c8:	4299      	cmp	r1, r3
 80008ca:	b510      	push	{r4, lr}
 80008cc:	4604      	mov	r4, r0
 80008ce:	d001      	beq.n	80008d4 <cleanup_stdio+0x10>
 80008d0:	f000 fa6a 	bl	8000da8 <_fflush_r>
 80008d4:	68a1      	ldr	r1, [r4, #8]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <cleanup_stdio+0x38>)
 80008d8:	4299      	cmp	r1, r3
 80008da:	d002      	beq.n	80008e2 <cleanup_stdio+0x1e>
 80008dc:	4620      	mov	r0, r4
 80008de:	f000 fa63 	bl	8000da8 <_fflush_r>
 80008e2:	68e1      	ldr	r1, [r4, #12]
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <cleanup_stdio+0x3c>)
 80008e6:	4299      	cmp	r1, r3
 80008e8:	d004      	beq.n	80008f4 <cleanup_stdio+0x30>
 80008ea:	4620      	mov	r0, r4
 80008ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008f0:	f000 ba5a 	b.w	8000da8 <_fflush_r>
 80008f4:	bd10      	pop	{r4, pc}
 80008f6:	bf00      	nop
 80008f8:	200000fc 	.word	0x200000fc
 80008fc:	20000164 	.word	0x20000164
 8000900:	200001cc 	.word	0x200001cc

08000904 <global_stdio_init.part.0>:
 8000904:	b510      	push	{r4, lr}
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <global_stdio_init.part.0+0x30>)
 8000908:	4c0b      	ldr	r4, [pc, #44]	; (8000938 <global_stdio_init.part.0+0x34>)
 800090a:	4a0c      	ldr	r2, [pc, #48]	; (800093c <global_stdio_init.part.0+0x38>)
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	4620      	mov	r0, r4
 8000910:	2200      	movs	r2, #0
 8000912:	2104      	movs	r1, #4
 8000914:	f7ff ff94 	bl	8000840 <std>
 8000918:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800091c:	2201      	movs	r2, #1
 800091e:	2109      	movs	r1, #9
 8000920:	f7ff ff8e 	bl	8000840 <std>
 8000924:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000928:	2202      	movs	r2, #2
 800092a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800092e:	2112      	movs	r1, #18
 8000930:	f7ff bf86 	b.w	8000840 <std>
 8000934:	20000234 	.word	0x20000234
 8000938:	200000fc 	.word	0x200000fc
 800093c:	080008ad 	.word	0x080008ad

08000940 <__sfp_lock_acquire>:
 8000940:	4801      	ldr	r0, [pc, #4]	; (8000948 <__sfp_lock_acquire+0x8>)
 8000942:	f000 b8e2 	b.w	8000b0a <__retarget_lock_acquire_recursive>
 8000946:	bf00      	nop
 8000948:	20000239 	.word	0x20000239

0800094c <__sfp_lock_release>:
 800094c:	4801      	ldr	r0, [pc, #4]	; (8000954 <__sfp_lock_release+0x8>)
 800094e:	f000 b8dd 	b.w	8000b0c <__retarget_lock_release_recursive>
 8000952:	bf00      	nop
 8000954:	20000239 	.word	0x20000239

08000958 <__sinit>:
 8000958:	b510      	push	{r4, lr}
 800095a:	4604      	mov	r4, r0
 800095c:	f7ff fff0 	bl	8000940 <__sfp_lock_acquire>
 8000960:	6a23      	ldr	r3, [r4, #32]
 8000962:	b11b      	cbz	r3, 800096c <__sinit+0x14>
 8000964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000968:	f7ff bff0 	b.w	800094c <__sfp_lock_release>
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <__sinit+0x28>)
 800096e:	6223      	str	r3, [r4, #32]
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <__sinit+0x2c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d1f5      	bne.n	8000964 <__sinit+0xc>
 8000978:	f7ff ffc4 	bl	8000904 <global_stdio_init.part.0>
 800097c:	e7f2      	b.n	8000964 <__sinit+0xc>
 800097e:	bf00      	nop
 8000980:	080008c5 	.word	0x080008c5
 8000984:	20000234 	.word	0x20000234

08000988 <_fwalk_sglue>:
 8000988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800098c:	4607      	mov	r7, r0
 800098e:	4688      	mov	r8, r1
 8000990:	4614      	mov	r4, r2
 8000992:	2600      	movs	r6, #0
 8000994:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000998:	f1b9 0901 	subs.w	r9, r9, #1
 800099c:	d505      	bpl.n	80009aa <_fwalk_sglue+0x22>
 800099e:	6824      	ldr	r4, [r4, #0]
 80009a0:	2c00      	cmp	r4, #0
 80009a2:	d1f7      	bne.n	8000994 <_fwalk_sglue+0xc>
 80009a4:	4630      	mov	r0, r6
 80009a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009aa:	89ab      	ldrh	r3, [r5, #12]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d907      	bls.n	80009c0 <_fwalk_sglue+0x38>
 80009b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80009b4:	3301      	adds	r3, #1
 80009b6:	d003      	beq.n	80009c0 <_fwalk_sglue+0x38>
 80009b8:	4629      	mov	r1, r5
 80009ba:	4638      	mov	r0, r7
 80009bc:	47c0      	blx	r8
 80009be:	4306      	orrs	r6, r0
 80009c0:	3568      	adds	r5, #104	; 0x68
 80009c2:	e7e9      	b.n	8000998 <_fwalk_sglue+0x10>

080009c4 <strncpy>:
 80009c4:	b510      	push	{r4, lr}
 80009c6:	3901      	subs	r1, #1
 80009c8:	4603      	mov	r3, r0
 80009ca:	b132      	cbz	r2, 80009da <strncpy+0x16>
 80009cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80009d0:	f803 4b01 	strb.w	r4, [r3], #1
 80009d4:	3a01      	subs	r2, #1
 80009d6:	2c00      	cmp	r4, #0
 80009d8:	d1f7      	bne.n	80009ca <strncpy+0x6>
 80009da:	441a      	add	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	4293      	cmp	r3, r2
 80009e0:	d100      	bne.n	80009e4 <strncpy+0x20>
 80009e2:	bd10      	pop	{r4, pc}
 80009e4:	f803 1b01 	strb.w	r1, [r3], #1
 80009e8:	e7f9      	b.n	80009de <strncpy+0x1a>
	...

080009ec <strtok>:
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <strtok+0x5c>)
 80009ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80009f0:	681e      	ldr	r6, [r3, #0]
 80009f2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80009f4:	4605      	mov	r5, r0
 80009f6:	b9fc      	cbnz	r4, 8000a38 <strtok+0x4c>
 80009f8:	2050      	movs	r0, #80	; 0x50
 80009fa:	9101      	str	r1, [sp, #4]
 80009fc:	f000 f8a6 	bl	8000b4c <malloc>
 8000a00:	9901      	ldr	r1, [sp, #4]
 8000a02:	6470      	str	r0, [r6, #68]	; 0x44
 8000a04:	4602      	mov	r2, r0
 8000a06:	b920      	cbnz	r0, 8000a12 <strtok+0x26>
 8000a08:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <strtok+0x60>)
 8000a0a:	4811      	ldr	r0, [pc, #68]	; (8000a50 <strtok+0x64>)
 8000a0c:	215b      	movs	r1, #91	; 0x5b
 8000a0e:	f000 f87f 	bl	8000b10 <__assert_func>
 8000a12:	e9c0 4400 	strd	r4, r4, [r0]
 8000a16:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8000a1a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8000a1e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8000a22:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8000a26:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8000a2a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8000a2e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8000a32:	6184      	str	r4, [r0, #24]
 8000a34:	7704      	strb	r4, [r0, #28]
 8000a36:	6244      	str	r4, [r0, #36]	; 0x24
 8000a38:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	b002      	add	sp, #8
 8000a40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000a44:	f000 b806 	b.w	8000a54 <__strtok_r>
 8000a48:	20000080 	.word	0x20000080
 8000a4c:	080018a8 	.word	0x080018a8
 8000a50:	080018bf 	.word	0x080018bf

08000a54 <__strtok_r>:
 8000a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a56:	b908      	cbnz	r0, 8000a5c <__strtok_r+0x8>
 8000a58:	6810      	ldr	r0, [r2, #0]
 8000a5a:	b188      	cbz	r0, 8000a80 <__strtok_r+0x2c>
 8000a5c:	4604      	mov	r4, r0
 8000a5e:	4620      	mov	r0, r4
 8000a60:	f814 5b01 	ldrb.w	r5, [r4], #1
 8000a64:	460f      	mov	r7, r1
 8000a66:	f817 6b01 	ldrb.w	r6, [r7], #1
 8000a6a:	b91e      	cbnz	r6, 8000a74 <__strtok_r+0x20>
 8000a6c:	b965      	cbnz	r5, 8000a88 <__strtok_r+0x34>
 8000a6e:	6015      	str	r5, [r2, #0]
 8000a70:	4628      	mov	r0, r5
 8000a72:	e005      	b.n	8000a80 <__strtok_r+0x2c>
 8000a74:	42b5      	cmp	r5, r6
 8000a76:	d1f6      	bne.n	8000a66 <__strtok_r+0x12>
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1f0      	bne.n	8000a5e <__strtok_r+0xa>
 8000a7c:	6014      	str	r4, [r2, #0]
 8000a7e:	7003      	strb	r3, [r0, #0]
 8000a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a82:	461c      	mov	r4, r3
 8000a84:	e00c      	b.n	8000aa0 <__strtok_r+0x4c>
 8000a86:	b915      	cbnz	r5, 8000a8e <__strtok_r+0x3a>
 8000a88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000a8c:	460e      	mov	r6, r1
 8000a8e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8000a92:	42ab      	cmp	r3, r5
 8000a94:	d1f7      	bne.n	8000a86 <__strtok_r+0x32>
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0f3      	beq.n	8000a82 <__strtok_r+0x2e>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8000aa0:	6014      	str	r4, [r2, #0]
 8000aa2:	e7ed      	b.n	8000a80 <__strtok_r+0x2c>

08000aa4 <memset>:
 8000aa4:	4402      	add	r2, r0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d100      	bne.n	8000aae <memset+0xa>
 8000aac:	4770      	bx	lr
 8000aae:	f803 1b01 	strb.w	r1, [r3], #1
 8000ab2:	e7f9      	b.n	8000aa8 <memset+0x4>

08000ab4 <__errno>:
 8000ab4:	4b01      	ldr	r3, [pc, #4]	; (8000abc <__errno+0x8>)
 8000ab6:	6818      	ldr	r0, [r3, #0]
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000080 	.word	0x20000080

08000ac0 <__libc_init_array>:
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	4d0d      	ldr	r5, [pc, #52]	; (8000af8 <__libc_init_array+0x38>)
 8000ac4:	4c0d      	ldr	r4, [pc, #52]	; (8000afc <__libc_init_array+0x3c>)
 8000ac6:	1b64      	subs	r4, r4, r5
 8000ac8:	10a4      	asrs	r4, r4, #2
 8000aca:	2600      	movs	r6, #0
 8000acc:	42a6      	cmp	r6, r4
 8000ace:	d109      	bne.n	8000ae4 <__libc_init_array+0x24>
 8000ad0:	4d0b      	ldr	r5, [pc, #44]	; (8000b00 <__libc_init_array+0x40>)
 8000ad2:	4c0c      	ldr	r4, [pc, #48]	; (8000b04 <__libc_init_array+0x44>)
 8000ad4:	f000 fece 	bl	8001874 <_init>
 8000ad8:	1b64      	subs	r4, r4, r5
 8000ada:	10a4      	asrs	r4, r4, #2
 8000adc:	2600      	movs	r6, #0
 8000ade:	42a6      	cmp	r6, r4
 8000ae0:	d105      	bne.n	8000aee <__libc_init_array+0x2e>
 8000ae2:	bd70      	pop	{r4, r5, r6, pc}
 8000ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae8:	4798      	blx	r3
 8000aea:	3601      	adds	r6, #1
 8000aec:	e7ee      	b.n	8000acc <__libc_init_array+0xc>
 8000aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000af2:	4798      	blx	r3
 8000af4:	3601      	adds	r6, #1
 8000af6:	e7f2      	b.n	8000ade <__libc_init_array+0x1e>
 8000af8:	08001988 	.word	0x08001988
 8000afc:	08001988 	.word	0x08001988
 8000b00:	08001988 	.word	0x08001988
 8000b04:	0800198c 	.word	0x0800198c

08000b08 <__retarget_lock_init_recursive>:
 8000b08:	4770      	bx	lr

08000b0a <__retarget_lock_acquire_recursive>:
 8000b0a:	4770      	bx	lr

08000b0c <__retarget_lock_release_recursive>:
 8000b0c:	4770      	bx	lr
	...

08000b10 <__assert_func>:
 8000b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000b12:	4614      	mov	r4, r2
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <__assert_func+0x2c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4605      	mov	r5, r0
 8000b1c:	68d8      	ldr	r0, [r3, #12]
 8000b1e:	b14c      	cbz	r4, 8000b34 <__assert_func+0x24>
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <__assert_func+0x30>)
 8000b22:	9100      	str	r1, [sp, #0]
 8000b24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000b28:	4906      	ldr	r1, [pc, #24]	; (8000b44 <__assert_func+0x34>)
 8000b2a:	462b      	mov	r3, r5
 8000b2c:	f000 f9b4 	bl	8000e98 <fiprintf>
 8000b30:	f000 fa1a 	bl	8000f68 <abort>
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <__assert_func+0x38>)
 8000b36:	461c      	mov	r4, r3
 8000b38:	e7f3      	b.n	8000b22 <__assert_func+0x12>
 8000b3a:	bf00      	nop
 8000b3c:	20000080 	.word	0x20000080
 8000b40:	08001919 	.word	0x08001919
 8000b44:	08001926 	.word	0x08001926
 8000b48:	08001954 	.word	0x08001954

08000b4c <malloc>:
 8000b4c:	4b02      	ldr	r3, [pc, #8]	; (8000b58 <malloc+0xc>)
 8000b4e:	4601      	mov	r1, r0
 8000b50:	6818      	ldr	r0, [r3, #0]
 8000b52:	f000 b823 	b.w	8000b9c <_malloc_r>
 8000b56:	bf00      	nop
 8000b58:	20000080 	.word	0x20000080

08000b5c <sbrk_aligned>:
 8000b5c:	b570      	push	{r4, r5, r6, lr}
 8000b5e:	4e0e      	ldr	r6, [pc, #56]	; (8000b98 <sbrk_aligned+0x3c>)
 8000b60:	460c      	mov	r4, r1
 8000b62:	6831      	ldr	r1, [r6, #0]
 8000b64:	4605      	mov	r5, r0
 8000b66:	b911      	cbnz	r1, 8000b6e <sbrk_aligned+0x12>
 8000b68:	f000 f9dc 	bl	8000f24 <_sbrk_r>
 8000b6c:	6030      	str	r0, [r6, #0]
 8000b6e:	4621      	mov	r1, r4
 8000b70:	4628      	mov	r0, r5
 8000b72:	f000 f9d7 	bl	8000f24 <_sbrk_r>
 8000b76:	1c43      	adds	r3, r0, #1
 8000b78:	d00a      	beq.n	8000b90 <sbrk_aligned+0x34>
 8000b7a:	1cc4      	adds	r4, r0, #3
 8000b7c:	f024 0403 	bic.w	r4, r4, #3
 8000b80:	42a0      	cmp	r0, r4
 8000b82:	d007      	beq.n	8000b94 <sbrk_aligned+0x38>
 8000b84:	1a21      	subs	r1, r4, r0
 8000b86:	4628      	mov	r0, r5
 8000b88:	f000 f9cc 	bl	8000f24 <_sbrk_r>
 8000b8c:	3001      	adds	r0, #1
 8000b8e:	d101      	bne.n	8000b94 <sbrk_aligned+0x38>
 8000b90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000b94:	4620      	mov	r0, r4
 8000b96:	bd70      	pop	{r4, r5, r6, pc}
 8000b98:	20000240 	.word	0x20000240

08000b9c <_malloc_r>:
 8000b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ba0:	1ccd      	adds	r5, r1, #3
 8000ba2:	f025 0503 	bic.w	r5, r5, #3
 8000ba6:	3508      	adds	r5, #8
 8000ba8:	2d0c      	cmp	r5, #12
 8000baa:	bf38      	it	cc
 8000bac:	250c      	movcc	r5, #12
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	4607      	mov	r7, r0
 8000bb2:	db01      	blt.n	8000bb8 <_malloc_r+0x1c>
 8000bb4:	42a9      	cmp	r1, r5
 8000bb6:	d905      	bls.n	8000bc4 <_malloc_r+0x28>
 8000bb8:	230c      	movs	r3, #12
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	2600      	movs	r6, #0
 8000bbe:	4630      	mov	r0, r6
 8000bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000c98 <_malloc_r+0xfc>
 8000bc8:	f000 f916 	bl	8000df8 <__malloc_lock>
 8000bcc:	f8d8 3000 	ldr.w	r3, [r8]
 8000bd0:	461c      	mov	r4, r3
 8000bd2:	bb5c      	cbnz	r4, 8000c2c <_malloc_r+0x90>
 8000bd4:	4629      	mov	r1, r5
 8000bd6:	4638      	mov	r0, r7
 8000bd8:	f7ff ffc0 	bl	8000b5c <sbrk_aligned>
 8000bdc:	1c43      	adds	r3, r0, #1
 8000bde:	4604      	mov	r4, r0
 8000be0:	d155      	bne.n	8000c8e <_malloc_r+0xf2>
 8000be2:	f8d8 4000 	ldr.w	r4, [r8]
 8000be6:	4626      	mov	r6, r4
 8000be8:	2e00      	cmp	r6, #0
 8000bea:	d145      	bne.n	8000c78 <_malloc_r+0xdc>
 8000bec:	2c00      	cmp	r4, #0
 8000bee:	d048      	beq.n	8000c82 <_malloc_r+0xe6>
 8000bf0:	6823      	ldr	r3, [r4, #0]
 8000bf2:	4631      	mov	r1, r6
 8000bf4:	4638      	mov	r0, r7
 8000bf6:	eb04 0903 	add.w	r9, r4, r3
 8000bfa:	f000 f993 	bl	8000f24 <_sbrk_r>
 8000bfe:	4581      	cmp	r9, r0
 8000c00:	d13f      	bne.n	8000c82 <_malloc_r+0xe6>
 8000c02:	6821      	ldr	r1, [r4, #0]
 8000c04:	1a6d      	subs	r5, r5, r1
 8000c06:	4629      	mov	r1, r5
 8000c08:	4638      	mov	r0, r7
 8000c0a:	f7ff ffa7 	bl	8000b5c <sbrk_aligned>
 8000c0e:	3001      	adds	r0, #1
 8000c10:	d037      	beq.n	8000c82 <_malloc_r+0xe6>
 8000c12:	6823      	ldr	r3, [r4, #0]
 8000c14:	442b      	add	r3, r5
 8000c16:	6023      	str	r3, [r4, #0]
 8000c18:	f8d8 3000 	ldr.w	r3, [r8]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d038      	beq.n	8000c92 <_malloc_r+0xf6>
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	42a2      	cmp	r2, r4
 8000c24:	d12b      	bne.n	8000c7e <_malloc_r+0xe2>
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	e00f      	b.n	8000c4c <_malloc_r+0xb0>
 8000c2c:	6822      	ldr	r2, [r4, #0]
 8000c2e:	1b52      	subs	r2, r2, r5
 8000c30:	d41f      	bmi.n	8000c72 <_malloc_r+0xd6>
 8000c32:	2a0b      	cmp	r2, #11
 8000c34:	d917      	bls.n	8000c66 <_malloc_r+0xca>
 8000c36:	1961      	adds	r1, r4, r5
 8000c38:	42a3      	cmp	r3, r4
 8000c3a:	6025      	str	r5, [r4, #0]
 8000c3c:	bf18      	it	ne
 8000c3e:	6059      	strne	r1, [r3, #4]
 8000c40:	6863      	ldr	r3, [r4, #4]
 8000c42:	bf08      	it	eq
 8000c44:	f8c8 1000 	streq.w	r1, [r8]
 8000c48:	5162      	str	r2, [r4, r5]
 8000c4a:	604b      	str	r3, [r1, #4]
 8000c4c:	4638      	mov	r0, r7
 8000c4e:	f104 060b 	add.w	r6, r4, #11
 8000c52:	f000 f8d7 	bl	8000e04 <__malloc_unlock>
 8000c56:	f026 0607 	bic.w	r6, r6, #7
 8000c5a:	1d23      	adds	r3, r4, #4
 8000c5c:	1af2      	subs	r2, r6, r3
 8000c5e:	d0ae      	beq.n	8000bbe <_malloc_r+0x22>
 8000c60:	1b9b      	subs	r3, r3, r6
 8000c62:	50a3      	str	r3, [r4, r2]
 8000c64:	e7ab      	b.n	8000bbe <_malloc_r+0x22>
 8000c66:	42a3      	cmp	r3, r4
 8000c68:	6862      	ldr	r2, [r4, #4]
 8000c6a:	d1dd      	bne.n	8000c28 <_malloc_r+0x8c>
 8000c6c:	f8c8 2000 	str.w	r2, [r8]
 8000c70:	e7ec      	b.n	8000c4c <_malloc_r+0xb0>
 8000c72:	4623      	mov	r3, r4
 8000c74:	6864      	ldr	r4, [r4, #4]
 8000c76:	e7ac      	b.n	8000bd2 <_malloc_r+0x36>
 8000c78:	4634      	mov	r4, r6
 8000c7a:	6876      	ldr	r6, [r6, #4]
 8000c7c:	e7b4      	b.n	8000be8 <_malloc_r+0x4c>
 8000c7e:	4613      	mov	r3, r2
 8000c80:	e7cc      	b.n	8000c1c <_malloc_r+0x80>
 8000c82:	230c      	movs	r3, #12
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	4638      	mov	r0, r7
 8000c88:	f000 f8bc 	bl	8000e04 <__malloc_unlock>
 8000c8c:	e797      	b.n	8000bbe <_malloc_r+0x22>
 8000c8e:	6025      	str	r5, [r4, #0]
 8000c90:	e7dc      	b.n	8000c4c <_malloc_r+0xb0>
 8000c92:	605b      	str	r3, [r3, #4]
 8000c94:	deff      	udf	#255	; 0xff
 8000c96:	bf00      	nop
 8000c98:	2000023c 	.word	0x2000023c

08000c9c <__sflush_r>:
 8000c9c:	898a      	ldrh	r2, [r1, #12]
 8000c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ca2:	4605      	mov	r5, r0
 8000ca4:	0710      	lsls	r0, r2, #28
 8000ca6:	460c      	mov	r4, r1
 8000ca8:	d458      	bmi.n	8000d5c <__sflush_r+0xc0>
 8000caa:	684b      	ldr	r3, [r1, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	dc05      	bgt.n	8000cbc <__sflush_r+0x20>
 8000cb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	dc02      	bgt.n	8000cbc <__sflush_r+0x20>
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d0f9      	beq.n	8000cb6 <__sflush_r+0x1a>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000cc8:	682f      	ldr	r7, [r5, #0]
 8000cca:	6a21      	ldr	r1, [r4, #32]
 8000ccc:	602b      	str	r3, [r5, #0]
 8000cce:	d032      	beq.n	8000d36 <__sflush_r+0x9a>
 8000cd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000cd2:	89a3      	ldrh	r3, [r4, #12]
 8000cd4:	075a      	lsls	r2, r3, #29
 8000cd6:	d505      	bpl.n	8000ce4 <__sflush_r+0x48>
 8000cd8:	6863      	ldr	r3, [r4, #4]
 8000cda:	1ac0      	subs	r0, r0, r3
 8000cdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000cde:	b10b      	cbz	r3, 8000ce4 <__sflush_r+0x48>
 8000ce0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ce2:	1ac0      	subs	r0, r0, r3
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000cea:	6a21      	ldr	r1, [r4, #32]
 8000cec:	4628      	mov	r0, r5
 8000cee:	47b0      	blx	r6
 8000cf0:	1c43      	adds	r3, r0, #1
 8000cf2:	89a3      	ldrh	r3, [r4, #12]
 8000cf4:	d106      	bne.n	8000d04 <__sflush_r+0x68>
 8000cf6:	6829      	ldr	r1, [r5, #0]
 8000cf8:	291d      	cmp	r1, #29
 8000cfa:	d82b      	bhi.n	8000d54 <__sflush_r+0xb8>
 8000cfc:	4a29      	ldr	r2, [pc, #164]	; (8000da4 <__sflush_r+0x108>)
 8000cfe:	410a      	asrs	r2, r1
 8000d00:	07d6      	lsls	r6, r2, #31
 8000d02:	d427      	bmi.n	8000d54 <__sflush_r+0xb8>
 8000d04:	2200      	movs	r2, #0
 8000d06:	6062      	str	r2, [r4, #4]
 8000d08:	04d9      	lsls	r1, r3, #19
 8000d0a:	6922      	ldr	r2, [r4, #16]
 8000d0c:	6022      	str	r2, [r4, #0]
 8000d0e:	d504      	bpl.n	8000d1a <__sflush_r+0x7e>
 8000d10:	1c42      	adds	r2, r0, #1
 8000d12:	d101      	bne.n	8000d18 <__sflush_r+0x7c>
 8000d14:	682b      	ldr	r3, [r5, #0]
 8000d16:	b903      	cbnz	r3, 8000d1a <__sflush_r+0x7e>
 8000d18:	6560      	str	r0, [r4, #84]	; 0x54
 8000d1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d1c:	602f      	str	r7, [r5, #0]
 8000d1e:	2900      	cmp	r1, #0
 8000d20:	d0c9      	beq.n	8000cb6 <__sflush_r+0x1a>
 8000d22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000d26:	4299      	cmp	r1, r3
 8000d28:	d002      	beq.n	8000d30 <__sflush_r+0x94>
 8000d2a:	4628      	mov	r0, r5
 8000d2c:	f000 f924 	bl	8000f78 <_free_r>
 8000d30:	2000      	movs	r0, #0
 8000d32:	6360      	str	r0, [r4, #52]	; 0x34
 8000d34:	e7c0      	b.n	8000cb8 <__sflush_r+0x1c>
 8000d36:	2301      	movs	r3, #1
 8000d38:	4628      	mov	r0, r5
 8000d3a:	47b0      	blx	r6
 8000d3c:	1c41      	adds	r1, r0, #1
 8000d3e:	d1c8      	bne.n	8000cd2 <__sflush_r+0x36>
 8000d40:	682b      	ldr	r3, [r5, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0c5      	beq.n	8000cd2 <__sflush_r+0x36>
 8000d46:	2b1d      	cmp	r3, #29
 8000d48:	d001      	beq.n	8000d4e <__sflush_r+0xb2>
 8000d4a:	2b16      	cmp	r3, #22
 8000d4c:	d101      	bne.n	8000d52 <__sflush_r+0xb6>
 8000d4e:	602f      	str	r7, [r5, #0]
 8000d50:	e7b1      	b.n	8000cb6 <__sflush_r+0x1a>
 8000d52:	89a3      	ldrh	r3, [r4, #12]
 8000d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d58:	81a3      	strh	r3, [r4, #12]
 8000d5a:	e7ad      	b.n	8000cb8 <__sflush_r+0x1c>
 8000d5c:	690f      	ldr	r7, [r1, #16]
 8000d5e:	2f00      	cmp	r7, #0
 8000d60:	d0a9      	beq.n	8000cb6 <__sflush_r+0x1a>
 8000d62:	0793      	lsls	r3, r2, #30
 8000d64:	680e      	ldr	r6, [r1, #0]
 8000d66:	bf08      	it	eq
 8000d68:	694b      	ldreq	r3, [r1, #20]
 8000d6a:	600f      	str	r7, [r1, #0]
 8000d6c:	bf18      	it	ne
 8000d6e:	2300      	movne	r3, #0
 8000d70:	eba6 0807 	sub.w	r8, r6, r7
 8000d74:	608b      	str	r3, [r1, #8]
 8000d76:	f1b8 0f00 	cmp.w	r8, #0
 8000d7a:	dd9c      	ble.n	8000cb6 <__sflush_r+0x1a>
 8000d7c:	6a21      	ldr	r1, [r4, #32]
 8000d7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000d80:	4643      	mov	r3, r8
 8000d82:	463a      	mov	r2, r7
 8000d84:	4628      	mov	r0, r5
 8000d86:	47b0      	blx	r6
 8000d88:	2800      	cmp	r0, #0
 8000d8a:	dc06      	bgt.n	8000d9a <__sflush_r+0xfe>
 8000d8c:	89a3      	ldrh	r3, [r4, #12]
 8000d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d92:	81a3      	strh	r3, [r4, #12]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d98:	e78e      	b.n	8000cb8 <__sflush_r+0x1c>
 8000d9a:	4407      	add	r7, r0
 8000d9c:	eba8 0800 	sub.w	r8, r8, r0
 8000da0:	e7e9      	b.n	8000d76 <__sflush_r+0xda>
 8000da2:	bf00      	nop
 8000da4:	dfbffffe 	.word	0xdfbffffe

08000da8 <_fflush_r>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	690b      	ldr	r3, [r1, #16]
 8000dac:	4605      	mov	r5, r0
 8000dae:	460c      	mov	r4, r1
 8000db0:	b913      	cbnz	r3, 8000db8 <_fflush_r+0x10>
 8000db2:	2500      	movs	r5, #0
 8000db4:	4628      	mov	r0, r5
 8000db6:	bd38      	pop	{r3, r4, r5, pc}
 8000db8:	b118      	cbz	r0, 8000dc2 <_fflush_r+0x1a>
 8000dba:	6a03      	ldr	r3, [r0, #32]
 8000dbc:	b90b      	cbnz	r3, 8000dc2 <_fflush_r+0x1a>
 8000dbe:	f7ff fdcb 	bl	8000958 <__sinit>
 8000dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f3      	beq.n	8000db2 <_fflush_r+0xa>
 8000dca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000dcc:	07d0      	lsls	r0, r2, #31
 8000dce:	d404      	bmi.n	8000dda <_fflush_r+0x32>
 8000dd0:	0599      	lsls	r1, r3, #22
 8000dd2:	d402      	bmi.n	8000dda <_fflush_r+0x32>
 8000dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000dd6:	f7ff fe98 	bl	8000b0a <__retarget_lock_acquire_recursive>
 8000dda:	4628      	mov	r0, r5
 8000ddc:	4621      	mov	r1, r4
 8000dde:	f7ff ff5d 	bl	8000c9c <__sflush_r>
 8000de2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000de4:	07da      	lsls	r2, r3, #31
 8000de6:	4605      	mov	r5, r0
 8000de8:	d4e4      	bmi.n	8000db4 <_fflush_r+0xc>
 8000dea:	89a3      	ldrh	r3, [r4, #12]
 8000dec:	059b      	lsls	r3, r3, #22
 8000dee:	d4e1      	bmi.n	8000db4 <_fflush_r+0xc>
 8000df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000df2:	f7ff fe8b 	bl	8000b0c <__retarget_lock_release_recursive>
 8000df6:	e7dd      	b.n	8000db4 <_fflush_r+0xc>

08000df8 <__malloc_lock>:
 8000df8:	4801      	ldr	r0, [pc, #4]	; (8000e00 <__malloc_lock+0x8>)
 8000dfa:	f7ff be86 	b.w	8000b0a <__retarget_lock_acquire_recursive>
 8000dfe:	bf00      	nop
 8000e00:	20000238 	.word	0x20000238

08000e04 <__malloc_unlock>:
 8000e04:	4801      	ldr	r0, [pc, #4]	; (8000e0c <__malloc_unlock+0x8>)
 8000e06:	f7ff be81 	b.w	8000b0c <__retarget_lock_release_recursive>
 8000e0a:	bf00      	nop
 8000e0c:	20000238 	.word	0x20000238

08000e10 <__sread>:
 8000e10:	b510      	push	{r4, lr}
 8000e12:	460c      	mov	r4, r1
 8000e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e18:	f000 f872 	bl	8000f00 <_read_r>
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	bfab      	itete	ge
 8000e20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000e22:	89a3      	ldrhlt	r3, [r4, #12]
 8000e24:	181b      	addge	r3, r3, r0
 8000e26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000e2a:	bfac      	ite	ge
 8000e2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000e2e:	81a3      	strhlt	r3, [r4, #12]
 8000e30:	bd10      	pop	{r4, pc}

08000e32 <__swrite>:
 8000e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e36:	461f      	mov	r7, r3
 8000e38:	898b      	ldrh	r3, [r1, #12]
 8000e3a:	05db      	lsls	r3, r3, #23
 8000e3c:	4605      	mov	r5, r0
 8000e3e:	460c      	mov	r4, r1
 8000e40:	4616      	mov	r6, r2
 8000e42:	d505      	bpl.n	8000e50 <__swrite+0x1e>
 8000e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e48:	2302      	movs	r3, #2
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f000 f846 	bl	8000edc <_lseek_r>
 8000e50:	89a3      	ldrh	r3, [r4, #12]
 8000e52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e5a:	81a3      	strh	r3, [r4, #12]
 8000e5c:	4632      	mov	r2, r6
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4628      	mov	r0, r5
 8000e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e66:	f000 b86d 	b.w	8000f44 <_write_r>

08000e6a <__sseek>:
 8000e6a:	b510      	push	{r4, lr}
 8000e6c:	460c      	mov	r4, r1
 8000e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e72:	f000 f833 	bl	8000edc <_lseek_r>
 8000e76:	1c43      	adds	r3, r0, #1
 8000e78:	89a3      	ldrh	r3, [r4, #12]
 8000e7a:	bf15      	itete	ne
 8000e7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000e7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000e82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000e86:	81a3      	strheq	r3, [r4, #12]
 8000e88:	bf18      	it	ne
 8000e8a:	81a3      	strhne	r3, [r4, #12]
 8000e8c:	bd10      	pop	{r4, pc}

08000e8e <__sclose>:
 8000e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e92:	f000 b813 	b.w	8000ebc <_close_r>
	...

08000e98 <fiprintf>:
 8000e98:	b40e      	push	{r1, r2, r3}
 8000e9a:	b503      	push	{r0, r1, lr}
 8000e9c:	4601      	mov	r1, r0
 8000e9e:	ab03      	add	r3, sp, #12
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <fiprintf+0x20>)
 8000ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8000ea6:	6800      	ldr	r0, [r0, #0]
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	f000 f8db 	bl	8001064 <_vfiprintf_r>
 8000eae:	b002      	add	sp, #8
 8000eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8000eb4:	b003      	add	sp, #12
 8000eb6:	4770      	bx	lr
 8000eb8:	20000080 	.word	0x20000080

08000ebc <_close_r>:
 8000ebc:	b538      	push	{r3, r4, r5, lr}
 8000ebe:	4d06      	ldr	r5, [pc, #24]	; (8000ed8 <_close_r+0x1c>)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	602b      	str	r3, [r5, #0]
 8000ec8:	f7ff fc25 	bl	8000716 <_close>
 8000ecc:	1c43      	adds	r3, r0, #1
 8000ece:	d102      	bne.n	8000ed6 <_close_r+0x1a>
 8000ed0:	682b      	ldr	r3, [r5, #0]
 8000ed2:	b103      	cbz	r3, 8000ed6 <_close_r+0x1a>
 8000ed4:	6023      	str	r3, [r4, #0]
 8000ed6:	bd38      	pop	{r3, r4, r5, pc}
 8000ed8:	20000244 	.word	0x20000244

08000edc <_lseek_r>:
 8000edc:	b538      	push	{r3, r4, r5, lr}
 8000ede:	4d07      	ldr	r5, [pc, #28]	; (8000efc <_lseek_r+0x20>)
 8000ee0:	4604      	mov	r4, r0
 8000ee2:	4608      	mov	r0, r1
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	602a      	str	r2, [r5, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	f7ff fc3a 	bl	8000764 <_lseek>
 8000ef0:	1c43      	adds	r3, r0, #1
 8000ef2:	d102      	bne.n	8000efa <_lseek_r+0x1e>
 8000ef4:	682b      	ldr	r3, [r5, #0]
 8000ef6:	b103      	cbz	r3, 8000efa <_lseek_r+0x1e>
 8000ef8:	6023      	str	r3, [r4, #0]
 8000efa:	bd38      	pop	{r3, r4, r5, pc}
 8000efc:	20000244 	.word	0x20000244

08000f00 <_read_r>:
 8000f00:	b538      	push	{r3, r4, r5, lr}
 8000f02:	4d07      	ldr	r5, [pc, #28]	; (8000f20 <_read_r+0x20>)
 8000f04:	4604      	mov	r4, r0
 8000f06:	4608      	mov	r0, r1
 8000f08:	4611      	mov	r1, r2
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	602a      	str	r2, [r5, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	f7ff fbc8 	bl	80006a4 <_read>
 8000f14:	1c43      	adds	r3, r0, #1
 8000f16:	d102      	bne.n	8000f1e <_read_r+0x1e>
 8000f18:	682b      	ldr	r3, [r5, #0]
 8000f1a:	b103      	cbz	r3, 8000f1e <_read_r+0x1e>
 8000f1c:	6023      	str	r3, [r4, #0]
 8000f1e:	bd38      	pop	{r3, r4, r5, pc}
 8000f20:	20000244 	.word	0x20000244

08000f24 <_sbrk_r>:
 8000f24:	b538      	push	{r3, r4, r5, lr}
 8000f26:	4d06      	ldr	r5, [pc, #24]	; (8000f40 <_sbrk_r+0x1c>)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	602b      	str	r3, [r5, #0]
 8000f30:	f7ff fc26 	bl	8000780 <_sbrk>
 8000f34:	1c43      	adds	r3, r0, #1
 8000f36:	d102      	bne.n	8000f3e <_sbrk_r+0x1a>
 8000f38:	682b      	ldr	r3, [r5, #0]
 8000f3a:	b103      	cbz	r3, 8000f3e <_sbrk_r+0x1a>
 8000f3c:	6023      	str	r3, [r4, #0]
 8000f3e:	bd38      	pop	{r3, r4, r5, pc}
 8000f40:	20000244 	.word	0x20000244

08000f44 <_write_r>:
 8000f44:	b538      	push	{r3, r4, r5, lr}
 8000f46:	4d07      	ldr	r5, [pc, #28]	; (8000f64 <_write_r+0x20>)
 8000f48:	4604      	mov	r4, r0
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	2200      	movs	r2, #0
 8000f50:	602a      	str	r2, [r5, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	f7ff fbc3 	bl	80006de <_write>
 8000f58:	1c43      	adds	r3, r0, #1
 8000f5a:	d102      	bne.n	8000f62 <_write_r+0x1e>
 8000f5c:	682b      	ldr	r3, [r5, #0]
 8000f5e:	b103      	cbz	r3, 8000f62 <_write_r+0x1e>
 8000f60:	6023      	str	r3, [r4, #0]
 8000f62:	bd38      	pop	{r3, r4, r5, pc}
 8000f64:	20000244 	.word	0x20000244

08000f68 <abort>:
 8000f68:	b508      	push	{r3, lr}
 8000f6a:	2006      	movs	r0, #6
 8000f6c:	f000 fc66 	bl	800183c <raise>
 8000f70:	2001      	movs	r0, #1
 8000f72:	f7ff fb8d 	bl	8000690 <_exit>
	...

08000f78 <_free_r>:
 8000f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f7a:	2900      	cmp	r1, #0
 8000f7c:	d044      	beq.n	8001008 <_free_r+0x90>
 8000f7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f82:	9001      	str	r0, [sp, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f1a1 0404 	sub.w	r4, r1, #4
 8000f8a:	bfb8      	it	lt
 8000f8c:	18e4      	addlt	r4, r4, r3
 8000f8e:	f7ff ff33 	bl	8000df8 <__malloc_lock>
 8000f92:	4a1e      	ldr	r2, [pc, #120]	; (800100c <_free_r+0x94>)
 8000f94:	9801      	ldr	r0, [sp, #4]
 8000f96:	6813      	ldr	r3, [r2, #0]
 8000f98:	b933      	cbnz	r3, 8000fa8 <_free_r+0x30>
 8000f9a:	6063      	str	r3, [r4, #4]
 8000f9c:	6014      	str	r4, [r2, #0]
 8000f9e:	b003      	add	sp, #12
 8000fa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000fa4:	f7ff bf2e 	b.w	8000e04 <__malloc_unlock>
 8000fa8:	42a3      	cmp	r3, r4
 8000faa:	d908      	bls.n	8000fbe <_free_r+0x46>
 8000fac:	6825      	ldr	r5, [r4, #0]
 8000fae:	1961      	adds	r1, r4, r5
 8000fb0:	428b      	cmp	r3, r1
 8000fb2:	bf01      	itttt	eq
 8000fb4:	6819      	ldreq	r1, [r3, #0]
 8000fb6:	685b      	ldreq	r3, [r3, #4]
 8000fb8:	1949      	addeq	r1, r1, r5
 8000fba:	6021      	streq	r1, [r4, #0]
 8000fbc:	e7ed      	b.n	8000f9a <_free_r+0x22>
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	b10b      	cbz	r3, 8000fc8 <_free_r+0x50>
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d9fa      	bls.n	8000fbe <_free_r+0x46>
 8000fc8:	6811      	ldr	r1, [r2, #0]
 8000fca:	1855      	adds	r5, r2, r1
 8000fcc:	42a5      	cmp	r5, r4
 8000fce:	d10b      	bne.n	8000fe8 <_free_r+0x70>
 8000fd0:	6824      	ldr	r4, [r4, #0]
 8000fd2:	4421      	add	r1, r4
 8000fd4:	1854      	adds	r4, r2, r1
 8000fd6:	42a3      	cmp	r3, r4
 8000fd8:	6011      	str	r1, [r2, #0]
 8000fda:	d1e0      	bne.n	8000f9e <_free_r+0x26>
 8000fdc:	681c      	ldr	r4, [r3, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	6053      	str	r3, [r2, #4]
 8000fe2:	440c      	add	r4, r1
 8000fe4:	6014      	str	r4, [r2, #0]
 8000fe6:	e7da      	b.n	8000f9e <_free_r+0x26>
 8000fe8:	d902      	bls.n	8000ff0 <_free_r+0x78>
 8000fea:	230c      	movs	r3, #12
 8000fec:	6003      	str	r3, [r0, #0]
 8000fee:	e7d6      	b.n	8000f9e <_free_r+0x26>
 8000ff0:	6825      	ldr	r5, [r4, #0]
 8000ff2:	1961      	adds	r1, r4, r5
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	bf04      	itt	eq
 8000ff8:	6819      	ldreq	r1, [r3, #0]
 8000ffa:	685b      	ldreq	r3, [r3, #4]
 8000ffc:	6063      	str	r3, [r4, #4]
 8000ffe:	bf04      	itt	eq
 8001000:	1949      	addeq	r1, r1, r5
 8001002:	6021      	streq	r1, [r4, #0]
 8001004:	6054      	str	r4, [r2, #4]
 8001006:	e7ca      	b.n	8000f9e <_free_r+0x26>
 8001008:	b003      	add	sp, #12
 800100a:	bd30      	pop	{r4, r5, pc}
 800100c:	2000023c 	.word	0x2000023c

08001010 <__sfputc_r>:
 8001010:	6893      	ldr	r3, [r2, #8]
 8001012:	3b01      	subs	r3, #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	b410      	push	{r4}
 8001018:	6093      	str	r3, [r2, #8]
 800101a:	da08      	bge.n	800102e <__sfputc_r+0x1e>
 800101c:	6994      	ldr	r4, [r2, #24]
 800101e:	42a3      	cmp	r3, r4
 8001020:	db01      	blt.n	8001026 <__sfputc_r+0x16>
 8001022:	290a      	cmp	r1, #10
 8001024:	d103      	bne.n	800102e <__sfputc_r+0x1e>
 8001026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800102a:	f000 bac5 	b.w	80015b8 <__swbuf_r>
 800102e:	6813      	ldr	r3, [r2, #0]
 8001030:	1c58      	adds	r0, r3, #1
 8001032:	6010      	str	r0, [r2, #0]
 8001034:	7019      	strb	r1, [r3, #0]
 8001036:	4608      	mov	r0, r1
 8001038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800103c:	4770      	bx	lr

0800103e <__sfputs_r>:
 800103e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001040:	4606      	mov	r6, r0
 8001042:	460f      	mov	r7, r1
 8001044:	4614      	mov	r4, r2
 8001046:	18d5      	adds	r5, r2, r3
 8001048:	42ac      	cmp	r4, r5
 800104a:	d101      	bne.n	8001050 <__sfputs_r+0x12>
 800104c:	2000      	movs	r0, #0
 800104e:	e007      	b.n	8001060 <__sfputs_r+0x22>
 8001050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001054:	463a      	mov	r2, r7
 8001056:	4630      	mov	r0, r6
 8001058:	f7ff ffda 	bl	8001010 <__sfputc_r>
 800105c:	1c43      	adds	r3, r0, #1
 800105e:	d1f3      	bne.n	8001048 <__sfputs_r+0xa>
 8001060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001064 <_vfiprintf_r>:
 8001064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001068:	460d      	mov	r5, r1
 800106a:	b09d      	sub	sp, #116	; 0x74
 800106c:	4614      	mov	r4, r2
 800106e:	4698      	mov	r8, r3
 8001070:	4606      	mov	r6, r0
 8001072:	b118      	cbz	r0, 800107c <_vfiprintf_r+0x18>
 8001074:	6a03      	ldr	r3, [r0, #32]
 8001076:	b90b      	cbnz	r3, 800107c <_vfiprintf_r+0x18>
 8001078:	f7ff fc6e 	bl	8000958 <__sinit>
 800107c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800107e:	07d9      	lsls	r1, r3, #31
 8001080:	d405      	bmi.n	800108e <_vfiprintf_r+0x2a>
 8001082:	89ab      	ldrh	r3, [r5, #12]
 8001084:	059a      	lsls	r2, r3, #22
 8001086:	d402      	bmi.n	800108e <_vfiprintf_r+0x2a>
 8001088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800108a:	f7ff fd3e 	bl	8000b0a <__retarget_lock_acquire_recursive>
 800108e:	89ab      	ldrh	r3, [r5, #12]
 8001090:	071b      	lsls	r3, r3, #28
 8001092:	d501      	bpl.n	8001098 <_vfiprintf_r+0x34>
 8001094:	692b      	ldr	r3, [r5, #16]
 8001096:	b99b      	cbnz	r3, 80010c0 <_vfiprintf_r+0x5c>
 8001098:	4629      	mov	r1, r5
 800109a:	4630      	mov	r0, r6
 800109c:	f000 faca 	bl	8001634 <__swsetup_r>
 80010a0:	b170      	cbz	r0, 80010c0 <_vfiprintf_r+0x5c>
 80010a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80010a4:	07dc      	lsls	r4, r3, #31
 80010a6:	d504      	bpl.n	80010b2 <_vfiprintf_r+0x4e>
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ac:	b01d      	add	sp, #116	; 0x74
 80010ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010b2:	89ab      	ldrh	r3, [r5, #12]
 80010b4:	0598      	lsls	r0, r3, #22
 80010b6:	d4f7      	bmi.n	80010a8 <_vfiprintf_r+0x44>
 80010b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80010ba:	f7ff fd27 	bl	8000b0c <__retarget_lock_release_recursive>
 80010be:	e7f3      	b.n	80010a8 <_vfiprintf_r+0x44>
 80010c0:	2300      	movs	r3, #0
 80010c2:	9309      	str	r3, [sp, #36]	; 0x24
 80010c4:	2320      	movs	r3, #32
 80010c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80010ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80010ce:	2330      	movs	r3, #48	; 0x30
 80010d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001284 <_vfiprintf_r+0x220>
 80010d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80010d8:	f04f 0901 	mov.w	r9, #1
 80010dc:	4623      	mov	r3, r4
 80010de:	469a      	mov	sl, r3
 80010e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80010e4:	b10a      	cbz	r2, 80010ea <_vfiprintf_r+0x86>
 80010e6:	2a25      	cmp	r2, #37	; 0x25
 80010e8:	d1f9      	bne.n	80010de <_vfiprintf_r+0x7a>
 80010ea:	ebba 0b04 	subs.w	fp, sl, r4
 80010ee:	d00b      	beq.n	8001108 <_vfiprintf_r+0xa4>
 80010f0:	465b      	mov	r3, fp
 80010f2:	4622      	mov	r2, r4
 80010f4:	4629      	mov	r1, r5
 80010f6:	4630      	mov	r0, r6
 80010f8:	f7ff ffa1 	bl	800103e <__sfputs_r>
 80010fc:	3001      	adds	r0, #1
 80010fe:	f000 80a9 	beq.w	8001254 <_vfiprintf_r+0x1f0>
 8001102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001104:	445a      	add	r2, fp
 8001106:	9209      	str	r2, [sp, #36]	; 0x24
 8001108:	f89a 3000 	ldrb.w	r3, [sl]
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 80a1 	beq.w	8001254 <_vfiprintf_r+0x1f0>
 8001112:	2300      	movs	r3, #0
 8001114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800111c:	f10a 0a01 	add.w	sl, sl, #1
 8001120:	9304      	str	r3, [sp, #16]
 8001122:	9307      	str	r3, [sp, #28]
 8001124:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001128:	931a      	str	r3, [sp, #104]	; 0x68
 800112a:	4654      	mov	r4, sl
 800112c:	2205      	movs	r2, #5
 800112e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001132:	4854      	ldr	r0, [pc, #336]	; (8001284 <_vfiprintf_r+0x220>)
 8001134:	f7ff f854 	bl	80001e0 <memchr>
 8001138:	9a04      	ldr	r2, [sp, #16]
 800113a:	b9d8      	cbnz	r0, 8001174 <_vfiprintf_r+0x110>
 800113c:	06d1      	lsls	r1, r2, #27
 800113e:	bf44      	itt	mi
 8001140:	2320      	movmi	r3, #32
 8001142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001146:	0713      	lsls	r3, r2, #28
 8001148:	bf44      	itt	mi
 800114a:	232b      	movmi	r3, #43	; 0x2b
 800114c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001150:	f89a 3000 	ldrb.w	r3, [sl]
 8001154:	2b2a      	cmp	r3, #42	; 0x2a
 8001156:	d015      	beq.n	8001184 <_vfiprintf_r+0x120>
 8001158:	9a07      	ldr	r2, [sp, #28]
 800115a:	4654      	mov	r4, sl
 800115c:	2000      	movs	r0, #0
 800115e:	f04f 0c0a 	mov.w	ip, #10
 8001162:	4621      	mov	r1, r4
 8001164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001168:	3b30      	subs	r3, #48	; 0x30
 800116a:	2b09      	cmp	r3, #9
 800116c:	d94d      	bls.n	800120a <_vfiprintf_r+0x1a6>
 800116e:	b1b0      	cbz	r0, 800119e <_vfiprintf_r+0x13a>
 8001170:	9207      	str	r2, [sp, #28]
 8001172:	e014      	b.n	800119e <_vfiprintf_r+0x13a>
 8001174:	eba0 0308 	sub.w	r3, r0, r8
 8001178:	fa09 f303 	lsl.w	r3, r9, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	9304      	str	r3, [sp, #16]
 8001180:	46a2      	mov	sl, r4
 8001182:	e7d2      	b.n	800112a <_vfiprintf_r+0xc6>
 8001184:	9b03      	ldr	r3, [sp, #12]
 8001186:	1d19      	adds	r1, r3, #4
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	9103      	str	r1, [sp, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	bfbb      	ittet	lt
 8001190:	425b      	neglt	r3, r3
 8001192:	f042 0202 	orrlt.w	r2, r2, #2
 8001196:	9307      	strge	r3, [sp, #28]
 8001198:	9307      	strlt	r3, [sp, #28]
 800119a:	bfb8      	it	lt
 800119c:	9204      	strlt	r2, [sp, #16]
 800119e:	7823      	ldrb	r3, [r4, #0]
 80011a0:	2b2e      	cmp	r3, #46	; 0x2e
 80011a2:	d10c      	bne.n	80011be <_vfiprintf_r+0x15a>
 80011a4:	7863      	ldrb	r3, [r4, #1]
 80011a6:	2b2a      	cmp	r3, #42	; 0x2a
 80011a8:	d134      	bne.n	8001214 <_vfiprintf_r+0x1b0>
 80011aa:	9b03      	ldr	r3, [sp, #12]
 80011ac:	1d1a      	adds	r2, r3, #4
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	9203      	str	r2, [sp, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	bfb8      	it	lt
 80011b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80011ba:	3402      	adds	r4, #2
 80011bc:	9305      	str	r3, [sp, #20]
 80011be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001294 <_vfiprintf_r+0x230>
 80011c2:	7821      	ldrb	r1, [r4, #0]
 80011c4:	2203      	movs	r2, #3
 80011c6:	4650      	mov	r0, sl
 80011c8:	f7ff f80a 	bl	80001e0 <memchr>
 80011cc:	b138      	cbz	r0, 80011de <_vfiprintf_r+0x17a>
 80011ce:	9b04      	ldr	r3, [sp, #16]
 80011d0:	eba0 000a 	sub.w	r0, r0, sl
 80011d4:	2240      	movs	r2, #64	; 0x40
 80011d6:	4082      	lsls	r2, r0
 80011d8:	4313      	orrs	r3, r2
 80011da:	3401      	adds	r4, #1
 80011dc:	9304      	str	r3, [sp, #16]
 80011de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011e2:	4829      	ldr	r0, [pc, #164]	; (8001288 <_vfiprintf_r+0x224>)
 80011e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80011e8:	2206      	movs	r2, #6
 80011ea:	f7fe fff9 	bl	80001e0 <memchr>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d03f      	beq.n	8001272 <_vfiprintf_r+0x20e>
 80011f2:	4b26      	ldr	r3, [pc, #152]	; (800128c <_vfiprintf_r+0x228>)
 80011f4:	bb1b      	cbnz	r3, 800123e <_vfiprintf_r+0x1da>
 80011f6:	9b03      	ldr	r3, [sp, #12]
 80011f8:	3307      	adds	r3, #7
 80011fa:	f023 0307 	bic.w	r3, r3, #7
 80011fe:	3308      	adds	r3, #8
 8001200:	9303      	str	r3, [sp, #12]
 8001202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001204:	443b      	add	r3, r7
 8001206:	9309      	str	r3, [sp, #36]	; 0x24
 8001208:	e768      	b.n	80010dc <_vfiprintf_r+0x78>
 800120a:	fb0c 3202 	mla	r2, ip, r2, r3
 800120e:	460c      	mov	r4, r1
 8001210:	2001      	movs	r0, #1
 8001212:	e7a6      	b.n	8001162 <_vfiprintf_r+0xfe>
 8001214:	2300      	movs	r3, #0
 8001216:	3401      	adds	r4, #1
 8001218:	9305      	str	r3, [sp, #20]
 800121a:	4619      	mov	r1, r3
 800121c:	f04f 0c0a 	mov.w	ip, #10
 8001220:	4620      	mov	r0, r4
 8001222:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001226:	3a30      	subs	r2, #48	; 0x30
 8001228:	2a09      	cmp	r2, #9
 800122a:	d903      	bls.n	8001234 <_vfiprintf_r+0x1d0>
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0c6      	beq.n	80011be <_vfiprintf_r+0x15a>
 8001230:	9105      	str	r1, [sp, #20]
 8001232:	e7c4      	b.n	80011be <_vfiprintf_r+0x15a>
 8001234:	fb0c 2101 	mla	r1, ip, r1, r2
 8001238:	4604      	mov	r4, r0
 800123a:	2301      	movs	r3, #1
 800123c:	e7f0      	b.n	8001220 <_vfiprintf_r+0x1bc>
 800123e:	ab03      	add	r3, sp, #12
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	462a      	mov	r2, r5
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <_vfiprintf_r+0x22c>)
 8001246:	a904      	add	r1, sp, #16
 8001248:	4630      	mov	r0, r6
 800124a:	f3af 8000 	nop.w
 800124e:	4607      	mov	r7, r0
 8001250:	1c78      	adds	r0, r7, #1
 8001252:	d1d6      	bne.n	8001202 <_vfiprintf_r+0x19e>
 8001254:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001256:	07d9      	lsls	r1, r3, #31
 8001258:	d405      	bmi.n	8001266 <_vfiprintf_r+0x202>
 800125a:	89ab      	ldrh	r3, [r5, #12]
 800125c:	059a      	lsls	r2, r3, #22
 800125e:	d402      	bmi.n	8001266 <_vfiprintf_r+0x202>
 8001260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001262:	f7ff fc53 	bl	8000b0c <__retarget_lock_release_recursive>
 8001266:	89ab      	ldrh	r3, [r5, #12]
 8001268:	065b      	lsls	r3, r3, #25
 800126a:	f53f af1d 	bmi.w	80010a8 <_vfiprintf_r+0x44>
 800126e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001270:	e71c      	b.n	80010ac <_vfiprintf_r+0x48>
 8001272:	ab03      	add	r3, sp, #12
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	462a      	mov	r2, r5
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <_vfiprintf_r+0x22c>)
 800127a:	a904      	add	r1, sp, #16
 800127c:	4630      	mov	r0, r6
 800127e:	f000 f879 	bl	8001374 <_printf_i>
 8001282:	e7e4      	b.n	800124e <_vfiprintf_r+0x1ea>
 8001284:	08001955 	.word	0x08001955
 8001288:	0800195f 	.word	0x0800195f
 800128c:	00000000 	.word	0x00000000
 8001290:	0800103f 	.word	0x0800103f
 8001294:	0800195b 	.word	0x0800195b

08001298 <_printf_common>:
 8001298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800129c:	4616      	mov	r6, r2
 800129e:	4699      	mov	r9, r3
 80012a0:	688a      	ldr	r2, [r1, #8]
 80012a2:	690b      	ldr	r3, [r1, #16]
 80012a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80012a8:	4293      	cmp	r3, r2
 80012aa:	bfb8      	it	lt
 80012ac:	4613      	movlt	r3, r2
 80012ae:	6033      	str	r3, [r6, #0]
 80012b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80012b4:	4607      	mov	r7, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	b10a      	cbz	r2, 80012be <_printf_common+0x26>
 80012ba:	3301      	adds	r3, #1
 80012bc:	6033      	str	r3, [r6, #0]
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	0699      	lsls	r1, r3, #26
 80012c2:	bf42      	ittt	mi
 80012c4:	6833      	ldrmi	r3, [r6, #0]
 80012c6:	3302      	addmi	r3, #2
 80012c8:	6033      	strmi	r3, [r6, #0]
 80012ca:	6825      	ldr	r5, [r4, #0]
 80012cc:	f015 0506 	ands.w	r5, r5, #6
 80012d0:	d106      	bne.n	80012e0 <_printf_common+0x48>
 80012d2:	f104 0a19 	add.w	sl, r4, #25
 80012d6:	68e3      	ldr	r3, [r4, #12]
 80012d8:	6832      	ldr	r2, [r6, #0]
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	42ab      	cmp	r3, r5
 80012de:	dc26      	bgt.n	800132e <_printf_common+0x96>
 80012e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80012e4:	1e13      	subs	r3, r2, #0
 80012e6:	6822      	ldr	r2, [r4, #0]
 80012e8:	bf18      	it	ne
 80012ea:	2301      	movne	r3, #1
 80012ec:	0692      	lsls	r2, r2, #26
 80012ee:	d42b      	bmi.n	8001348 <_printf_common+0xb0>
 80012f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80012f4:	4649      	mov	r1, r9
 80012f6:	4638      	mov	r0, r7
 80012f8:	47c0      	blx	r8
 80012fa:	3001      	adds	r0, #1
 80012fc:	d01e      	beq.n	800133c <_printf_common+0xa4>
 80012fe:	6823      	ldr	r3, [r4, #0]
 8001300:	6922      	ldr	r2, [r4, #16]
 8001302:	f003 0306 	and.w	r3, r3, #6
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf02      	ittt	eq
 800130a:	68e5      	ldreq	r5, [r4, #12]
 800130c:	6833      	ldreq	r3, [r6, #0]
 800130e:	1aed      	subeq	r5, r5, r3
 8001310:	68a3      	ldr	r3, [r4, #8]
 8001312:	bf0c      	ite	eq
 8001314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001318:	2500      	movne	r5, #0
 800131a:	4293      	cmp	r3, r2
 800131c:	bfc4      	itt	gt
 800131e:	1a9b      	subgt	r3, r3, r2
 8001320:	18ed      	addgt	r5, r5, r3
 8001322:	2600      	movs	r6, #0
 8001324:	341a      	adds	r4, #26
 8001326:	42b5      	cmp	r5, r6
 8001328:	d11a      	bne.n	8001360 <_printf_common+0xc8>
 800132a:	2000      	movs	r0, #0
 800132c:	e008      	b.n	8001340 <_printf_common+0xa8>
 800132e:	2301      	movs	r3, #1
 8001330:	4652      	mov	r2, sl
 8001332:	4649      	mov	r1, r9
 8001334:	4638      	mov	r0, r7
 8001336:	47c0      	blx	r8
 8001338:	3001      	adds	r0, #1
 800133a:	d103      	bne.n	8001344 <_printf_common+0xac>
 800133c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001344:	3501      	adds	r5, #1
 8001346:	e7c6      	b.n	80012d6 <_printf_common+0x3e>
 8001348:	18e1      	adds	r1, r4, r3
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	2030      	movs	r0, #48	; 0x30
 800134e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001352:	4422      	add	r2, r4
 8001354:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001358:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800135c:	3302      	adds	r3, #2
 800135e:	e7c7      	b.n	80012f0 <_printf_common+0x58>
 8001360:	2301      	movs	r3, #1
 8001362:	4622      	mov	r2, r4
 8001364:	4649      	mov	r1, r9
 8001366:	4638      	mov	r0, r7
 8001368:	47c0      	blx	r8
 800136a:	3001      	adds	r0, #1
 800136c:	d0e6      	beq.n	800133c <_printf_common+0xa4>
 800136e:	3601      	adds	r6, #1
 8001370:	e7d9      	b.n	8001326 <_printf_common+0x8e>
	...

08001374 <_printf_i>:
 8001374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001378:	7e0f      	ldrb	r7, [r1, #24]
 800137a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800137c:	2f78      	cmp	r7, #120	; 0x78
 800137e:	4691      	mov	r9, r2
 8001380:	4680      	mov	r8, r0
 8001382:	460c      	mov	r4, r1
 8001384:	469a      	mov	sl, r3
 8001386:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800138a:	d807      	bhi.n	800139c <_printf_i+0x28>
 800138c:	2f62      	cmp	r7, #98	; 0x62
 800138e:	d80a      	bhi.n	80013a6 <_printf_i+0x32>
 8001390:	2f00      	cmp	r7, #0
 8001392:	f000 80d4 	beq.w	800153e <_printf_i+0x1ca>
 8001396:	2f58      	cmp	r7, #88	; 0x58
 8001398:	f000 80c0 	beq.w	800151c <_printf_i+0x1a8>
 800139c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80013a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80013a4:	e03a      	b.n	800141c <_printf_i+0xa8>
 80013a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80013aa:	2b15      	cmp	r3, #21
 80013ac:	d8f6      	bhi.n	800139c <_printf_i+0x28>
 80013ae:	a101      	add	r1, pc, #4	; (adr r1, 80013b4 <_printf_i+0x40>)
 80013b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80013b4:	0800140d 	.word	0x0800140d
 80013b8:	08001421 	.word	0x08001421
 80013bc:	0800139d 	.word	0x0800139d
 80013c0:	0800139d 	.word	0x0800139d
 80013c4:	0800139d 	.word	0x0800139d
 80013c8:	0800139d 	.word	0x0800139d
 80013cc:	08001421 	.word	0x08001421
 80013d0:	0800139d 	.word	0x0800139d
 80013d4:	0800139d 	.word	0x0800139d
 80013d8:	0800139d 	.word	0x0800139d
 80013dc:	0800139d 	.word	0x0800139d
 80013e0:	08001525 	.word	0x08001525
 80013e4:	0800144d 	.word	0x0800144d
 80013e8:	080014df 	.word	0x080014df
 80013ec:	0800139d 	.word	0x0800139d
 80013f0:	0800139d 	.word	0x0800139d
 80013f4:	08001547 	.word	0x08001547
 80013f8:	0800139d 	.word	0x0800139d
 80013fc:	0800144d 	.word	0x0800144d
 8001400:	0800139d 	.word	0x0800139d
 8001404:	0800139d 	.word	0x0800139d
 8001408:	080014e7 	.word	0x080014e7
 800140c:	682b      	ldr	r3, [r5, #0]
 800140e:	1d1a      	adds	r2, r3, #4
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	602a      	str	r2, [r5, #0]
 8001414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001418:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800141c:	2301      	movs	r3, #1
 800141e:	e09f      	b.n	8001560 <_printf_i+0x1ec>
 8001420:	6820      	ldr	r0, [r4, #0]
 8001422:	682b      	ldr	r3, [r5, #0]
 8001424:	0607      	lsls	r7, r0, #24
 8001426:	f103 0104 	add.w	r1, r3, #4
 800142a:	6029      	str	r1, [r5, #0]
 800142c:	d501      	bpl.n	8001432 <_printf_i+0xbe>
 800142e:	681e      	ldr	r6, [r3, #0]
 8001430:	e003      	b.n	800143a <_printf_i+0xc6>
 8001432:	0646      	lsls	r6, r0, #25
 8001434:	d5fb      	bpl.n	800142e <_printf_i+0xba>
 8001436:	f9b3 6000 	ldrsh.w	r6, [r3]
 800143a:	2e00      	cmp	r6, #0
 800143c:	da03      	bge.n	8001446 <_printf_i+0xd2>
 800143e:	232d      	movs	r3, #45	; 0x2d
 8001440:	4276      	negs	r6, r6
 8001442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001446:	485a      	ldr	r0, [pc, #360]	; (80015b0 <_printf_i+0x23c>)
 8001448:	230a      	movs	r3, #10
 800144a:	e012      	b.n	8001472 <_printf_i+0xfe>
 800144c:	682b      	ldr	r3, [r5, #0]
 800144e:	6820      	ldr	r0, [r4, #0]
 8001450:	1d19      	adds	r1, r3, #4
 8001452:	6029      	str	r1, [r5, #0]
 8001454:	0605      	lsls	r5, r0, #24
 8001456:	d501      	bpl.n	800145c <_printf_i+0xe8>
 8001458:	681e      	ldr	r6, [r3, #0]
 800145a:	e002      	b.n	8001462 <_printf_i+0xee>
 800145c:	0641      	lsls	r1, r0, #25
 800145e:	d5fb      	bpl.n	8001458 <_printf_i+0xe4>
 8001460:	881e      	ldrh	r6, [r3, #0]
 8001462:	4853      	ldr	r0, [pc, #332]	; (80015b0 <_printf_i+0x23c>)
 8001464:	2f6f      	cmp	r7, #111	; 0x6f
 8001466:	bf0c      	ite	eq
 8001468:	2308      	moveq	r3, #8
 800146a:	230a      	movne	r3, #10
 800146c:	2100      	movs	r1, #0
 800146e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001472:	6865      	ldr	r5, [r4, #4]
 8001474:	60a5      	str	r5, [r4, #8]
 8001476:	2d00      	cmp	r5, #0
 8001478:	bfa2      	ittt	ge
 800147a:	6821      	ldrge	r1, [r4, #0]
 800147c:	f021 0104 	bicge.w	r1, r1, #4
 8001480:	6021      	strge	r1, [r4, #0]
 8001482:	b90e      	cbnz	r6, 8001488 <_printf_i+0x114>
 8001484:	2d00      	cmp	r5, #0
 8001486:	d04b      	beq.n	8001520 <_printf_i+0x1ac>
 8001488:	4615      	mov	r5, r2
 800148a:	fbb6 f1f3 	udiv	r1, r6, r3
 800148e:	fb03 6711 	mls	r7, r3, r1, r6
 8001492:	5dc7      	ldrb	r7, [r0, r7]
 8001494:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001498:	4637      	mov	r7, r6
 800149a:	42bb      	cmp	r3, r7
 800149c:	460e      	mov	r6, r1
 800149e:	d9f4      	bls.n	800148a <_printf_i+0x116>
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d10b      	bne.n	80014bc <_printf_i+0x148>
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	07de      	lsls	r6, r3, #31
 80014a8:	d508      	bpl.n	80014bc <_printf_i+0x148>
 80014aa:	6923      	ldr	r3, [r4, #16]
 80014ac:	6861      	ldr	r1, [r4, #4]
 80014ae:	4299      	cmp	r1, r3
 80014b0:	bfde      	ittt	le
 80014b2:	2330      	movle	r3, #48	; 0x30
 80014b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80014b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80014bc:	1b52      	subs	r2, r2, r5
 80014be:	6122      	str	r2, [r4, #16]
 80014c0:	f8cd a000 	str.w	sl, [sp]
 80014c4:	464b      	mov	r3, r9
 80014c6:	aa03      	add	r2, sp, #12
 80014c8:	4621      	mov	r1, r4
 80014ca:	4640      	mov	r0, r8
 80014cc:	f7ff fee4 	bl	8001298 <_printf_common>
 80014d0:	3001      	adds	r0, #1
 80014d2:	d14a      	bne.n	800156a <_printf_i+0x1f6>
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014d8:	b004      	add	sp, #16
 80014da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	f043 0320 	orr.w	r3, r3, #32
 80014e4:	6023      	str	r3, [r4, #0]
 80014e6:	4833      	ldr	r0, [pc, #204]	; (80015b4 <_printf_i+0x240>)
 80014e8:	2778      	movs	r7, #120	; 0x78
 80014ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	6829      	ldr	r1, [r5, #0]
 80014f2:	061f      	lsls	r7, r3, #24
 80014f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80014f8:	d402      	bmi.n	8001500 <_printf_i+0x18c>
 80014fa:	065f      	lsls	r7, r3, #25
 80014fc:	bf48      	it	mi
 80014fe:	b2b6      	uxthmi	r6, r6
 8001500:	07df      	lsls	r7, r3, #31
 8001502:	bf48      	it	mi
 8001504:	f043 0320 	orrmi.w	r3, r3, #32
 8001508:	6029      	str	r1, [r5, #0]
 800150a:	bf48      	it	mi
 800150c:	6023      	strmi	r3, [r4, #0]
 800150e:	b91e      	cbnz	r6, 8001518 <_printf_i+0x1a4>
 8001510:	6823      	ldr	r3, [r4, #0]
 8001512:	f023 0320 	bic.w	r3, r3, #32
 8001516:	6023      	str	r3, [r4, #0]
 8001518:	2310      	movs	r3, #16
 800151a:	e7a7      	b.n	800146c <_printf_i+0xf8>
 800151c:	4824      	ldr	r0, [pc, #144]	; (80015b0 <_printf_i+0x23c>)
 800151e:	e7e4      	b.n	80014ea <_printf_i+0x176>
 8001520:	4615      	mov	r5, r2
 8001522:	e7bd      	b.n	80014a0 <_printf_i+0x12c>
 8001524:	682b      	ldr	r3, [r5, #0]
 8001526:	6826      	ldr	r6, [r4, #0]
 8001528:	6961      	ldr	r1, [r4, #20]
 800152a:	1d18      	adds	r0, r3, #4
 800152c:	6028      	str	r0, [r5, #0]
 800152e:	0635      	lsls	r5, r6, #24
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	d501      	bpl.n	8001538 <_printf_i+0x1c4>
 8001534:	6019      	str	r1, [r3, #0]
 8001536:	e002      	b.n	800153e <_printf_i+0x1ca>
 8001538:	0670      	lsls	r0, r6, #25
 800153a:	d5fb      	bpl.n	8001534 <_printf_i+0x1c0>
 800153c:	8019      	strh	r1, [r3, #0]
 800153e:	2300      	movs	r3, #0
 8001540:	6123      	str	r3, [r4, #16]
 8001542:	4615      	mov	r5, r2
 8001544:	e7bc      	b.n	80014c0 <_printf_i+0x14c>
 8001546:	682b      	ldr	r3, [r5, #0]
 8001548:	1d1a      	adds	r2, r3, #4
 800154a:	602a      	str	r2, [r5, #0]
 800154c:	681d      	ldr	r5, [r3, #0]
 800154e:	6862      	ldr	r2, [r4, #4]
 8001550:	2100      	movs	r1, #0
 8001552:	4628      	mov	r0, r5
 8001554:	f7fe fe44 	bl	80001e0 <memchr>
 8001558:	b108      	cbz	r0, 800155e <_printf_i+0x1ea>
 800155a:	1b40      	subs	r0, r0, r5
 800155c:	6060      	str	r0, [r4, #4]
 800155e:	6863      	ldr	r3, [r4, #4]
 8001560:	6123      	str	r3, [r4, #16]
 8001562:	2300      	movs	r3, #0
 8001564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001568:	e7aa      	b.n	80014c0 <_printf_i+0x14c>
 800156a:	6923      	ldr	r3, [r4, #16]
 800156c:	462a      	mov	r2, r5
 800156e:	4649      	mov	r1, r9
 8001570:	4640      	mov	r0, r8
 8001572:	47d0      	blx	sl
 8001574:	3001      	adds	r0, #1
 8001576:	d0ad      	beq.n	80014d4 <_printf_i+0x160>
 8001578:	6823      	ldr	r3, [r4, #0]
 800157a:	079b      	lsls	r3, r3, #30
 800157c:	d413      	bmi.n	80015a6 <_printf_i+0x232>
 800157e:	68e0      	ldr	r0, [r4, #12]
 8001580:	9b03      	ldr	r3, [sp, #12]
 8001582:	4298      	cmp	r0, r3
 8001584:	bfb8      	it	lt
 8001586:	4618      	movlt	r0, r3
 8001588:	e7a6      	b.n	80014d8 <_printf_i+0x164>
 800158a:	2301      	movs	r3, #1
 800158c:	4632      	mov	r2, r6
 800158e:	4649      	mov	r1, r9
 8001590:	4640      	mov	r0, r8
 8001592:	47d0      	blx	sl
 8001594:	3001      	adds	r0, #1
 8001596:	d09d      	beq.n	80014d4 <_printf_i+0x160>
 8001598:	3501      	adds	r5, #1
 800159a:	68e3      	ldr	r3, [r4, #12]
 800159c:	9903      	ldr	r1, [sp, #12]
 800159e:	1a5b      	subs	r3, r3, r1
 80015a0:	42ab      	cmp	r3, r5
 80015a2:	dcf2      	bgt.n	800158a <_printf_i+0x216>
 80015a4:	e7eb      	b.n	800157e <_printf_i+0x20a>
 80015a6:	2500      	movs	r5, #0
 80015a8:	f104 0619 	add.w	r6, r4, #25
 80015ac:	e7f5      	b.n	800159a <_printf_i+0x226>
 80015ae:	bf00      	nop
 80015b0:	08001966 	.word	0x08001966
 80015b4:	08001977 	.word	0x08001977

080015b8 <__swbuf_r>:
 80015b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ba:	460e      	mov	r6, r1
 80015bc:	4614      	mov	r4, r2
 80015be:	4605      	mov	r5, r0
 80015c0:	b118      	cbz	r0, 80015ca <__swbuf_r+0x12>
 80015c2:	6a03      	ldr	r3, [r0, #32]
 80015c4:	b90b      	cbnz	r3, 80015ca <__swbuf_r+0x12>
 80015c6:	f7ff f9c7 	bl	8000958 <__sinit>
 80015ca:	69a3      	ldr	r3, [r4, #24]
 80015cc:	60a3      	str	r3, [r4, #8]
 80015ce:	89a3      	ldrh	r3, [r4, #12]
 80015d0:	071a      	lsls	r2, r3, #28
 80015d2:	d525      	bpl.n	8001620 <__swbuf_r+0x68>
 80015d4:	6923      	ldr	r3, [r4, #16]
 80015d6:	b31b      	cbz	r3, 8001620 <__swbuf_r+0x68>
 80015d8:	6823      	ldr	r3, [r4, #0]
 80015da:	6922      	ldr	r2, [r4, #16]
 80015dc:	1a98      	subs	r0, r3, r2
 80015de:	6963      	ldr	r3, [r4, #20]
 80015e0:	b2f6      	uxtb	r6, r6
 80015e2:	4283      	cmp	r3, r0
 80015e4:	4637      	mov	r7, r6
 80015e6:	dc04      	bgt.n	80015f2 <__swbuf_r+0x3a>
 80015e8:	4621      	mov	r1, r4
 80015ea:	4628      	mov	r0, r5
 80015ec:	f7ff fbdc 	bl	8000da8 <_fflush_r>
 80015f0:	b9e0      	cbnz	r0, 800162c <__swbuf_r+0x74>
 80015f2:	68a3      	ldr	r3, [r4, #8]
 80015f4:	3b01      	subs	r3, #1
 80015f6:	60a3      	str	r3, [r4, #8]
 80015f8:	6823      	ldr	r3, [r4, #0]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	6022      	str	r2, [r4, #0]
 80015fe:	701e      	strb	r6, [r3, #0]
 8001600:	6962      	ldr	r2, [r4, #20]
 8001602:	1c43      	adds	r3, r0, #1
 8001604:	429a      	cmp	r2, r3
 8001606:	d004      	beq.n	8001612 <__swbuf_r+0x5a>
 8001608:	89a3      	ldrh	r3, [r4, #12]
 800160a:	07db      	lsls	r3, r3, #31
 800160c:	d506      	bpl.n	800161c <__swbuf_r+0x64>
 800160e:	2e0a      	cmp	r6, #10
 8001610:	d104      	bne.n	800161c <__swbuf_r+0x64>
 8001612:	4621      	mov	r1, r4
 8001614:	4628      	mov	r0, r5
 8001616:	f7ff fbc7 	bl	8000da8 <_fflush_r>
 800161a:	b938      	cbnz	r0, 800162c <__swbuf_r+0x74>
 800161c:	4638      	mov	r0, r7
 800161e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001620:	4621      	mov	r1, r4
 8001622:	4628      	mov	r0, r5
 8001624:	f000 f806 	bl	8001634 <__swsetup_r>
 8001628:	2800      	cmp	r0, #0
 800162a:	d0d5      	beq.n	80015d8 <__swbuf_r+0x20>
 800162c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001630:	e7f4      	b.n	800161c <__swbuf_r+0x64>
	...

08001634 <__swsetup_r>:
 8001634:	b538      	push	{r3, r4, r5, lr}
 8001636:	4b2a      	ldr	r3, [pc, #168]	; (80016e0 <__swsetup_r+0xac>)
 8001638:	4605      	mov	r5, r0
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	460c      	mov	r4, r1
 800163e:	b118      	cbz	r0, 8001648 <__swsetup_r+0x14>
 8001640:	6a03      	ldr	r3, [r0, #32]
 8001642:	b90b      	cbnz	r3, 8001648 <__swsetup_r+0x14>
 8001644:	f7ff f988 	bl	8000958 <__sinit>
 8001648:	89a3      	ldrh	r3, [r4, #12]
 800164a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800164e:	0718      	lsls	r0, r3, #28
 8001650:	d422      	bmi.n	8001698 <__swsetup_r+0x64>
 8001652:	06d9      	lsls	r1, r3, #27
 8001654:	d407      	bmi.n	8001666 <__swsetup_r+0x32>
 8001656:	2309      	movs	r3, #9
 8001658:	602b      	str	r3, [r5, #0]
 800165a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800165e:	81a3      	strh	r3, [r4, #12]
 8001660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001664:	e034      	b.n	80016d0 <__swsetup_r+0x9c>
 8001666:	0758      	lsls	r0, r3, #29
 8001668:	d512      	bpl.n	8001690 <__swsetup_r+0x5c>
 800166a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800166c:	b141      	cbz	r1, 8001680 <__swsetup_r+0x4c>
 800166e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001672:	4299      	cmp	r1, r3
 8001674:	d002      	beq.n	800167c <__swsetup_r+0x48>
 8001676:	4628      	mov	r0, r5
 8001678:	f7ff fc7e 	bl	8000f78 <_free_r>
 800167c:	2300      	movs	r3, #0
 800167e:	6363      	str	r3, [r4, #52]	; 0x34
 8001680:	89a3      	ldrh	r3, [r4, #12]
 8001682:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001686:	81a3      	strh	r3, [r4, #12]
 8001688:	2300      	movs	r3, #0
 800168a:	6063      	str	r3, [r4, #4]
 800168c:	6923      	ldr	r3, [r4, #16]
 800168e:	6023      	str	r3, [r4, #0]
 8001690:	89a3      	ldrh	r3, [r4, #12]
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	81a3      	strh	r3, [r4, #12]
 8001698:	6923      	ldr	r3, [r4, #16]
 800169a:	b94b      	cbnz	r3, 80016b0 <__swsetup_r+0x7c>
 800169c:	89a3      	ldrh	r3, [r4, #12]
 800169e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80016a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016a6:	d003      	beq.n	80016b0 <__swsetup_r+0x7c>
 80016a8:	4621      	mov	r1, r4
 80016aa:	4628      	mov	r0, r5
 80016ac:	f000 f840 	bl	8001730 <__smakebuf_r>
 80016b0:	89a0      	ldrh	r0, [r4, #12]
 80016b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80016b6:	f010 0301 	ands.w	r3, r0, #1
 80016ba:	d00a      	beq.n	80016d2 <__swsetup_r+0x9e>
 80016bc:	2300      	movs	r3, #0
 80016be:	60a3      	str	r3, [r4, #8]
 80016c0:	6963      	ldr	r3, [r4, #20]
 80016c2:	425b      	negs	r3, r3
 80016c4:	61a3      	str	r3, [r4, #24]
 80016c6:	6923      	ldr	r3, [r4, #16]
 80016c8:	b943      	cbnz	r3, 80016dc <__swsetup_r+0xa8>
 80016ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80016ce:	d1c4      	bne.n	800165a <__swsetup_r+0x26>
 80016d0:	bd38      	pop	{r3, r4, r5, pc}
 80016d2:	0781      	lsls	r1, r0, #30
 80016d4:	bf58      	it	pl
 80016d6:	6963      	ldrpl	r3, [r4, #20]
 80016d8:	60a3      	str	r3, [r4, #8]
 80016da:	e7f4      	b.n	80016c6 <__swsetup_r+0x92>
 80016dc:	2000      	movs	r0, #0
 80016de:	e7f7      	b.n	80016d0 <__swsetup_r+0x9c>
 80016e0:	20000080 	.word	0x20000080

080016e4 <__swhatbuf_r>:
 80016e4:	b570      	push	{r4, r5, r6, lr}
 80016e6:	460c      	mov	r4, r1
 80016e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016ec:	2900      	cmp	r1, #0
 80016ee:	b096      	sub	sp, #88	; 0x58
 80016f0:	4615      	mov	r5, r2
 80016f2:	461e      	mov	r6, r3
 80016f4:	da0d      	bge.n	8001712 <__swhatbuf_r+0x2e>
 80016f6:	89a3      	ldrh	r3, [r4, #12]
 80016f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80016fc:	f04f 0100 	mov.w	r1, #0
 8001700:	bf0c      	ite	eq
 8001702:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001706:	2340      	movne	r3, #64	; 0x40
 8001708:	2000      	movs	r0, #0
 800170a:	6031      	str	r1, [r6, #0]
 800170c:	602b      	str	r3, [r5, #0]
 800170e:	b016      	add	sp, #88	; 0x58
 8001710:	bd70      	pop	{r4, r5, r6, pc}
 8001712:	466a      	mov	r2, sp
 8001714:	f000 f848 	bl	80017a8 <_fstat_r>
 8001718:	2800      	cmp	r0, #0
 800171a:	dbec      	blt.n	80016f6 <__swhatbuf_r+0x12>
 800171c:	9901      	ldr	r1, [sp, #4]
 800171e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001722:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001726:	4259      	negs	r1, r3
 8001728:	4159      	adcs	r1, r3
 800172a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800172e:	e7eb      	b.n	8001708 <__swhatbuf_r+0x24>

08001730 <__smakebuf_r>:
 8001730:	898b      	ldrh	r3, [r1, #12]
 8001732:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001734:	079d      	lsls	r5, r3, #30
 8001736:	4606      	mov	r6, r0
 8001738:	460c      	mov	r4, r1
 800173a:	d507      	bpl.n	800174c <__smakebuf_r+0x1c>
 800173c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001740:	6023      	str	r3, [r4, #0]
 8001742:	6123      	str	r3, [r4, #16]
 8001744:	2301      	movs	r3, #1
 8001746:	6163      	str	r3, [r4, #20]
 8001748:	b002      	add	sp, #8
 800174a:	bd70      	pop	{r4, r5, r6, pc}
 800174c:	ab01      	add	r3, sp, #4
 800174e:	466a      	mov	r2, sp
 8001750:	f7ff ffc8 	bl	80016e4 <__swhatbuf_r>
 8001754:	9900      	ldr	r1, [sp, #0]
 8001756:	4605      	mov	r5, r0
 8001758:	4630      	mov	r0, r6
 800175a:	f7ff fa1f 	bl	8000b9c <_malloc_r>
 800175e:	b948      	cbnz	r0, 8001774 <__smakebuf_r+0x44>
 8001760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001764:	059a      	lsls	r2, r3, #22
 8001766:	d4ef      	bmi.n	8001748 <__smakebuf_r+0x18>
 8001768:	f023 0303 	bic.w	r3, r3, #3
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	81a3      	strh	r3, [r4, #12]
 8001772:	e7e3      	b.n	800173c <__smakebuf_r+0xc>
 8001774:	89a3      	ldrh	r3, [r4, #12]
 8001776:	6020      	str	r0, [r4, #0]
 8001778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800177c:	81a3      	strh	r3, [r4, #12]
 800177e:	9b00      	ldr	r3, [sp, #0]
 8001780:	6163      	str	r3, [r4, #20]
 8001782:	9b01      	ldr	r3, [sp, #4]
 8001784:	6120      	str	r0, [r4, #16]
 8001786:	b15b      	cbz	r3, 80017a0 <__smakebuf_r+0x70>
 8001788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800178c:	4630      	mov	r0, r6
 800178e:	f000 f81d 	bl	80017cc <_isatty_r>
 8001792:	b128      	cbz	r0, 80017a0 <__smakebuf_r+0x70>
 8001794:	89a3      	ldrh	r3, [r4, #12]
 8001796:	f023 0303 	bic.w	r3, r3, #3
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	81a3      	strh	r3, [r4, #12]
 80017a0:	89a3      	ldrh	r3, [r4, #12]
 80017a2:	431d      	orrs	r5, r3
 80017a4:	81a5      	strh	r5, [r4, #12]
 80017a6:	e7cf      	b.n	8001748 <__smakebuf_r+0x18>

080017a8 <_fstat_r>:
 80017a8:	b538      	push	{r3, r4, r5, lr}
 80017aa:	4d07      	ldr	r5, [pc, #28]	; (80017c8 <_fstat_r+0x20>)
 80017ac:	2300      	movs	r3, #0
 80017ae:	4604      	mov	r4, r0
 80017b0:	4608      	mov	r0, r1
 80017b2:	4611      	mov	r1, r2
 80017b4:	602b      	str	r3, [r5, #0]
 80017b6:	f7fe ffba 	bl	800072e <_fstat>
 80017ba:	1c43      	adds	r3, r0, #1
 80017bc:	d102      	bne.n	80017c4 <_fstat_r+0x1c>
 80017be:	682b      	ldr	r3, [r5, #0]
 80017c0:	b103      	cbz	r3, 80017c4 <_fstat_r+0x1c>
 80017c2:	6023      	str	r3, [r4, #0]
 80017c4:	bd38      	pop	{r3, r4, r5, pc}
 80017c6:	bf00      	nop
 80017c8:	20000244 	.word	0x20000244

080017cc <_isatty_r>:
 80017cc:	b538      	push	{r3, r4, r5, lr}
 80017ce:	4d06      	ldr	r5, [pc, #24]	; (80017e8 <_isatty_r+0x1c>)
 80017d0:	2300      	movs	r3, #0
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	602b      	str	r3, [r5, #0]
 80017d8:	f7fe ffb9 	bl	800074e <_isatty>
 80017dc:	1c43      	adds	r3, r0, #1
 80017de:	d102      	bne.n	80017e6 <_isatty_r+0x1a>
 80017e0:	682b      	ldr	r3, [r5, #0]
 80017e2:	b103      	cbz	r3, 80017e6 <_isatty_r+0x1a>
 80017e4:	6023      	str	r3, [r4, #0]
 80017e6:	bd38      	pop	{r3, r4, r5, pc}
 80017e8:	20000244 	.word	0x20000244

080017ec <_raise_r>:
 80017ec:	291f      	cmp	r1, #31
 80017ee:	b538      	push	{r3, r4, r5, lr}
 80017f0:	4604      	mov	r4, r0
 80017f2:	460d      	mov	r5, r1
 80017f4:	d904      	bls.n	8001800 <_raise_r+0x14>
 80017f6:	2316      	movs	r3, #22
 80017f8:	6003      	str	r3, [r0, #0]
 80017fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017fe:	bd38      	pop	{r3, r4, r5, pc}
 8001800:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001802:	b112      	cbz	r2, 800180a <_raise_r+0x1e>
 8001804:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001808:	b94b      	cbnz	r3, 800181e <_raise_r+0x32>
 800180a:	4620      	mov	r0, r4
 800180c:	f000 f830 	bl	8001870 <_getpid_r>
 8001810:	462a      	mov	r2, r5
 8001812:	4601      	mov	r1, r0
 8001814:	4620      	mov	r0, r4
 8001816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800181a:	f000 b817 	b.w	800184c <_kill_r>
 800181e:	2b01      	cmp	r3, #1
 8001820:	d00a      	beq.n	8001838 <_raise_r+0x4c>
 8001822:	1c59      	adds	r1, r3, #1
 8001824:	d103      	bne.n	800182e <_raise_r+0x42>
 8001826:	2316      	movs	r3, #22
 8001828:	6003      	str	r3, [r0, #0]
 800182a:	2001      	movs	r0, #1
 800182c:	e7e7      	b.n	80017fe <_raise_r+0x12>
 800182e:	2400      	movs	r4, #0
 8001830:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001834:	4628      	mov	r0, r5
 8001836:	4798      	blx	r3
 8001838:	2000      	movs	r0, #0
 800183a:	e7e0      	b.n	80017fe <_raise_r+0x12>

0800183c <raise>:
 800183c:	4b02      	ldr	r3, [pc, #8]	; (8001848 <raise+0xc>)
 800183e:	4601      	mov	r1, r0
 8001840:	6818      	ldr	r0, [r3, #0]
 8001842:	f7ff bfd3 	b.w	80017ec <_raise_r>
 8001846:	bf00      	nop
 8001848:	20000080 	.word	0x20000080

0800184c <_kill_r>:
 800184c:	b538      	push	{r3, r4, r5, lr}
 800184e:	4d07      	ldr	r5, [pc, #28]	; (800186c <_kill_r+0x20>)
 8001850:	2300      	movs	r3, #0
 8001852:	4604      	mov	r4, r0
 8001854:	4608      	mov	r0, r1
 8001856:	4611      	mov	r1, r2
 8001858:	602b      	str	r3, [r5, #0]
 800185a:	f7fe ff09 	bl	8000670 <_kill>
 800185e:	1c43      	adds	r3, r0, #1
 8001860:	d102      	bne.n	8001868 <_kill_r+0x1c>
 8001862:	682b      	ldr	r3, [r5, #0]
 8001864:	b103      	cbz	r3, 8001868 <_kill_r+0x1c>
 8001866:	6023      	str	r3, [r4, #0]
 8001868:	bd38      	pop	{r3, r4, r5, pc}
 800186a:	bf00      	nop
 800186c:	20000244 	.word	0x20000244

08001870 <_getpid_r>:
 8001870:	f7fe bef6 	b.w	8000660 <_getpid>

08001874 <_init>:
 8001874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001876:	bf00      	nop
 8001878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800187a:	bc08      	pop	{r3}
 800187c:	469e      	mov	lr, r3
 800187e:	4770      	bx	lr

08001880 <_fini>:
 8001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001882:	bf00      	nop
 8001884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001886:	bc08      	pop	{r3}
 8001888:	469e      	mov	lr, r3
 800188a:	4770      	bx	lr
